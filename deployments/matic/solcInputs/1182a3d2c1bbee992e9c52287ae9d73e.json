{
  "language": "Solidity",
  "sources": {
    "contracts/BarGateway.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.17;\n\nimport {ERC20PermitGateway} from \"@lacrypta/gateway/contracts/ERC20PermitGateway.sol\";\n\ncontract BarGateway is ERC20PermitGateway {\n    constructor(address _peronio) ERC20PermitGateway(_peronio) {}\n\n    // To obtain message to be signed from voucher: stringifyVoucher(voucher)\n    //   The signing procedure _should_ sign the _hash_ of this message\n    //\n    // To serve a voucher (1): serveVoucher(voucher, r, s, v)\n    // To serve a voucher (2): serveVoucher(voucher, sig)\n    //\n    //\n    // Vouchers:\n    //   PermitVoucher:\n    //\n    //     Voucher permitVoucher = Voucher(\n    //       0x77ed603f,       // tag --- constant (see: ERC20PermitGateway.PERMIT_VOUCHER_TAG)\n    //       nonce,            // nonce --- random\n    //       deadline,         // voucher deadline\n    //       abi.encode(       // payload\n    //         PermitVoucher(\n    //             owner,      // funds owner\n    //             spender,    // funds spender\n    //             value,      // funds being permitted\n    //             deadline,   // permit deadline\n    //             v,          // signature \"v\"\n    //             r,          // signature \"r\"\n    //             s           // signature \"s\"\n    //         )\n    //       ),\n    //       bytes()           // metadata --- empty\n    //     );\n    //\n    //   TransferFromVoucher:\n    //\n    //     Voucher transferFromVoucher = Voucher(\n    //       0xf7d48c1c,             // tag -- constant (see: ERC20Gateway.TRANSFER_FROM_VOUCHER_TAG)\n    //       nonce,                  // nonce --- random\n    //       deadline,               // voucher deadline\n    //       abi.encode(             // payload\n    //         TransferFromVoucher(\n    //           from,               // transfer source\n    //           to,                 // transfer destination\n    //           amount              // transfer amount\n    //         )\n    //       ),\n    //       bytes()                 // metadata --- empty\n    //     );\n    //\n}\n"
    },
    "@lacrypta/gateway/contracts/ERC20PermitGateway.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport {IERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {ERC20Gateway} from \"./ERC20Gateway.sol\";\nimport {IERC20PermitGateway} from \"./IERC20PermitGateway.sol\";\n\nimport {ToString} from \"./ToString.sol\";\nimport {Epoch} from \"./DateTime.sol\";\n\nabstract contract ERC20PermitGateway is ERC20Gateway, IERC20PermitGateway {\n    using SafeERC20 for IERC20Permit;\n    using ToString for Epoch;\n    using ToString for address;\n    using ToString for bytes32;\n    using ToString for uint256;\n    using ToString for uint8;\n\n    // Tag associated to the PermitVoucher\n    //\n    // This is computed using the \"encodeType\" convention laid out in <https://eips.ethereum.org/EIPS/eip-712#definition-of-encodetype>.\n    // Note that it is not REQUIRED to be so computed, but we do so anyways to minimize encoding conventions.\n    uint32 public constant override PERMIT_VOUCHER_TAG =\n        uint32(bytes4(keccak256(\"PermitVoucher(address owner,address spender,uint256 value,uint256 deadline,uint8 v,bytes32 r,bytes32 s)\")));\n\n    /**\n     * Build a new ERC20PermitGateway from the given token address\n     *\n     * @param _token  Underlying ERC20 token\n     */\n    constructor(address _token) ERC20Gateway(_token) {\n        _addHandler(PERMIT_VOUCHER_TAG, HandlerEntry({\n            message: _generatePermitVoucherMessage,\n            signer: _extractPermitVoucherSigner,\n            execute: _executePermitVoucher\n        }));\n    }\n\n    /**\n     * Implementation of the IERC165 interface\n     *\n     * @param interfaceId  Interface ID to check against\n     * @return  Whether the provided interface ID is supported\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC20PermitGateway).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * Build a PermitVoucher from the given parameters\n     *\n     * @param nonce  Nonce to use\n     * @param deadline  Voucher deadline to use\n     * @param owner  Permit owner address to use\n     * @param spender  Permit spender address to use\n     * @param value  Permit amount to use\n     * @param permitDeadline  Permit deadline to use\n     * @param v  Permit's signature \"v\" component to use\n     * @param r  Permit's signature \"r\" component to use\n     * @param s  Permit's signature \"s\" component to use\n     * @param metadata  Voucher metadata to use\n     * @return voucher  The generated voucher\n     */\n    function buildPermitVoucher(uint256 nonce, uint256 deadline, address owner, address spender, uint256 value, uint256 permitDeadline, uint8 v, bytes32 r, bytes32 s, bytes calldata metadata) external pure override returns (Voucher memory voucher) {\n        voucher = _buildPermitVoucher(nonce, deadline, owner, spender, value, permitDeadline, v, r, s, metadata);\n    }\n\n    /**\n     * Build a PermitVoucher from the given parameters\n     *\n     * @param nonce  Nonce to use\n     * @param owner  Permit owner address to use\n     * @param spender  Permit spender address to use\n     * @param value  Permit amount to use\n     * @param permitDeadline  Permit deadline to use\n     * @param v  Permit's signature \"v\" component to use\n     * @param r  Permit's signature \"r\" component to use\n     * @param s  Permit's signature \"s\" component to use\n     * @param metadata  Voucher metadata to use\n     * @return voucher  The generated voucher\n     */\n    function buildPermitVoucher(uint256 nonce, address owner, address spender, uint256 value, uint256 permitDeadline, uint8 v, bytes32 r, bytes32 s, bytes calldata metadata) external view override returns (Voucher memory voucher) {\n        voucher = _buildPermitVoucher(nonce, block.timestamp + 1 hours, owner, spender, value, permitDeadline, v, r, s, metadata);\n    }\n\n    /**\n     * Build a PermitVoucher from the given parameters\n     *\n     * @param nonce  Nonce to use\n     * @param deadline  Voucher deadline to use\n     * @param owner  Permit owner address to use\n     * @param spender  Permit spender address to use\n     * @param value  Permit amount to use\n     * @param permitDeadline  Permit deadline to use\n     * @param v  Permit's signature \"v\" component to use\n     * @param r  Permit's signature \"r\" component to use\n     * @param s  Permit's signature \"s\" component to use\n     * @return voucher  The generated voucher\n     */\n    function buildPermitVoucher(uint256 nonce, uint256 deadline, address owner, address spender, uint256 value, uint256 permitDeadline, uint8 v, bytes32 r, bytes32 s) external pure override returns (Voucher memory voucher) {\n        voucher = _buildPermitVoucher(nonce, deadline, owner, spender, value, permitDeadline, v, r, s, bytes(\"\"));\n    }\n\n    /**\n     * Build a PermitVoucher from the given parameters\n     *\n     * @param nonce  Nonce to use\n     * @param owner  Permit owner address to use\n     * @param spender  Permit spender address to use\n     * @param value  Permit amount to use\n     * @param permitDeadline  Permit deadline to use\n     * @param v  Permit's signature \"v\" component to use\n     * @param r  Permit's signature \"r\" component to use\n     * @param s  Permit's signature \"s\" component to use\n     * @return voucher  The generated voucher\n     */\n    function buildPermitVoucher(uint256 nonce, address owner, address spender, uint256 value, uint256 permitDeadline, uint8 v, bytes32 r, bytes32 s) external view override returns (Voucher memory voucher) {\n        voucher = _buildPermitVoucher(nonce, block.timestamp + 1 hours, owner, spender, value, permitDeadline, v, r, s, bytes(\"\"));\n    }\n\n    /**\n     * Build a PermitVoucher from the given parameters\n     *\n     * @param nonce  Nonce to use\n     * @param deadline  Voucher deadline to use\n     * @param owner  Permit owner address to use\n     * @param spender  Permit spender address to use\n     * @param value  Permit amount to use\n     * @param permitDeadline  Permit deadline to use\n     * @param v  Permit's signature \"v\" component to use\n     * @param r  Permit's signature \"r\" component to use\n     * @param s  Permit's signature \"s\" component to use\n     * @param metadata  Voucher metadata to use\n     * @return voucher  The generated voucher\n     */\n    function _buildPermitVoucher(uint256 nonce, uint256 deadline, address owner, address spender, uint256 value, uint256 permitDeadline, uint8 v, bytes32 r, bytes32 s, bytes memory metadata) internal pure returns (Voucher memory voucher) {\n        voucher = Voucher(\n            PERMIT_VOUCHER_TAG,\n            nonce,\n            deadline,\n            abi.encode(PermitVoucher(owner, spender, value, permitDeadline, v, r, s)),\n            metadata\n        );\n    }\n\n    /**\n     * Generate the user-readable message from the given voucher\n     *\n     * @param voucher  Voucher to generate the user-readable message of\n     * @return message  The voucher's generated user-readable message\n     */\n    function _generatePermitVoucherMessage(Voucher calldata voucher) internal view returns (string memory message) {\n        PermitVoucher memory decodedVoucher = abi.decode(voucher.payload, (PermitVoucher));\n        message = string.concat(\n            \"Permit\\n\",\n            string.concat(\"owner: \", decodedVoucher.owner.toString(), \"\\n\"),\n            string.concat(\"spender: \", decodedVoucher.spender.toString(), \"\\n\"),\n            string.concat(\"value: \", IERC20Metadata(token).symbol(), ' ', decodedVoucher.value.toString(IERC20Metadata(token).decimals()), \"\\n\"),\n            string.concat(\"deadline: \", Epoch.wrap(uint40(decodedVoucher.deadline)).toString(), \"\\n\"),\n            string.concat(\"v: \", decodedVoucher.v.toString(), \"\\n\"),\n            string.concat(\"r: \", decodedVoucher.r.toString(), \"\\n\"),\n            string.concat(\"s: \", decodedVoucher.s.toString())\n        );\n    }\n\n    /**\n     * Extract the signer from the given voucher\n     *\n     * @param voucher  Voucher to extract the signer of\n     * @return signer  The voucher's signer\n     */\n    function _extractPermitVoucherSigner(Voucher calldata voucher) internal pure returns (address signer) {\n        PermitVoucher memory decodedVoucher = abi.decode(voucher.payload, (PermitVoucher));\n        signer = decodedVoucher.owner;\n    }\n\n    /**\n     * Execute the given (already validated) voucher\n     *\n     * @param voucher  The voucher to execute\n     */\n    function _executePermitVoucher(Voucher calldata voucher) internal {\n        _beforePermitWithVoucher(voucher);\n\n        PermitVoucher memory decodedVoucher = abi.decode(voucher.payload, (PermitVoucher));\n        IERC20Permit(token).safePermit(\n            decodedVoucher.owner,\n            decodedVoucher.spender,\n            decodedVoucher.value,\n            decodedVoucher.deadline,\n            decodedVoucher.v,\n            decodedVoucher.r,\n            decodedVoucher.s\n        );\n\n        _afterPermitWithVoucher(voucher);\n    }\n\n    /**\n     * Hook called before the actual permit() call is executed\n     *\n     * @param voucher  The voucher being executed\n     */\n    function _beforePermitWithVoucher(Voucher calldata voucher) internal virtual {}\n\n    /**\n     * Hook called after the actual permit() call is executed\n     *\n     * @param voucher  The voucher being executed\n     */\n    function _afterPermitWithVoucher(Voucher calldata voucher) internal virtual {}\n}\n"
    },
    "@lacrypta/gateway/contracts/ERC20Gateway.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {Gateway} from \"./Gateway.sol\";\nimport {IERC20Gateway} from \"./IERC20Gateway.sol\";\n\nimport {ToString} from \"./ToString.sol\";\n\nabstract contract ERC20Gateway is Gateway, IERC20Gateway {\n    using SafeERC20 for IERC20;\n    using ToString for address;\n    using ToString for uint256;\n\n    // address of the underlying ERC20 token\n    address public immutable override token;\n\n    // Tag associated to the TransferFromVoucher\n    //\n    // This is computed using the \"encodeType\" convention laid out in <https://eips.ethereum.org/EIPS/eip-712#definition-of-encodetype>.\n    // Note that it is not REQUIRED to be so computed, but we do so anyways to minimize encoding conventions.\n    uint32 public constant TRANSFER_FROM_VOUCHER_TAG =\n        uint32(bytes4(keccak256(\"TransferFromVoucher(address from,address to,uint256 amount)\")));\n\n    /**\n     * Build a new ERC20Gateway from the given token address\n     *\n     * @param _token  Underlying ERC20 token\n     */\n    constructor(address _token) {\n        token = _token;\n        _addHandler(TRANSFER_FROM_VOUCHER_TAG, HandlerEntry({\n            message: _generateTransferFromVoucherMessage,\n            signer: _extractTransferFromVoucherSigner,\n            execute: _executeTransferFromVoucher\n        }));\n    }\n\n    /**\n     * Implementation of the IERC165 interface\n     *\n     * @param interfaceId  Interface ID to check against\n     * @return  Whether the provided interface ID is supported\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC20Gateway).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * Build a TransferFromVoucher from the given parameters\n     *\n     * @param nonce  Nonce to use\n     * @param deadline  Voucher deadline to use\n     * @param from  Transfer origin to use\n     * @param to  Transfer destination to use\n     * @param amount  Transfer amount to use\n     * @param metadata  Voucher metadata to use\n     * @return voucher  The generated voucher\n     */\n    function buildTransferFromVoucher(uint256 nonce, uint256 deadline, address from, address to, uint256 amount, bytes calldata metadata) external pure override returns (Voucher memory voucher) {\n        voucher = _buildTransferFromVoucher(nonce, deadline, from, to, amount, metadata);\n    }\n\n    /**\n     * Build a TransferFromVoucher from the given parameters\n     *\n     * @param nonce  Nonce to use\n     * @param from  Transfer origin to use\n     * @param to  Transfer destination to use\n     * @param amount  Transfer amount to use\n     * @param metadata  Voucher metadata to use\n     * @return voucher  The generated voucher\n     */\n    function buildTransferFromVoucher(uint256 nonce, address from, address to, uint256 amount, bytes calldata metadata) external view override returns (Voucher memory voucher) {\n        voucher = _buildTransferFromVoucher(nonce, block.timestamp + 1 hours, from, to, amount, metadata);\n    }\n\n    /**\n     * Build a TransferFromVoucher from the given parameters\n     *\n     * @param nonce  Nonce to use\n     * @param deadline  Voucher deadline to use\n     * @param from  Transfer origin to use\n     * @param to  Transfer destination to use\n     * @param amount  Transfer amount to use\n     * @return voucher  The generated voucher\n     */\n    function buildTransferFromVoucher(uint256 nonce, uint256 deadline, address from, address to, uint256 amount) external pure override returns (Voucher memory voucher) {\n        voucher = _buildTransferFromVoucher(nonce, deadline, from, to, amount, bytes(\"\"));\n    }\n\n    /**\n     * Build a TransferFromVoucher from the given parameters\n     *\n     * @param nonce  Nonce to use\n     * @param from  Transfer origin to use\n     * @param to  Transfer destination to use\n     * @param amount  Transfer amount to use\n     * @return voucher  The generated voucher\n     */\n    function buildTransferFromVoucher(uint256 nonce, address from, address to, uint256 amount) external view override returns (Voucher memory voucher) {\n        voucher = _buildTransferFromVoucher(nonce, block.timestamp + 1 hours, from, to, amount, bytes(\"\"));\n    }\n\n    /**\n     * Build a Voucher from the given parameters\n     *\n     * @param nonce  Nonce to use\n     * @param deadline  Voucher deadline to use\n     * @param from  Transfer origin to use\n     * @param to  Transfer destination to use\n     * @param amount  Transfer amount to use\n     * @param metadata  Voucher metadata to use\n     * @return voucher  The generated voucher\n     */\n    function _buildTransferFromVoucher(uint256 nonce, uint256 deadline, address from, address to, uint256 amount, bytes memory metadata) internal pure returns (Voucher memory voucher) {\n        voucher = Voucher(\n            TRANSFER_FROM_VOUCHER_TAG,\n            nonce,\n            deadline,\n            abi.encode(TransferFromVoucher(from, to, amount)),\n            metadata\n        );\n    }\n\n    /**\n     * Generate the user-readable message from the given voucher\n     *\n     * @param voucher  Voucher to generate the user-readable message of\n     * @return message  The voucher's generated user-readable message\n     */\n    function _generateTransferFromVoucherMessage(Voucher calldata voucher) internal view returns (string memory message) {\n        TransferFromVoucher memory decodedVoucher = abi.decode(voucher.payload, (TransferFromVoucher));\n        message = string.concat(\n            \"TransferFrom\\n\",\n            string.concat(\"from: \", decodedVoucher.from.toString(), \"\\n\"),\n            string.concat(\"to: \", decodedVoucher.to.toString(), \"\\n\"),\n            string.concat(\"amount: \", IERC20Metadata(token).symbol(), ' ', decodedVoucher.amount.toString(IERC20Metadata(token).decimals()))\n        );\n    }\n\n    /**\n     * Extract the signer from the given voucher\n     *\n     * @param voucher  Voucher to extract the signer of\n     * @return signer  The voucher's signer\n     */\n    function _extractTransferFromVoucherSigner(Voucher calldata voucher) internal pure returns (address signer) {\n        TransferFromVoucher memory decodedVoucher = abi.decode(voucher.payload, (TransferFromVoucher));\n        signer = decodedVoucher.from;\n    }\n\n    /**\n     * Execute the given (already validated) voucher\n     *\n     * @param voucher  The voucher to execute\n     */\n    function _executeTransferFromVoucher(Voucher calldata voucher) internal {\n        _beforeTransferFromWithVoucher(voucher);\n\n        TransferFromVoucher memory decodedVoucher = abi.decode(voucher.payload, (TransferFromVoucher));\n        IERC20(token).safeTransferFrom(decodedVoucher.from, decodedVoucher.to, decodedVoucher.amount);\n\n        _afterTransferFromWithVoucher(voucher);\n    }\n\n    /**\n     * Hook called before the actual transferFrom() call is executed\n     *\n     * @param voucher  The voucher being executed\n     */\n    function _beforeTransferFromWithVoucher(Voucher calldata voucher) internal virtual {}\n\n    /**\n     * Hook called after the actual transferFrom() call is executed\n     *\n     * @param voucher  The voucher being executed\n     */\n    function _afterTransferFromWithVoucher(Voucher calldata voucher) internal virtual {}\n}\n"
    },
    "@lacrypta/gateway/contracts/IERC20PermitGateway.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport {IERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\n\nimport {IERC20Gateway} from \"./IERC20Gateway.sol\";\n\ninterface IERC20PermitGateway is IERC20Gateway {\n    /**\n     * permit() voucher\n     *\n     * @custom:member owner  The address of the owner of the funds\n     * @custom:member spender  The address of the spender being permitted to move the funds\n     * @custom:member value  The number of tokens to allow transfer of\n     * @custom:member v  The permit's signature \"v\" value\n     * @custom:member r  The permit's signature \"r\" value\n     * @custom:member s  The permit's signature \"s\" value\n     */\n    struct PermitVoucher {\n        address owner;\n        address spender;\n        uint256 value;\n        uint256 deadline;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    /**\n     * Return the tag associated to the PermitVoucher voucher itself\n     *\n     * @return  The tag associated to the PermitVoucher voucher itself\n     */\n    function PERMIT_VOUCHER_TAG() external view returns (uint32);\n\n    /**\n     * Build a PermitVoucher from the given parameters\n     *\n     * @param nonce  Nonce to use\n     * @param deadline  Voucher deadline to use\n     * @param owner  Permit owner address to use\n     * @param spender  Permit spender address to use\n     * @param value  Permit amount to use\n     * @param permitDeadline  Permit deadline to use\n     * @param v  Permit's signature \"v\" component to use\n     * @param r  Permit's signature \"r\" component to use\n     * @param s  Permit's signature \"s\" component to use\n     * @param metadata  Voucher metadata to use\n     * @return voucher  The generated voucher\n     */\n    function buildPermitVoucher(uint256 nonce, uint256 deadline, address owner, address spender, uint256 value, uint256 permitDeadline, uint8 v, bytes32 r, bytes32 s, bytes calldata metadata) external view returns (Voucher memory voucher);\n\n    /**\n     * Build a PermitVoucher from the given parameters\n     *\n     * @param nonce  Nonce to use\n     * @param owner  Permit owner address to use\n     * @param spender  Permit spender address to use\n     * @param value  Permit amount to use\n     * @param permitDeadline  Permit deadline to use\n     * @param v  Permit's signature \"v\" component to use\n     * @param r  Permit's signature \"r\" component to use\n     * @param s  Permit's signature \"s\" component to use\n     * @param metadata  Voucher metadata to use\n     * @return voucher  The generated voucher\n     */\n    function buildPermitVoucher(uint256 nonce, address owner, address spender, uint256 value, uint256 permitDeadline, uint8 v, bytes32 r, bytes32 s, bytes calldata metadata) external view returns (Voucher memory voucher);\n\n    /**\n     * Build a PermitVoucher from the given parameters\n     *\n     * @param nonce  Nonce to use\n     * @param deadline  Voucher deadline to use\n     * @param owner  Permit owner address to use\n     * @param spender  Permit spender address to use\n     * @param value  Permit amount to use\n     * @param permitDeadline  Permit deadline to use\n     * @param v  Permit's signature \"v\" component to use\n     * @param r  Permit's signature \"r\" component to use\n     * @param s  Permit's signature \"s\" component to use\n     * @return voucher  The generated voucher\n     */\n    function buildPermitVoucher(uint256 nonce, uint256 deadline, address owner, address spender, uint256 value, uint256 permitDeadline, uint8 v, bytes32 r, bytes32 s) external view returns (Voucher memory voucher);\n\n    /**\n     * Build a PermitVoucher from the given parameters\n     *\n     * @param nonce  Nonce to use\n     * @param owner  Permit owner address to use\n     * @param spender  Permit spender address to use\n     * @param value  Permit amount to use\n     * @param permitDeadline  Permit deadline to use\n     * @param v  Permit's signature \"v\" component to use\n     * @param r  Permit's signature \"r\" component to use\n     * @param s  Permit's signature \"s\" component to use\n     * @return voucher  The generated voucher\n     */\n    function buildPermitVoucher(uint256 nonce, address owner, address spender, uint256 value, uint256 permitDeadline, uint8 v, bytes32 r, bytes32 s) external view returns (Voucher memory voucher);\n}\n"
    },
    "@lacrypta/gateway/contracts/ToString.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport {DateTimeParts, Epoch, Quarters, dateTimeParts} from \"./DateTime.sol\";\n\nlibrary ToString {\n    /**\n     * Convert the given boolean value to string (ie. \"true\" / \"false\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bool value) public pure returns (string memory) {\n        return value ? \"true\" : \"false\";\n    }\n\n    /**\n     * Convert the given uint value to string\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(uint256 value) public pure returns (string memory) {\n        return toString(value, 0);\n    }\n\n    /**\n     * Convert the given uint value to string, where as many decimal digits are used as given\n     *\n     * @param value  The value to convert to string\n     * @param decimals  The number of decimal places to use\n     * @return  The resulting string\n     */\n    function toString(uint256 value, uint8 decimals) public pure returns (string memory) {\n        unchecked {\n            bytes10 DEC_DIGITS = \"0123456789\";\n\n            bytes memory buffer = \"00000000000000000000000000000000000000000000000000000000000000000000000000000.\";  // buffer.length = 78\n            uint8 i = 78;\n\n            // remove trailing 0s\n            while ((0 < decimals) && (value % 10 == 0)) {\n                value /= 10;\n                decimals--;\n            }\n            // if there are remaining decimals to write, do so\n            if (0 < decimals) {\n                while (0 < decimals) {\n                    buffer[--i] = DEC_DIGITS[value % 10];\n                    value /= 10;\n                    decimals--;\n                }\n                buffer[--i] = '.';\n            }\n            // output a 0 in case nothing left\n            if (value == 0) {\n                buffer[--i] = DEC_DIGITS[0];\n            } else {\n                while (value != 0) {\n                    buffer[--i] = DEC_DIGITS[value % 10];\n                    value /= 10;\n                }\n            }\n            // transfer result from buffer\n            bytes memory result = new bytes(78 - i);\n            uint8 j = 0;\n            while (i < 78) {\n                result[j++] = buffer[i++];\n            }\n            return string(result);\n        }\n    }\n\n    /**\n     * Convert the given int value to string\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(int256 value) public pure returns (string memory) {\n        return toString(value, 0);\n    }\n\n    /**\n     * Convert the given int value to string, where as many decimal digits are used as given\n     *\n     * @param value  The value to convert to string\n     * @param decimals  The number of decimal places to use\n     * @return  The resulting string\n     */\n    function toString(int256 value, uint8 decimals) public pure returns (string memory) {\n        unchecked {\n            if (value < 0) {\n                return string.concat('-', toString(value == type(int256).min ? 1 + type(uint256).max >> 1 : uint256(-value), decimals));\n            } else {\n                return toString(uint256(value), decimals);\n            }\n        }\n    }\n\n    /**\n     * Convert the given bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes memory value) public pure returns (string memory) {\n        unchecked {\n            bytes16 HEX_DIGITS = \"0123456789abcdef\";\n\n            uint256 len = value.length;\n            bytes memory buffer = new bytes(len * 2 + 2);\n\n            buffer[0] = '[';\n            for ((uint256 i, uint256 j, uint256 k) = (0, 1, 2); i < len; (i, j, k) = (i + 1, j + 2, k + 2)) {\n                uint8 val = uint8(value[i]);\n                (buffer[j], buffer[k]) = (HEX_DIGITS[val >> 4], HEX_DIGITS[val & 0x0f]);\n            }\n            buffer[len * 2 + 1] = ']';\n\n            return string(buffer);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes1 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes2 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes3 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes4 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes5 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes6 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes7 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes8 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes9 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes10 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes11 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes12 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes13 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes14 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes15 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes16 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes17 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes18 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes19 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes20 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes21 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes22 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes23 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes24 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes25 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes26 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes27 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes28 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes29 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes30 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes31 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given fixed-size bytes value to string (ie. \"[...]\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(bytes32 value) public pure returns (string memory) {\n        unchecked {\n            bytes memory temp = new bytes(value.length);\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\n            return toString(temp);\n        }\n    }\n\n    /**\n     * Convert the given address value to string (ie. \"<...>\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(address value) public pure returns (string memory) {\n        unchecked {\n            bytes16 HEX_DIGITS = \"0123456789abcdef\";\n\n            bytes20 nValue = bytes20(value);\n            bytes memory buffer = new bytes(42);\n            buffer[0] = '<';\n            for ((uint256 i, uint256 j, uint256 k) = (0, 1, 2); i < 20; (i, j, k) = (i + 1, j + 2, k + 2)) {\n                uint8 val = uint8(nValue[i]);\n                (buffer[j], buffer[k]) = (HEX_DIGITS[val >> 4], HEX_DIGITS[val & 0x0f]);\n            }\n            buffer[41] = '>';\n            return string(buffer);\n        }\n    }\n\n    /**\n     * Convert the given epoch value to ISO8601 format (ie. \"0000-00-00T00:00:00Z\")\n     *\n     * @param value  The value to convert to string\n     * @return  The resulting string\n     */\n    function toString(Epoch value) public pure returns (string memory) {\n        return toString(value, Quarters.wrap(0));\n    }\n\n    /**\n     * Convert the given epoch value to ISO8601 format (ie. \"0000-00-00T00:00:00+00:00\")\n     *\n     * @param value  The value to convert to string\n     * @param tzOffset  The number of quarters-of-an-hour to offset\n     * @return  The resulting string\n     */\n    function toString(Epoch value, Quarters tzOffset) public pure returns (string memory) {\n        unchecked {\n            bytes10 DEC_DIGITS = \"0123456789\";\n\n            DateTimeParts memory parts = dateTimeParts(value, tzOffset);\n\n            bytes memory buffer = \"0000-00-00T00:00:00\";\n\n            buffer[0] = DEC_DIGITS[(parts.year / 1000) % 10];\n            buffer[1] = DEC_DIGITS[(parts.year / 100) % 10];\n            buffer[2] = DEC_DIGITS[(parts.year / 10) % 10];\n            buffer[3] = DEC_DIGITS[parts.year % 10];\n            //\n            buffer[5] = DEC_DIGITS[(parts.month / 10) % 10];\n            buffer[6] = DEC_DIGITS[parts.month % 10];\n            //\n            buffer[8] = DEC_DIGITS[(parts.day / 10) % 10];\n            buffer[9] = DEC_DIGITS[parts.day % 10];\n            //\n            buffer[11] = DEC_DIGITS[(parts.hour / 10) % 10];\n            buffer[12] = DEC_DIGITS[parts.hour % 10];\n            //\n            buffer[14] = DEC_DIGITS[(parts.minute / 10) % 10];\n            buffer[15] = DEC_DIGITS[parts.minute % 10];\n            //\n            buffer[17] = DEC_DIGITS[(parts.second / 10) % 10];\n            buffer[18] = DEC_DIGITS[parts.second % 10];\n\n            if (Quarters.unwrap(tzOffset) == 0) {\n                return string.concat(string(buffer), \"Z\");\n            } else {\n                bytes memory tzBuffer = \" 00:00\";\n                uint8 tzh;\n                if (Quarters.unwrap(tzOffset) < 0) {\n                    tzBuffer[0] = \"-\";\n                    tzh = uint8(-parts.tzHours);\n                } else {\n                    tzBuffer[0] = \"+\";\n                    tzh = uint8(parts.tzHours);\n                }\n\n                tzBuffer[1] = DEC_DIGITS[(tzh / 10) % 10];\n                tzBuffer[2] = DEC_DIGITS[tzh % 10];\n                //\n                tzBuffer[4] = DEC_DIGITS[(parts.tzMinutes / 10) % 10];\n                tzBuffer[5] = DEC_DIGITS[parts.tzMinutes % 10];\n\n                return string.concat(string(buffer), string(tzBuffer));\n            }\n        }\n    }\n}\n"
    },
    "@lacrypta/gateway/contracts/DateTime.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.8.17;\n\n// Type used for UNIX epoch quantities\ntype Epoch is uint40;\n\n// Type used to represent \"quarters-of-an-hour\" (used for timezone offset specification)\ntype Quarters is int8;\n\n/**\n * Set of parts of a date/time value encoded by a given epoch\n *\n * @custom:member year  The year the given epoch encodes\n * @custom:member month  The month the given epoch encodes\n * @custom:member day  The day the given epoch encodes\n * @custom:member hour  The hour the given epoch encodes\n * @custom:member minute  The minute the given epoch encodes\n * @custom:member second  The second the given epoch encodes\n * @custom:member tzHours  The timezone offset hours\n * @custom:member tzMinutes  The timezone offset minutes (always multiple of 15)\n */\nstruct DateTimeParts {\n    uint256 year;\n    uint256 month;\n    uint256 day;\n    uint256 hour;\n    uint256 minute;\n    uint256 second;\n    int8 tzHours;\n    uint256 tzMinutes;\n}\n\n/**\n * Extract the date/time components from the given epoch value\n *\n * @param value  The value to extract components from\n * @return dateTimeParts  The DateTimeParts the given epoch encodes\n */\nfunction dateTimeParts(Epoch value) pure returns (DateTimeParts memory) {\n    return dateTimeParts(value, Quarters.wrap(0));\n}\n\n/**\n * Extract the date/time components from the given epoch value and timezone offset\n *\n * Mostly taken from: https://howardhinnant.github.io/date_algorithms.html#civil_from_days\n *\n * @param value  The value to extract components from\n * @param tzOffset  The number of quarters-of-an-hour to offset\n * @return dateTimeParts  The DateTimeParts the given epoch encodes\n */\nfunction dateTimeParts(Epoch value, Quarters tzOffset) pure returns (DateTimeParts memory) {\n    unchecked {\n        require(-48 <= Quarters.unwrap(tzOffset), \"Strings: timezone offset too small\");\n        require(Quarters.unwrap(tzOffset) <= 56, \"Strings: timezone offset too big\");\n\n        DateTimeParts memory result;\n\n        int256 tzOffsetInSeconds = int256(Quarters.unwrap(tzOffset)) * 900;\n        uint256 nValue;\n        if (tzOffsetInSeconds < 0) {\n            require(uint256(-tzOffsetInSeconds) <= Epoch.unwrap(value), \"Strings: epoch time too small for timezone offset\");\n            nValue = Epoch.unwrap(value) - uint256(-tzOffsetInSeconds);\n        } else {\n            nValue = Epoch.unwrap(value) + uint256(tzOffsetInSeconds);\n        }\n\n        require(nValue <= 253402311599, \"Strings: epoch time too big\");\n\n        {\n            uint256 z = nValue / 86400 + 719468;\n            uint256 era = z / 146097;\n            uint256 doe = z - era * 146097;\n            uint256 yoe = (doe - doe / 1460 + doe / 36524 - doe / 146096) / 365;\n            uint256 doy = doe - (365 * yoe + yoe / 4 - yoe / 100);\n            uint256 mp = (5 * doy + 2) / 153;\n            //\n            result.year = yoe + era * 400 + (mp == 10 || mp == 11 ? 1 : 0);\n            result.month = mp < 10 ? mp + 3 : mp - 9;\n            result.day = doy - (153 * mp + 2) / 5 + 1;\n        }\n\n        {\n            uint256 w = nValue % 86400;\n            //\n            result.hour = w / 3600;\n            result.minute = (w % 3600) / 60;\n            result.second = w % 60;\n        }\n\n        result.tzHours = int8(tzOffsetInSeconds / 3600);\n        result.tzMinutes = uint8((uint256(tzOffsetInSeconds < 0 ? -tzOffsetInSeconds : tzOffsetInSeconds) % 3600) / 60);\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@lacrypta/gateway/contracts/Gateway.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {SignatureChecker} from \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\n\nimport {Multicall} from \"@openzeppelin/contracts/utils/Multicall.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport {ToString} from \"./ToString.sol\";\nimport {Epoch} from \"./DateTime.sol\";\n\nimport \"./IGateway.sol\";\n\nabstract contract Gateway is Context, ERC165, IGateway, Multicall, ReentrancyGuard {\n    using ToString for Epoch;\n    using ToString for bytes;\n    using ToString for uint32;\n    using ToString for uint256;\n\n    /**\n     * Structure used to keep track of handling functions\n     *\n     * @custom:member message  The user-readable message-generating function\n     * @custom:member signer  The signer-extractor function\n     * @custom:member execute  The execution function\n     */\n    struct HandlerEntry {\n        function(Voucher calldata) view returns (string memory) message;\n        function(Voucher calldata) view returns (address) signer;\n        function(Voucher calldata) execute;\n    }\n\n    // Mapping from voucher tag to handling entry\n    mapping(uint32 => HandlerEntry) private voucherHandler;\n\n    // typehash associated to the gateway Voucher itself\n    //\n    // This is computed using the \"encodeType\" convention laid out in <https://eips.ethereum.org/EIPS/eip-712#definition-of-encodetype>.\n    bytes32 public constant override VOUCHER_TYPEHASH =\n        keccak256(\"Voucher(uint32 tag,uint256 nonce,uint256 deadline,bytes payload,bytes metadata)\");\n\n    // Set of voucher hashes served\n    mapping(bytes32 => bool) public override voucherServed;\n\n    /**\n     * Implementation of the IERC165 interface\n     *\n     * @param interfaceId  Interface ID to check against\n     * @return  Whether the provided interface ID is supported\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IGateway).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * Return the voucher hash associated to the given voucher\n     *\n     * @param voucher  The voucher to retrieve the hash for\n     * @return voucherHash  The voucher hash associated to the given voucher\n     */\n    function hashVoucher(Voucher calldata voucher) external view override returns (bytes32 voucherHash) {\n        voucherHash = _hashVoucher(voucher);\n    }\n\n    /**\n     * Return the string representation to be signed for a given Voucher\n     *\n     * @param voucher  The voucher to stringify\n     * @return voucherString  The string representation to be signed of the given voucher\n     */\n    function stringifyVoucher(Voucher calldata voucher) external view override returns (string memory voucherString) {\n        voucherString = _stringifyVoucher(voucher);\n    }\n\n    /**\n     * Validate the given voucher against the given signature\n     *\n     * @param voucher  The voucher to validate\n     * @param signature  The associated voucher signature\n     */\n    function validateVoucher(Voucher calldata voucher, bytes calldata signature) external view override {\n        _validateVoucher(voucher, signature);\n    }\n\n    /**\n     * Validate the given voucher against the given signature, by the given signer\n     *\n     * @param voucher  The voucher to validate\n     * @param r  The \"r\" component of the associated voucher signature\n     * @param s  The \"s\" component of the associated voucher signature\n     * @param v  The \"v\" component of the associated voucher signature\n     */\n    function validateVoucher(Voucher calldata voucher, bytes32 r, bytes32 s, uint8 v) external view override {\n        _validateVoucher(voucher, _joinSignatureParts(r, s, v));\n    }\n\n    /**\n     * Serve the given voucher, by forwarding to the appropriate handler for the voucher's tag\n     *\n     * @param voucher  The voucher to serve\n     * @param signature  The associated voucher signature\n     * @custom:emit  VoucherServed\n     */\n    function serveVoucher(Voucher calldata voucher, bytes calldata signature) external override nonReentrant {\n        _serveVoucher(voucher, signature);\n    }\n\n    /**\n     * Serve the given voucher, by forwarding to the appropriate handler for the voucher's tag\n     *\n     * @param voucher  The voucher to serve\n     * @param r  The \"r\" component of the associated voucher signature\n     * @param s  The \"s\" component of the associated voucher signature\n     * @param v  The \"v\" component of the associated voucher signature\n     * @custom:emit  VoucherServed\n     */\n    function serveVoucher(Voucher calldata voucher, bytes32 r, bytes32 s, uint8 v) external override nonReentrant {\n        _serveVoucher(voucher, _joinSignatureParts(r, s, v));\n    }\n\n    // --- Protected handling ---------------------------------------------------------------------------------------------------------------------------------\n\n    /**\n     * Add the given pair of signer and serving functions to the tag map\n     *\n     * @param tag  The tag to add the mapping for\n     * @param entry  The handling entry instance\n     */\n    function _addHandler(uint32 tag, HandlerEntry memory entry) internal {\n        voucherHandler[tag] = entry;\n    }\n\n    /**\n     * Add the given pair of signer and serving functions to the tag map\n     *\n     * @param tag  The tag to remove the mapping for\n     * @return entry  The previous entry\n     */\n    function _removeHandler(uint32 tag) internal returns (HandlerEntry memory entry) {\n        entry = voucherHandler[tag];\n        delete voucherHandler[tag];\n    }\n\n    // --- Protected utilities --------------------------------------------------------------------------------------------------------------------------------\n\n    /**\n     * Return the user-readable message for the given voucher\n     *\n     * @param voucher  Voucher to obtain the user-readable message for\n     * @return message  The voucher's user-readable message\n     */\n    function _message(Voucher calldata voucher) internal view returns (string memory message) {\n        message = voucherHandler[voucher.tag].message(voucher);\n    }\n\n    /**\n     * Retrieve the signer of the given Voucher\n     *\n     * @param voucher  Voucher to retrieve the signer of\n     * @return signer  The voucher's signer\n     */\n    function _signer(Voucher calldata voucher) internal view returns (address signer) {\n        signer = voucherHandler[voucher.tag].signer(voucher);\n    }\n\n    /**\n     * Execute the given Voucher\n     *\n     * @param voucher  Voucher to execute\n     */\n    function _execute(Voucher calldata voucher) internal {\n        voucherHandler[voucher.tag].execute(voucher);\n    }\n\n    /**\n     * Actually return the string representation to be signed for a given Voucher\n     *\n     * @param voucher  The voucher to stringify\n     * @return voucherString  The string representation to be signed of the given voucher\n     */\n    function _stringifyVoucher(Voucher calldata voucher) internal view returns (string memory voucherString) {\n        voucherString = string.concat(\n            string.concat(_message(voucher), \"\\n\"),\n            \"---\\n\",\n            string.concat(\"tag: \", voucher.tag.toString(), \"\\n\"),\n            string.concat(\"nonce: \", voucher.nonce.toString(), \"\\n\"),\n            string.concat(\"deadline: \", Epoch.wrap(uint40(voucher.deadline)).toString(), \"\\n\"),\n            string.concat(\"payload: \", voucher.payload.toString(), \"\\n\"),\n            string.concat(\"metadata: \", voucher.metadata.toString())\n        );\n    }\n\n    /**\n     * Actually return the voucher hash associated to the given voucher\n     *\n     * @param voucher  The voucher to retrieve the hash for\n     * @return voucherHash  The voucher hash associated to the given voucher\n     */\n    function _hashVoucher(Voucher calldata voucher) internal view returns (bytes32 voucherHash) {\n        voucherHash = keccak256(bytes(_stringifyVoucher(voucher)));\n    }\n\n    /**\n     * Validate the given voucher against the given signature, by the given signer\n     *\n     * @param voucher  The voucher to validate\n     * @param signature  The associated voucher signature\n     */\n    function _validateVoucher(Voucher calldata voucher, bytes memory signature) internal view {\n        require(SignatureChecker.isValidSignatureNow(_signer(voucher), _hashVoucher(voucher), signature), \"Gateway: invalid voucher signature\");\n        require(block.timestamp <= voucher.deadline, \"Gateway: expired deadline\");\n    }\n\n    /**\n     * Mark the given voucher hash as served, and emit the corresponding event\n     *\n     * @param voucher  The voucher hash to serve\n     * @param signature  The associated voucher signature\n     * @custom:emit  VoucherServed\n     */\n    function _serveVoucher(Voucher calldata voucher, bytes memory signature) internal {\n        _validateVoucher(voucher, signature);\n\n        bytes32 voucherHash = _hashVoucher(voucher);\n        require(voucherServed[voucherHash] == false, \"Gateway: voucher already served\");\n        voucherServed[voucherHash] = true;\n\n        _execute(voucher);\n\n        emit VoucherServed(voucherHash, _msgSender());\n    }\n\n    // --- Private Utilities ----------------------------------------------------------------------------------------------------------------------------------\n\n    /**\n     * Join the \"r\", \"s\", and \"v\" components of a signature into a single bytes structure\n     *\n     * @param r  The \"r\" component of the signature\n     * @param s  The \"s\" component of the signature\n     * @param v  The \"v\" component of the signature\n     * @return signature  The joint signature\n     */\n    function _joinSignatureParts(bytes32 r, bytes32 s, uint8 v) private pure returns (bytes memory signature) {\n        signature = bytes.concat(r, s, bytes1(v));\n    }\n}\n"
    },
    "@lacrypta/gateway/contracts/IERC20Gateway.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport {IGateway} from \"./IGateway.sol\";\n\ninterface IERC20Gateway is IGateway {\n    /**\n     * Retrieve the address of the underlying ERC20 token\n     *\n     * @return  The address of the underlying ERC20 token\n     */\n    function token() external view returns (address);\n\n    /**\n     * transferFrom() voucher\n     *\n     * @custom:member from  The address from which to transfer funds\n     * @custom:member to  The address to which to transfer funds\n     * @custom:member amount  The number of tokens to transfer\n     */\n    struct TransferFromVoucher {\n        address from;\n        address to;\n        uint256 amount;\n    }\n\n    /**\n     * Return the tag associated to the TransferFromVoucher voucher itself\n     *\n     * @return  The tag associated to the TransferFromVoucher voucher itself\n     */\n    function TRANSFER_FROM_VOUCHER_TAG() external view returns (uint32);\n\n    /**\n     * Build a TransferFromVoucher from the given parameters\n     *\n     * @param nonce  Nonce to use\n     * @param deadline  Voucher deadline to use\n     * @param from  Transfer origin to use\n     * @param to  Transfer destination to use\n     * @param amount  Transfer amount to use\n     * @param metadata  Voucher metadata to use\n     * @return voucher  The generated voucher\n     */\n    function buildTransferFromVoucher(uint256 nonce, uint256 deadline, address from, address to, uint256 amount, bytes calldata metadata) external view returns (Voucher memory voucher);\n\n    /**\n     * Build a TransferFromVoucher from the given parameters\n     *\n     * @param nonce  Nonce to use\n     * @param from  Transfer origin to use\n     * @param to  Transfer destination to use\n     * @param amount  Transfer amount to use\n     * @param metadata  Voucher metadata to use\n     * @return voucher  The generated voucher\n     */\n    function buildTransferFromVoucher(uint256 nonce, address from, address to, uint256 amount, bytes calldata metadata) external view returns (Voucher memory voucher);\n\n    /**\n     * Build a TransferFromVoucher from the given parameters\n     *\n     * @param nonce  Nonce to use\n     * @param deadline  Voucher deadline to use\n     * @param from  Transfer origin to use\n     * @param to  Transfer destination to use\n     * @param amount  Transfer amount to use\n     * @return voucher  The generated voucher\n     */\n    function buildTransferFromVoucher(uint256 nonce, uint256 deadline, address from, address to, uint256 amount) external view returns (Voucher memory voucher);\n\n    /**\n     * Build a TransferFromVoucher from the given parameters\n     *\n     * @param nonce  Nonce to use\n     * @param from  Transfer origin to use\n     * @param to  Transfer destination to use\n     * @param amount  Transfer amount to use\n     * @return voucher  The generated voucher\n     */\n    function buildTransferFromVoucher(uint256 nonce, address from, address to, uint256 amount) external view returns (Voucher memory voucher);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Multicall.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Address.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * _Available since v4.1._\n */\nabstract contract Multicall {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     */\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\n        }\n        return results;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@lacrypta/gateway/contracts/IGateway.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.8.17;\n\ninterface IGateway {\n    /**\n     * Voucher --- tagged union used for specific vouchers' implementation\n     *\n     * @custom:member tag  An integer representing the type of voucher this particular voucher is\n     * @custom:member nonce  The voucher nonce to use\n     * @custom:member deadline  The maximum block timestamp this voucher is valid until\n     * @custom:member payload  Actual abi.encode()-ed payload (used for serving the call proper)\n     * @custom:member metadata  Additional abi.encode()-ed metadata (used for administrative tasks)\n     */\n    struct Voucher {\n        uint32 tag;\n        //\n        uint256 nonce;\n        uint256 deadline;\n        //\n        bytes payload;\n        bytes metadata;\n    }\n\n    /**\n     * Emitted upon a voucher being served\n     *\n     * @param voucherHash  The voucher hash served\n     * @param delegate  The delegate serving the voucher\n     */\n    event VoucherServed(bytes32 indexed voucherHash, address delegate);\n\n    /**\n     * Return the typehash associated to the Gateway Voucher itself\n     *\n     * @return  The typehash associated to the gateway Voucher itself\n     */\n    function VOUCHER_TYPEHASH() external view returns (bytes32);\n\n    /**\n     * Determine whether the given voucher hash has been already served\n     *\n     * @param voucherHash  The voucher hash to check\n     * @return served  True whenever the given voucher hash has already been served\n     */\n    function voucherServed(bytes32 voucherHash) external view returns (bool served);\n\n    /**\n     * Return the voucher hash associated to the given voucher\n     *\n     * @param voucher  The voucher to retrieve the hash for\n     * @return voucherHash  The voucher hash associated to the given voucher\n     */\n    function hashVoucher(Voucher calldata voucher) external view returns (bytes32 voucherHash);\n\n    /**\n     * Return the string representation to be signed for a given Voucher\n     *\n     * @param voucher  The voucher to stringify\n     * @return voucherString  The string representation to be signed of the given voucher\n     */\n    function stringifyVoucher(Voucher calldata voucher) external view returns (string memory voucherString);\n\n    /**\n     * Validate the given voucher against the given signature, by the given signer\n     *\n     * @param voucher  The voucher to validate\n     * @param signature  The associated voucher signature\n     */\n    function validateVoucher(Voucher calldata voucher, bytes memory signature) external view;\n\n    /**\n     * Validate the given voucher against the given signature, by the given signer\n     *\n     * @param voucher  The voucher to validate\n     * @param r  The \"r\" component of the associated voucher signature\n     * @param s  The \"s\" component of the associated voucher signature\n     * @param v  The \"v\" component of the associated voucher signature\n     */\n    function validateVoucher(Voucher calldata voucher, bytes32 r, bytes32 s, uint8 v) external view;\n\n    /**\n     * Serve the given voucher, by forwarding to the appropriate handler for the voucher's tag\n     *\n     * @param voucher  The voucher to serve\n     * @param signature  The associated voucher signature\n     * @custom:emit  VoucherServed\n     */\n    function serveVoucher(Voucher calldata voucher, bytes calldata signature) external;\n\n    /**\n     * Serve the given voucher, by forwarding to the appropriate handler for the voucher's tag\n     *\n     * @param voucher  The voucher to serve\n     * @param r  The \"r\" component of the associated voucher signature\n     * @param s  The \"s\" component of the associated voucher signature\n     * @param v  The \"v\" component of the associated voucher signature\n     * @custom:emit  VoucherServed\n     */\n    function serveVoucher(Voucher calldata voucher, bytes32 r, bytes32 s, uint8 v) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.1) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../Address.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success &&\n            result.length == 32 &&\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000,
      "details": {
        "peephole": true,
        "inliner": true,
        "jumpdestRemover": true,
        "orderLiterals": true,
        "deduplicate": true,
        "cse": true,
        "constantOptimizer": true,
        "yul": true,
        "yulDetails": {
          "stackAllocation": true
        }
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
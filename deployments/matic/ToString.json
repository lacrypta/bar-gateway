{
  "address": "0x1E232D4c772C2A9849aDf2D979201DAbd2c19763",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes25",
          "name": "value",
          "type": "bytes25"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes14",
          "name": "value",
          "type": "bytes14"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Epoch",
          "name": "value",
          "type": "uint40"
        },
        {
          "internalType": "Quarters",
          "name": "tzOffset",
          "type": "int8"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes5",
          "name": "value",
          "type": "bytes5"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes30",
          "name": "value",
          "type": "bytes30"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes18",
          "name": "value",
          "type": "bytes18"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Epoch",
          "name": "value",
          "type": "uint40"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes13",
          "name": "value",
          "type": "bytes13"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes6",
          "name": "value",
          "type": "bytes6"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes3",
          "name": "value",
          "type": "bytes3"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes23",
          "name": "value",
          "type": "bytes23"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "value",
          "type": "bytes"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes17",
          "name": "value",
          "type": "bytes17"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes9",
          "name": "value",
          "type": "bytes9"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes28",
          "name": "value",
          "type": "bytes28"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "value",
          "type": "bytes16"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "value",
          "type": "bytes29"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes12",
          "name": "value",
          "type": "bytes12"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes8",
          "name": "value",
          "type": "bytes8"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes31",
          "name": "value",
          "type": "bytes31"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes27",
          "name": "value",
          "type": "bytes27"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes2",
          "name": "value",
          "type": "bytes2"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes11",
          "name": "value",
          "type": "bytes11"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes26",
          "name": "value",
          "type": "bytes26"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes15",
          "name": "value",
          "type": "bytes15"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "value",
          "type": "bytes32"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "value",
          "type": "bytes4"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes21",
          "name": "value",
          "type": "bytes21"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes10",
          "name": "value",
          "type": "bytes10"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes24",
          "name": "value",
          "type": "bytes24"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes1",
          "name": "value",
          "type": "bytes1"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes7",
          "name": "value",
          "type": "bytes7"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes19",
          "name": "value",
          "type": "bytes19"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes22",
          "name": "value",
          "type": "bytes22"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes20",
          "name": "value",
          "type": "bytes20"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x856a9f1643a62b10f754c40d0a6395ec962cc8f936fa174a61350829c1a7767d",
  "receipt": {
    "to": null,
    "from": "0x4BADCf0DCeaAD060f86D9b34c9E118c8319945AE",
    "contractAddress": "0x1E232D4c772C2A9849aDf2D979201DAbd2c19763",
    "transactionIndex": 54,
    "gasUsed": "2980935",
    "logsBloom": "0x
    "blockHash": "0x4061d194b9fd673cfccdae298ea05815204b29a708ba95b86f1313679442b5a7",
    "transactionHash": "0x856a9f1643a62b10f754c40d0a6395ec962cc8f936fa174a61350829c1a7767d",
    "logs": [
      {
        "transactionIndex": 54,
        "blockNumber": 34301787,
        "transactionHash": "0x856a9f1643a62b10f754c40d0a6395ec962cc8f936fa174a61350829c1a7767d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004badcf0dceaad060f86d9b34c9e118c8319945ae",
          "0x00000000000000000000000026c80cc193b27d73d2c40943acec77f4da2c5bd8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000013fd497851d5957000000000000000000000000000000000000000000000000deb2cfd6731dd716000000000000000000000000000000000000000000005e2a59839ee9ac671642000000000000000000000000000000000000000000000000dd72fb3eee007dbf000000000000000000000000000000000000000000005e2a5ac3738131846f99",
        "logIndex": 292,
        "blockHash": "0x4061d194b9fd673cfccdae298ea05815204b29a708ba95b86f1313679442b5a7"
      }
    ],
    "blockNumber": 34301787,
    "cumulativeGasUsed": "22883380",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1182a3d2c1bbee992e9c52287ae9d73e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes25\",\"name\":\"value\",\"type\":\"bytes25\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes14\",\"name\":\"value\",\"type\":\"bytes14\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Epoch\",\"name\":\"value\",\"type\":\"uint40\"},{\"internalType\":\"Quarters\",\"name\":\"tzOffset\",\"type\":\"int8\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes5\",\"name\":\"value\",\"type\":\"bytes5\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes30\",\"name\":\"value\",\"type\":\"bytes30\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes18\",\"name\":\"value\",\"type\":\"bytes18\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Epoch\",\"name\":\"value\",\"type\":\"uint40\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes13\",\"name\":\"value\",\"type\":\"bytes13\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes6\",\"name\":\"value\",\"type\":\"bytes6\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes3\",\"name\":\"value\",\"type\":\"bytes3\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes23\",\"name\":\"value\",\"type\":\"bytes23\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes17\",\"name\":\"value\",\"type\":\"bytes17\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes9\",\"name\":\"value\",\"type\":\"bytes9\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes28\",\"name\":\"value\",\"type\":\"bytes28\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"value\",\"type\":\"bytes16\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"value\",\"type\":\"bytes29\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes12\",\"name\":\"value\",\"type\":\"bytes12\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes8\",\"name\":\"value\",\"type\":\"bytes8\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes31\",\"name\":\"value\",\"type\":\"bytes31\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes27\",\"name\":\"value\",\"type\":\"bytes27\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes2\",\"name\":\"value\",\"type\":\"bytes2\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes11\",\"name\":\"value\",\"type\":\"bytes11\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes26\",\"name\":\"value\",\"type\":\"bytes26\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes15\",\"name\":\"value\",\"type\":\"bytes15\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"value\",\"type\":\"bytes4\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes21\",\"name\":\"value\",\"type\":\"bytes21\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes10\",\"name\":\"value\",\"type\":\"bytes10\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes24\",\"name\":\"value\",\"type\":\"bytes24\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"value\",\"type\":\"bytes1\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes7\",\"name\":\"value\",\"type\":\"bytes7\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes19\",\"name\":\"value\",\"type\":\"bytes19\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes22\",\"name\":\"value\",\"type\":\"bytes22\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"value\",\"type\":\"bytes20\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"toString(address)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bool)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes1)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes10)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes11)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes12)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes13)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes14)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes15)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes16)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes17)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes18)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes19)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes2)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes20)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes21)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes22)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes23)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes24)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes25)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes26)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes27)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes28)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes29)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes3)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes30)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes31)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes32)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes4)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes5)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes6)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes7)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes8)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes9)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(int256)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(int256,uint8)\":{\"params\":{\"decimals\":\"The number of decimal places to use\",\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(uint256)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(uint256,uint8)\":{\"params\":{\"decimals\":\"The number of decimal places to use\",\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(uint40)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(uint40,int8)\":{\"params\":{\"tzOffset\":\"The number of quarters-of-an-hour to offset\",\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"toString(address)\":{\"notice\":\"Convert the given address value to string (ie. \\\"<...>\\\")\"},\"toString(bool)\":{\"notice\":\"Convert the given boolean value to string (ie. \\\"true\\\" / \\\"false\\\")\"},\"toString(bytes)\":{\"notice\":\"Convert the given bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes1)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes10)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes11)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes12)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes13)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes14)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes15)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes16)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes17)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes18)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes19)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes2)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes20)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes21)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes22)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes23)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes24)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes25)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes26)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes27)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes28)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes29)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes3)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes30)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes31)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes32)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes4)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes5)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes6)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes7)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes8)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes9)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(int256)\":{\"notice\":\"Convert the given int value to string\"},\"toString(int256,uint8)\":{\"notice\":\"Convert the given int value to string, where as many decimal digits are used as given\"},\"toString(uint256)\":{\"notice\":\"Convert the given uint value to string\"},\"toString(uint256,uint8)\":{\"notice\":\"Convert the given uint value to string, where as many decimal digits are used as given\"},\"toString(uint40)\":{\"notice\":\"Convert the given epoch value to ISO8601 format (ie. \\\"0000-00-00T00:00:00Z\\\")\"},\"toString(uint40,int8)\":{\"notice\":\"Convert the given epoch value to ISO8601 format (ie. \\\"0000-00-00T00:00:00+00:00\\\")\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lacrypta/gateway/contracts/ToString.sol\":\"ToString\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@lacrypta/gateway/contracts/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\n// Type used for UNIX epoch quantities\\ntype Epoch is uint40;\\n\\n// Type used to represent \\\"quarters-of-an-hour\\\" (used for timezone offset specification)\\ntype Quarters is int8;\\n\\n/**\\n * Set of parts of a date/time value encoded by a given epoch\\n *\\n * @custom:member year  The year the given epoch encodes\\n * @custom:member month  The month the given epoch encodes\\n * @custom:member day  The day the given epoch encodes\\n * @custom:member hour  The hour the given epoch encodes\\n * @custom:member minute  The minute the given epoch encodes\\n * @custom:member second  The second the given epoch encodes\\n * @custom:member tzHours  The timezone offset hours\\n * @custom:member tzMinutes  The timezone offset minutes (always multiple of 15)\\n */\\nstruct DateTimeParts {\\n    uint256 year;\\n    uint256 month;\\n    uint256 day;\\n    uint256 hour;\\n    uint256 minute;\\n    uint256 second;\\n    int8 tzHours;\\n    uint256 tzMinutes;\\n}\\n\\n/**\\n * Extract the date/time components from the given epoch value\\n *\\n * @param value  The value to extract components from\\n * @return dateTimeParts  The DateTimeParts the given epoch encodes\\n */\\nfunction dateTimeParts(Epoch value) pure returns (DateTimeParts memory) {\\n    return dateTimeParts(value, Quarters.wrap(0));\\n}\\n\\n/**\\n * Extract the date/time components from the given epoch value and timezone offset\\n *\\n * Mostly taken from: https://howardhinnant.github.io/date_algorithms.html#civil_from_days\\n *\\n * @param value  The value to extract components from\\n * @param tzOffset  The number of quarters-of-an-hour to offset\\n * @return dateTimeParts  The DateTimeParts the given epoch encodes\\n */\\nfunction dateTimeParts(Epoch value, Quarters tzOffset) pure returns (DateTimeParts memory) {\\n    unchecked {\\n        require(-48 <= Quarters.unwrap(tzOffset), \\\"Strings: timezone offset too small\\\");\\n        require(Quarters.unwrap(tzOffset) <= 56, \\\"Strings: timezone offset too big\\\");\\n\\n        DateTimeParts memory result;\\n\\n        int256 tzOffsetInSeconds = int256(Quarters.unwrap(tzOffset)) * 900;\\n        uint256 nValue;\\n        if (tzOffsetInSeconds < 0) {\\n            require(uint256(-tzOffsetInSeconds) <= Epoch.unwrap(value), \\\"Strings: epoch time too small for timezone offset\\\");\\n            nValue = Epoch.unwrap(value) - uint256(-tzOffsetInSeconds);\\n        } else {\\n            nValue = Epoch.unwrap(value) + uint256(tzOffsetInSeconds);\\n        }\\n\\n        require(nValue <= 253402311599, \\\"Strings: epoch time too big\\\");\\n\\n        {\\n            uint256 z = nValue / 86400 + 719468;\\n            uint256 era = z / 146097;\\n            uint256 doe = z - era * 146097;\\n            uint256 yoe = (doe - doe / 1460 + doe / 36524 - doe / 146096) / 365;\\n            uint256 doy = doe - (365 * yoe + yoe / 4 - yoe / 100);\\n            uint256 mp = (5 * doy + 2) / 153;\\n            //\\n            result.year = yoe + era * 400 + (mp == 10 || mp == 11 ? 1 : 0);\\n            result.month = mp < 10 ? mp + 3 : mp - 9;\\n            result.day = doy - (153 * mp + 2) / 5 + 1;\\n        }\\n\\n        {\\n            uint256 w = nValue % 86400;\\n            //\\n            result.hour = w / 3600;\\n            result.minute = (w % 3600) / 60;\\n            result.second = w % 60;\\n        }\\n\\n        result.tzHours = int8(tzOffsetInSeconds / 3600);\\n        result.tzMinutes = uint8((uint256(tzOffsetInSeconds < 0 ? -tzOffsetInSeconds : tzOffsetInSeconds) % 3600) / 60);\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x95f6efa54acae419b70bf706968b5f28dc2cfe5400731d9c043ae415b69492b2\",\"license\":\"AGPL-3.0-or-later\"},\"@lacrypta/gateway/contracts/ToString.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport {DateTimeParts, Epoch, Quarters, dateTimeParts} from \\\"./DateTime.sol\\\";\\n\\nlibrary ToString {\\n    /**\\n     * Convert the given boolean value to string (ie. \\\"true\\\" / \\\"false\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bool value) public pure returns (string memory) {\\n        return value ? \\\"true\\\" : \\\"false\\\";\\n    }\\n\\n    /**\\n     * Convert the given uint value to string\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(uint256 value) public pure returns (string memory) {\\n        return toString(value, 0);\\n    }\\n\\n    /**\\n     * Convert the given uint value to string, where as many decimal digits are used as given\\n     *\\n     * @param value  The value to convert to string\\n     * @param decimals  The number of decimal places to use\\n     * @return  The resulting string\\n     */\\n    function toString(uint256 value, uint8 decimals) public pure returns (string memory) {\\n        unchecked {\\n            bytes10 DEC_DIGITS = \\\"0123456789\\\";\\n\\n            bytes memory buffer = \\\"00000000000000000000000000000000000000000000000000000000000000000000000000000.\\\";  // buffer.length = 78\\n            uint8 i = 78;\\n\\n            // remove trailing 0s\\n            while ((0 < decimals) && (value % 10 == 0)) {\\n                value /= 10;\\n                decimals--;\\n            }\\n            // if there are remaining decimals to write, do so\\n            if (0 < decimals) {\\n                while (0 < decimals) {\\n                    buffer[--i] = DEC_DIGITS[value % 10];\\n                    value /= 10;\\n                    decimals--;\\n                }\\n                buffer[--i] = '.';\\n            }\\n            // output a 0 in case nothing left\\n            if (value == 0) {\\n                buffer[--i] = DEC_DIGITS[0];\\n            } else {\\n                while (value != 0) {\\n                    buffer[--i] = DEC_DIGITS[value % 10];\\n                    value /= 10;\\n                }\\n            }\\n            // transfer result from buffer\\n            bytes memory result = new bytes(78 - i);\\n            uint8 j = 0;\\n            while (i < 78) {\\n                result[j++] = buffer[i++];\\n            }\\n            return string(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given int value to string\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(int256 value) public pure returns (string memory) {\\n        return toString(value, 0);\\n    }\\n\\n    /**\\n     * Convert the given int value to string, where as many decimal digits are used as given\\n     *\\n     * @param value  The value to convert to string\\n     * @param decimals  The number of decimal places to use\\n     * @return  The resulting string\\n     */\\n    function toString(int256 value, uint8 decimals) public pure returns (string memory) {\\n        unchecked {\\n            if (value < 0) {\\n                return string.concat('-', toString(value == type(int256).min ? 1 + type(uint256).max >> 1 : uint256(-value), decimals));\\n            } else {\\n                return toString(uint256(value), decimals);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert the given bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes memory value) public pure returns (string memory) {\\n        unchecked {\\n            bytes16 HEX_DIGITS = \\\"0123456789abcdef\\\";\\n\\n            uint256 len = value.length;\\n            bytes memory buffer = new bytes(len * 2 + 2);\\n\\n            buffer[0] = '[';\\n            for ((uint256 i, uint256 j, uint256 k) = (0, 1, 2); i < len; (i, j, k) = (i + 1, j + 2, k + 2)) {\\n                uint8 val = uint8(value[i]);\\n                (buffer[j], buffer[k]) = (HEX_DIGITS[val >> 4], HEX_DIGITS[val & 0x0f]);\\n            }\\n            buffer[len * 2 + 1] = ']';\\n\\n            return string(buffer);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes1 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes2 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes3 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes4 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes5 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes6 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes7 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes8 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes9 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes10 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes11 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes12 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes13 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes14 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes15 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes16 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes17 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes18 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes19 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes20 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes21 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes22 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes23 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes24 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes25 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes26 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes27 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes28 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes29 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes30 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes31 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes32 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given address value to string (ie. \\\"<...>\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(address value) public pure returns (string memory) {\\n        unchecked {\\n            bytes16 HEX_DIGITS = \\\"0123456789abcdef\\\";\\n\\n            bytes20 nValue = bytes20(value);\\n            bytes memory buffer = new bytes(42);\\n            buffer[0] = '<';\\n            for ((uint256 i, uint256 j, uint256 k) = (0, 1, 2); i < 20; (i, j, k) = (i + 1, j + 2, k + 2)) {\\n                uint8 val = uint8(nValue[i]);\\n                (buffer[j], buffer[k]) = (HEX_DIGITS[val >> 4], HEX_DIGITS[val & 0x0f]);\\n            }\\n            buffer[41] = '>';\\n            return string(buffer);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given epoch value to ISO8601 format (ie. \\\"0000-00-00T00:00:00Z\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(Epoch value) public pure returns (string memory) {\\n        return toString(value, Quarters.wrap(0));\\n    }\\n\\n    /**\\n     * Convert the given epoch value to ISO8601 format (ie. \\\"0000-00-00T00:00:00+00:00\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @param tzOffset  The number of quarters-of-an-hour to offset\\n     * @return  The resulting string\\n     */\\n    function toString(Epoch value, Quarters tzOffset) public pure returns (string memory) {\\n        unchecked {\\n            bytes10 DEC_DIGITS = \\\"0123456789\\\";\\n\\n            DateTimeParts memory parts = dateTimeParts(value, tzOffset);\\n\\n            bytes memory buffer = \\\"0000-00-00T00:00:00\\\";\\n\\n            buffer[0] = DEC_DIGITS[(parts.year / 1000) % 10];\\n            buffer[1] = DEC_DIGITS[(parts.year / 100) % 10];\\n            buffer[2] = DEC_DIGITS[(parts.year / 10) % 10];\\n            buffer[3] = DEC_DIGITS[parts.year % 10];\\n            //\\n            buffer[5] = DEC_DIGITS[(parts.month / 10) % 10];\\n            buffer[6] = DEC_DIGITS[parts.month % 10];\\n            //\\n            buffer[8] = DEC_DIGITS[(parts.day / 10) % 10];\\n            buffer[9] = DEC_DIGITS[parts.day % 10];\\n            //\\n            buffer[11] = DEC_DIGITS[(parts.hour / 10) % 10];\\n            buffer[12] = DEC_DIGITS[parts.hour % 10];\\n            //\\n            buffer[14] = DEC_DIGITS[(parts.minute / 10) % 10];\\n            buffer[15] = DEC_DIGITS[parts.minute % 10];\\n            //\\n            buffer[17] = DEC_DIGITS[(parts.second / 10) % 10];\\n            buffer[18] = DEC_DIGITS[parts.second % 10];\\n\\n            if (Quarters.unwrap(tzOffset) == 0) {\\n                return string.concat(string(buffer), \\\"Z\\\");\\n            } else {\\n                bytes memory tzBuffer = \\\" 00:00\\\";\\n                uint8 tzh;\\n                if (Quarters.unwrap(tzOffset) < 0) {\\n                    tzBuffer[0] = \\\"-\\\";\\n                    tzh = uint8(-parts.tzHours);\\n                } else {\\n                    tzBuffer[0] = \\\"+\\\";\\n                    tzh = uint8(parts.tzHours);\\n                }\\n\\n                tzBuffer[1] = DEC_DIGITS[(tzh / 10) % 10];\\n                tzBuffer[2] = DEC_DIGITS[tzh % 10];\\n                //\\n                tzBuffer[4] = DEC_DIGITS[(parts.tzMinutes / 10) % 10];\\n                tzBuffer[5] = DEC_DIGITS[parts.tzMinutes % 10];\\n\\n                return string.concat(string(buffer), string(tzBuffer));\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd1c16aa61d6d3867b395c2dbac709c76554af080677f9d9cef549d5205c46ba5\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x61353661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106102dd5760003560e01c80637dde1e4b11610190578063b11a19e8116100ed578063c5f36d69116100a1578063e0b881ed1161007b578063e0b881ed146105ca578063e2d43d9a146105dd578063e378819b146105f057600080fd5b8063c5f36d6914610591578063da4042ca146105a4578063da65eecd146105b757600080fd5b8063b5745377116100d2578063b574537714610558578063bba526711461056b578063c134f76b1461057e57600080fd5b8063b11a19e814610532578063b332d2d91461054557600080fd5b80639dc8e87c11610144578063a322c40e11610129578063a322c40e146104f9578063ae35901a1461050c578063ae86a9531461051f57600080fd5b80639dc8e87c146104d3578063a1fa2a03146104e657600080fd5b806384b0722c1161017557806384b0722c1461049a578063869e8692146104ad57806399f0e287146104c057600080fd5b80637dde1e4b1461047457806381527d6f1461048757600080fd5b806367acea2b1161023e57806371dce7da116101f25780637500547b116101d75780637500547b1461043b5780637cd0fc941461044e5780637d85fb431461046157600080fd5b806371dce7da146104155780637214675b1461042857600080fd5b80636d4e3940116102235780636d4e3940146103dc5780636e517b3d146103ef57806371aad10d1461040257600080fd5b806367acea2b146103b65780636900a3ae146103c957600080fd5b806335e6a92e116102955780634b2dd5191161027a5780634b2dd5191461037d57806356ca623e146103905780635b1e0ff6146103a357600080fd5b806335e6a92e14610357578063415912811461036a57600080fd5b80632b50f9b1116102c65780632b50f9b11461031e5780633099b01914610331578063338dc7fd1461034457600080fd5b80630cd5903e146102e25780630f9243d61461030b575b600080fd5b6102f56102f0366004612995565b610603565b60405161030291906129fb565b60405180910390f35b6102f5610319366004612a2e565b610695565b6102f561032c366004612a8a565b610716565b6102f561033f366004612ac7565b610f13565b6102f5610352366004612b1a565b610f94565b6102f5610365366004612b46565b611235565b6102f5610378366004612b88565b6112b6565b6102f561038b366004612bca565b611337565b6102f561039e366004612be5565b611344565b6102f56103b1366004612c1b565b61151d565b6102f56103c4366004612c5d565b61159e565b6102f56103d7366004612c9f565b61161f565b6102f56103ea366004612cb8565b61162c565b6102f56103fd366004612cfa565b6116ad565b6102f5610410366004612d52565b61172e565b6102f5610423366004612e03565b61191b565b6102f5610436366004612e25565b611996565b6102f5610449366004612e67565b611a17565b6102f561045c366004612ea9565b611a98565b6102f561046f366004612eeb565b611b19565b6102f5610482366004612f2d565b611b9a565b6102f5610495366004612f6f565b611c1b565b6102f56104a8366004612fb1565b611c9c565b6102f56104bb366004612ff3565b611d1d565b6102f56104ce366004613035565b611d9e565b6102f56104e1366004613077565b611e1f565b6102f56104f43660046130b9565b611ea0565b6102f5610507366004612c9f565b611f21565b6102f561051a3660046130fb565b611f2e565b6102f561052d36600461313d565b611faf565b6102f5610540366004612c9f565b612030565b6102f561055336600461317f565b6120b1565b6102f56105663660046131c1565b612132565b6102f5610579366004613203565b6121b3565b6102f561058c366004613245565b612234565b6102f561059f366004613287565b6122b5565b6102f56105b2366004612b1a565b612336565b6102f56105c53660046132c9565b6123b4565b6102f56105d836600461330b565b612435565b6102f56105eb36600461334d565b6124b6565b6102f56105fe36600461338f565b612537565b6040805160198082528183019092526060916000919060208201818036833701905050905060005b601960ff8216101561068457838160ff166019811061064c5761064c6133d1565b1a60f81b828260ff1681518110610665576106656133d1565b60200101906001600160f81b031916908160001a90535060010161062b565b5061068e8161172e565b9392505050565b60408051600e8082528183019092526060916000919060208201818036833701905050905060005b600e60ff8216101561068457838160ff16600e81106106de576106de6133d1565b1a60f81b828260ff16815181106106f7576106f76133d1565b60200101906001600160f81b031916908160001a9053506001016106bd565b60607f3031323334353637383900000000000000000000000000000000000000000000600061074585856125b8565b60408051808201909152601381527f303030302d30302d30305430303a30303a30300000000000000000000000000060208201528151919250908390600a906103e8900406600a811061079a5761079a6133d1565b1a60f81b816000815181106107b1576107b16133d1565b60200101906001600160f81b031916908160001a90535082600a60648460000151816107df576107df6133e7565b04816107ed576107ed6133e7565b06600a81106107fe576107fe6133d1565b1a60f81b81600181518110610815576108156133d1565b60200101906001600160f81b031916908160001a90535082600a80846000015181610842576108426133e7565b0481610850576108506133e7565b06600a8110610861576108616133d1565b1a60f81b81600281518110610878576108786133d1565b60200101906001600160f81b031916908160001a90535081518390600a9006600a81106108a7576108a76133d1565b1a60f81b816003815181106108be576108be6133d1565b60200101906001600160f81b031916908160001a90535082600a808460200151816108eb576108eb6133e7565b04816108f9576108f96133e7565b06600a811061090a5761090a6133d1565b1a60f81b81600581518110610921576109216133d1565b60200101906001600160f81b031916908160001a90535082600a83602001518161094d5761094d6133e7565b06600a811061095e5761095e6133d1565b1a60f81b81600681518110610975576109756133d1565b60200101906001600160f81b031916908160001a90535082600a808460400151816109a2576109a26133e7565b04816109b0576109b06133e7565b06600a81106109c1576109c16133d1565b1a60f81b816008815181106109d8576109d86133d1565b60200101906001600160f81b031916908160001a90535082600a836040015181610a0457610a046133e7565b06600a8110610a1557610a156133d1565b1a60f81b81600981518110610a2c57610a2c6133d1565b60200101906001600160f81b031916908160001a90535082600a80846060015181610a5957610a596133e7565b0481610a6757610a676133e7565b06600a8110610a7857610a786133d1565b1a60f81b81600b81518110610a8f57610a8f6133d1565b60200101906001600160f81b031916908160001a90535082600a836060015181610abb57610abb6133e7565b06600a8110610acc57610acc6133d1565b1a60f81b81600c81518110610ae357610ae36133d1565b60200101906001600160f81b031916908160001a90535082600a80846080015181610b1057610b106133e7565b0481610b1e57610b1e6133e7565b06600a8110610b2f57610b2f6133d1565b1a60f81b81600e81518110610b4657610b466133d1565b60200101906001600160f81b031916908160001a90535082600a836080015181610b7257610b726133e7565b06600a8110610b8357610b836133d1565b1a60f81b81600f81518110610b9a57610b9a6133d1565b60200101906001600160f81b031916908160001a90535082600a808460a0015181610bc757610bc76133e7565b0481610bd557610bd56133e7565b06600a8110610be657610be66133d1565b1a60f81b81601181518110610bfd57610bfd6133d1565b60200101906001600160f81b031916908160001a90535082600a8360a0015181610c2957610c296133e7565b06600a8110610c3a57610c3a6133d1565b1a60f81b81601281518110610c5157610c516133d1565b60200101906001600160f81b031916908160001a9053508460000b600003610c9d5780604051602001610c8491906133fd565b6040516020818303038152906040529350505050610f0d565b60408051808201909152600681527f2030303a303000000000000000000000000000000000000000000000000000006020820152600086810b811315610d36577f2d0000000000000000000000000000000000000000000000000000000000000082600081518110610d1157610d116133d1565b60200101906001600160f81b031916908160001a9053505060c0830151600003610d88565b7f2b0000000000000000000000000000000000000000000000000000000000000082600081518110610d6a57610d6a6133d1565b60200101906001600160f81b031916908160001a9053505060c08301515b84600a8060ff84160460ff1681610da157610da16133e7565b0660ff16600a8110610db557610db56133d1565b1a60f81b82600181518110610dcc57610dcc6133d1565b60200101906001600160f81b031916908160001a90535084600a60ff83160660ff16600a8110610dfe57610dfe6133d1565b1a60f81b82600281518110610e1557610e156133d1565b60200101906001600160f81b031916908160001a90535084600a808660e0015181610e4257610e426133e7565b0481610e5057610e506133e7565b06600a8110610e6157610e616133d1565b1a60f81b82600481518110610e7857610e786133d1565b60200101906001600160f81b031916908160001a90535084600a8560e0015181610ea457610ea46133e7565b06600a8110610eb557610eb56133d1565b1a60f81b82600581518110610ecc57610ecc6133d1565b60200101906001600160f81b031916908160001a9053508282604051602001610ef692919061343e565b604051602081830303815290604052955050505050505b92915050565b6040805160058082528183019092526060916000919060208201818036833701905050905060005b600560ff8216101561068457838160ff1660058110610f5c57610f5c6133d1565b1a60f81b828260ff1681518110610f7557610f756133d1565b60200101906001600160f81b031916908160001a905350600101610f3b565b606060007f3031323334353637383900000000000000000000000000000000000000000000905060006040518060800160405280604e81526020016134b3604e91399050604e5b8460ff166000108015610fef5750600a8606155b1561100657600a8604955060001990940193610fdb565b60ff8516156110cc575b60ff8516156110775782600a8706600a811061102e5761102e6133d1565b1a60f81b82826001900392508260ff168151811061104e5761104e6133d1565b60200101906001600160f81b031916908160001a905350600a8604955060001990940193611010565b7f2e0000000000000000000000000000000000000000000000000000000000000082826001900392508260ff16815181106110b4576110b46133d1565b60200101906001600160f81b031916908160001a9053505b85600003611113578260001a60f81b82826001900392508260ff16815181106110f7576110f76133d1565b60200101906001600160f81b031916908160001a905350611170565b85156111705782600a8706600a811061112e5761112e6133d1565b1a60f81b82826001900392508260ff168151811061114e5761114e6133d1565b60200101906001600160f81b031916908160001a905350600a86049550611113565b600081604e0360ff1667ffffffffffffffff81111561119157611191612d3c565b6040519080825280601f01601f1916602001820160405280156111bb576020820181803683370190505b50905060005b604e8360ff16101561122a57838380600101945060ff16815181106111e8576111e86133d1565b602001015160f81c60f81b828280600101935060ff168151811061120e5761120e6133d1565b60200101906001600160f81b031916908160001a9053506111c1565b509695505050505050565b60408051601e8082528183019092526060916000919060208201818036833701905050905060005b601e60ff8216101561068457838160ff16601e811061127e5761127e6133d1565b1a60f81b828260ff1681518110611297576112976133d1565b60200101906001600160f81b031916908160001a90535060010161125d565b6040805160128082528183019092526060916000919060208201818036833701905050905060005b601260ff8216101561068457838160ff16601281106112ff576112ff6133d1565b1a60f81b828260ff1681518110611318576113186133d1565b60200101906001600160f81b031916908160001a9053506001016112de565b6060610f0d826000610716565b60408051602a80825260608281019093527f30313233343536373839616263646566000000000000000000000000000000009184841b91600091906020820181803683370190505090507f3c00000000000000000000000000000000000000000000000000000000000000816000815181106113c2576113c26133d1565b60200101906001600160f81b031916908160001a9053506000600160025b60148310156114c75760008584601481106113fd576113fd6133d1565b1a905086600482901c60ff1660108110611419576114196133d1565b1a60f81b87600f831660108110611432576114326133d1565b1a60f81b868581518110611448576114486133d1565b6020010187858151811061145e5761145e6133d1565b7fff00000000000000000000000000000000000000000000000000000000000000841660001a9101602001537fff00000000000000000000000000000000000000000000000000000000000000831660001a9053505060019093019250600291820191016113e0565b5050507f3e00000000000000000000000000000000000000000000000000000000000000816029815181106114fe576114fe6133d1565b60200101906001600160f81b031916908160001a905350949350505050565b60408051600d8082528183019092526060916000919060208201818036833701905050905060005b600d60ff8216101561068457838160ff16600d8110611566576115666133d1565b1a60f81b828260ff168151811061157f5761157f6133d1565b60200101906001600160f81b031916908160001a905350600101611545565b6040805160068082528183019092526060916000919060208201818036833701905050905060005b600660ff8216101561068457838160ff16600681106115e7576115e76133d1565b1a60f81b828260ff1681518110611600576116006133d1565b60200101906001600160f81b031916908160001a9053506001016115c6565b6060610f0d826000610f94565b6040805160038082528183019092526060916000919060208201818036833701905050905060005b600360ff8216101561068457838160ff1660038110611675576116756133d1565b1a60f81b828260ff168151811061168e5761168e6133d1565b60200101906001600160f81b031916908160001a905350600101611654565b6040805160178082528183019092526060916000919060208201818036833701905050905060005b601760ff8216101561068457838160ff16601781106116f6576116f66133d1565b1a60f81b828260ff168151811061170f5761170f6133d1565b60200101906001600160f81b031916908160001a9053506001016116d5565b80516060907f303132333435363738396162636465660000000000000000000000000000000090600060028083020167ffffffffffffffff81111561177557611775612d3c565b6040519080825280601f01601f19166020018201604052801561179f576020820181803683370190505b5090507f5b00000000000000000000000000000000000000000000000000000000000000816000815181106117d6576117d66133d1565b60200101906001600160f81b031916908160001a9053506000600160025b848310156118df576000888481518110611810576118106133d1565b016020015160f881901c9150879060fc1c60108110611831576118316133d1565b1a60f81b87600f83166010811061184a5761184a6133d1565b1a60f81b868581518110611860576118606133d1565b60200101878581518110611876576118766133d1565b7fff00000000000000000000000000000000000000000000000000000000000000841660001a9101602001537fff00000000000000000000000000000000000000000000000000000000000000831660001a9053505060019093019250600291820191016117f4565b5050507f5d000000000000000000000000000000000000000000000000000000000000008183600202600101815181106114fe576114fe6133d1565b60608161195d576040518060400160405280600581526020017f66616c7365000000000000000000000000000000000000000000000000000000815250610f0d565b505060408051808201909152600481527f7472756500000000000000000000000000000000000000000000000000000000602082015290565b6040805160118082528183019092526060916000919060208201818036833701905050905060005b601160ff8216101561068457838160ff16601181106119df576119df6133d1565b1a60f81b828260ff16815181106119f8576119f86133d1565b60200101906001600160f81b031916908160001a9053506001016119be565b6040805160098082528183019092526060916000919060208201818036833701905050905060005b600960ff8216101561068457838160ff1660098110611a6057611a606133d1565b1a60f81b828260ff1681518110611a7957611a796133d1565b60200101906001600160f81b031916908160001a905350600101611a3f565b60408051601c8082528183019092526060916000919060208201818036833701905050905060005b601c60ff8216101561068457838160ff16601c8110611ae157611ae16133d1565b1a60f81b828260ff1681518110611afa57611afa6133d1565b60200101906001600160f81b031916908160001a905350600101611ac0565b6040805160108082528183019092526060916000919060208201818036833701905050905060005b601060ff8216101561068457838160ff1660108110611b6257611b626133d1565b1a60f81b828260ff1681518110611b7b57611b7b6133d1565b60200101906001600160f81b031916908160001a905350600101611b41565b60408051601d8082528183019092526060916000919060208201818036833701905050905060005b601d60ff8216101561068457838160ff16601d8110611be357611be36133d1565b1a60f81b828260ff1681518110611bfc57611bfc6133d1565b60200101906001600160f81b031916908160001a905350600101611bc2565b60408051600c8082528183019092526060916000919060208201818036833701905050905060005b600c60ff8216101561068457838160ff16600c8110611c6457611c646133d1565b1a60f81b828260ff1681518110611c7d57611c7d6133d1565b60200101906001600160f81b031916908160001a905350600101611c43565b6040805160088082528183019092526060916000919060208201818036833701905050905060005b600860ff8216101561068457838160ff1660088110611ce557611ce56133d1565b1a60f81b828260ff1681518110611cfe57611cfe6133d1565b60200101906001600160f81b031916908160001a905350600101611cc4565b60408051601f8082528183019092526060916000919060208201818036833701905050905060005b601f60ff8216101561068457838160ff16601f8110611d6657611d666133d1565b1a60f81b828260ff1681518110611d7f57611d7f6133d1565b60200101906001600160f81b031916908160001a905350600101611d45565b60408051601b8082528183019092526060916000919060208201818036833701905050905060005b601b60ff8216101561068457838160ff16601b8110611de757611de76133d1565b1a60f81b828260ff1681518110611e0057611e006133d1565b60200101906001600160f81b031916908160001a905350600101611dc6565b6040805160028082528183019092526060916000919060208201818036833701905050905060005b600260ff8216101561068457838160ff1660028110611e6857611e686133d1565b1a60f81b828260ff1681518110611e8157611e816133d1565b60200101906001600160f81b031916908160001a905350600101611e47565b60408051600b8082528183019092526060916000919060208201818036833701905050905060005b600b60ff8216101561068457838160ff16600b8110611ee957611ee96133d1565b1a60f81b828260ff1681518110611f0257611f026133d1565b60200101906001600160f81b031916908160001a905350600101611ec8565b6060610f0d826000612336565b60408051601a8082528183019092526060916000919060208201818036833701905050905060005b601a60ff8216101561068457838160ff16601a8110611f7757611f776133d1565b1a60f81b828260ff1681518110611f9057611f906133d1565b60200101906001600160f81b031916908160001a905350600101611f56565b60408051600f8082528183019092526060916000919060208201818036833701905050905060005b600f60ff8216101561068457838160ff16600f8110611ff857611ff86133d1565b1a60f81b828260ff1681518110612011576120116133d1565b60200101906001600160f81b031916908160001a905350600101611fd7565b6040805160208082528183019092526060916000919060208201818036833701905050905060005b602060ff8216101561068457838160ff1660208110612079576120796133d1565b1a60f81b828260ff1681518110612092576120926133d1565b60200101906001600160f81b031916908160001a905350600101612058565b6040805160048082528183019092526060916000919060208201818036833701905050905060005b600460ff8216101561068457838160ff16600481106120fa576120fa6133d1565b1a60f81b828260ff1681518110612113576121136133d1565b60200101906001600160f81b031916908160001a9053506001016120d9565b6040805160158082528183019092526060916000919060208201818036833701905050905060005b601560ff8216101561068457838160ff166015811061217b5761217b6133d1565b1a60f81b828260ff1681518110612194576121946133d1565b60200101906001600160f81b031916908160001a90535060010161215a565b60408051600a8082528183019092526060916000919060208201818036833701905050905060005b600a60ff8216101561068457838160ff16600a81106121fc576121fc6133d1565b1a60f81b828260ff1681518110612215576122156133d1565b60200101906001600160f81b031916908160001a9053506001016121db565b6040805160188082528183019092526060916000919060208201818036833701905050905060005b601860ff8216101561068457838160ff166018811061227d5761227d6133d1565b1a60f81b828260ff1681518110612296576122966133d1565b60200101906001600160f81b031916908160001a90535060010161225c565b6040805160018082528183019092526060916000919060208201818036833701905050905060005b600160ff8216101561068457838160ff16600181106122fe576122fe6133d1565b1a60f81b828260ff1681518110612317576123176133d1565b60200101906001600160f81b031916908160001a9053506001016122dd565b606060008312156123a35761237d7f800000000000000000000000000000000000000000000000000000000000000084146123745783600003612377565b60005b83610f94565b60405160200161238d919061346d565b6040516020818303038152906040529050610f0d565b6123ad8383610f94565b9050610f0d565b6040805160078082528183019092526060916000919060208201818036833701905050905060005b600760ff8216101561068457838160ff16600781106123fd576123fd6133d1565b1a60f81b828260ff1681518110612416576124166133d1565b60200101906001600160f81b031916908160001a9053506001016123dc565b6040805160138082528183019092526060916000919060208201818036833701905050905060005b601360ff8216101561068457838160ff166013811061247e5761247e6133d1565b1a60f81b828260ff1681518110612497576124976133d1565b60200101906001600160f81b031916908160001a90535060010161245d565b6040805160168082528183019092526060916000919060208201818036833701905050905060005b601660ff8216101561068457838160ff16601681106124ff576124ff6133d1565b1a60f81b828260ff1681518110612518576125186133d1565b60200101906001600160f81b031916908160001a9053506001016124de565b6040805160148082528183019092526060916000919060208201818036833701905050905060005b601460ff8216101561068457838160ff1660148110612580576125806133d1565b1a60f81b828260ff1681518110612599576125996133d1565b60200101906001600160f81b031916908160001a90535060010161255f565b6126026040518061010001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000800b8152602001600081525090565b8160000b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd013156126a05760405162461bcd60e51b815260206004820152602260248201527f537472696e67733a2074696d657a6f6e65206f666673657420746f6f20736d6160448201527f6c6c00000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60388260000b13156126f45760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a2074696d657a6f6e65206f666673657420746f6f206269676044820152606401612697565b61273e6040518061010001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000800b8152602001600081525090565b60008360000b6103840290506000808212156127e4578564ffffffffff168260000311156127d45760405162461bcd60e51b815260206004820152603160248201527f537472696e67733a2065706f63682074696d6520746f6f20736d616c6c20666f60448201527f722074696d657a6f6e65206f66667365740000000000000000000000000000006064820152608401612697565b5064ffffffffff851681016127f0565b5064ffffffffff851681015b643afff46baf8111156128455760405162461bcd60e51b815260206004820152601b60248201527f537472696e67733a2065706f63682074696d6520746f6f2062696700000000006044820152606401612697565b620afa6c62015180820401600062023ab18204905062023ab181028203600061016d62023ab083046105b484048403618eac850401030490506064810461016d82026004830401038203600060996002600584020104905080600a14806128ac575080600b145b6128b75760006128ba565b60015b60ff1661019086028401018952600a81106128d857600981036128dd565b806003015b60208a01526005600260998302010482036001018960400181815250505050505050506000620151808281612914576129146133e7565b069050610e1081046060850152603c610e10820681612935576129356133e7565b046080850152603c9081900660a0850152610e10808405600090810b60c087015284126129625783612967565b836000035b81612974576129746133e7565b0681612982576129826133e7565b0460ff1660e08401525090949350505050565b6000602082840312156129a757600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffffff000000000000008116811461068e57600080fd5b60005b838110156129f25781810151838201526020016129da565b50506000910152565b6020815260008251806020840152612a1a8160408501602087016129d7565b601f01601f19169190910160400192915050565b600060208284031215612a4057600080fd5b81357fffffffffffffffffffffffffffff0000000000000000000000000000000000008116811461068e57600080fd5b803564ffffffffff81168114612a8557600080fd5b919050565b60008060408385031215612a9d57600080fd5b612aa683612a70565b915060208301358060000b8114612abc57600080fd5b809150509250929050565b600060208284031215612ad957600080fd5b81357fffffffffff0000000000000000000000000000000000000000000000000000008116811461068e57600080fd5b803560ff81168114612a8557600080fd5b60008060408385031215612b2d57600080fd5b82359150612b3d60208401612b09565b90509250929050565b600060208284031215612b5857600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00008116811461068e57600080fd5b600060208284031215612b9a57600080fd5b81357fffffffffffffffffffffffffffffffffffff00000000000000000000000000008116811461068e57600080fd5b600060208284031215612bdc57600080fd5b61068e82612a70565b600060208284031215612bf757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461068e57600080fd5b600060208284031215612c2d57600080fd5b81357fffffffffffffffffffffffffff000000000000000000000000000000000000008116811461068e57600080fd5b600060208284031215612c6f57600080fd5b81357fffffffffffff00000000000000000000000000000000000000000000000000008116811461068e57600080fd5b600060208284031215612cb157600080fd5b5035919050565b600060208284031215612cca57600080fd5b81357fffffff00000000000000000000000000000000000000000000000000000000008116811461068e57600080fd5b600060208284031215612d0c57600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000008116811461068e57600080fd5b634e487b7160e01b600052604160045260246000fd5b600060208284031215612d6457600080fd5b813567ffffffffffffffff80821115612d7c57600080fd5b818401915084601f830112612d9057600080fd5b813581811115612da257612da2612d3c565b604051601f8201601f19908116603f01168101908382118183101715612dca57612dca612d3c565b81604052828152876020848701011115612de357600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208284031215612e1557600080fd5b8135801515811461068e57600080fd5b600060208284031215612e3757600080fd5b81357fffffffffffffffffffffffffffffffffff0000000000000000000000000000008116811461068e57600080fd5b600060208284031215612e7957600080fd5b81357fffffffffffffffffff00000000000000000000000000000000000000000000008116811461068e57600080fd5b600060208284031215612ebb57600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000008116811461068e57600080fd5b600060208284031215612efd57600080fd5b81357fffffffffffffffffffffffffffffffff000000000000000000000000000000008116811461068e57600080fd5b600060208284031215612f3f57600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000008116811461068e57600080fd5b600060208284031215612f8157600080fd5b81357fffffffffffffffffffffffff00000000000000000000000000000000000000008116811461068e57600080fd5b600060208284031215612fc357600080fd5b81357fffffffffffffffff0000000000000000000000000000000000000000000000008116811461068e57600080fd5b60006020828403121561300557600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008116811461068e57600080fd5b60006020828403121561304757600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000008116811461068e57600080fd5b60006020828403121561308957600080fd5b81357fffff0000000000000000000000000000000000000000000000000000000000008116811461068e57600080fd5b6000602082840312156130cb57600080fd5b81357fffffffffffffffffffffff0000000000000000000000000000000000000000008116811461068e57600080fd5b60006020828403121561310d57600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000008116811461068e57600080fd5b60006020828403121561314f57600080fd5b81357fffffffffffffffffffffffffffffff00000000000000000000000000000000008116811461068e57600080fd5b60006020828403121561319157600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461068e57600080fd5b6000602082840312156131d357600080fd5b81357fffffffffffffffffffffffffffffffffffffffffff00000000000000000000008116811461068e57600080fd5b60006020828403121561321557600080fd5b81357fffffffffffffffffffff000000000000000000000000000000000000000000008116811461068e57600080fd5b60006020828403121561325757600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008116811461068e57600080fd5b60006020828403121561329957600080fd5b81357fff000000000000000000000000000000000000000000000000000000000000008116811461068e57600080fd5b6000602082840312156132db57600080fd5b81357fffffffffffffff000000000000000000000000000000000000000000000000008116811461068e57600080fd5b60006020828403121561331d57600080fd5b81357fffffffffffffffffffffffffffffffffffffff000000000000000000000000008116811461068e57600080fd5b60006020828403121561335f57600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffff000000000000000000008116811461068e57600080fd5b6000602082840312156133a157600080fd5b81357fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008116811461068e57600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6000825161340f8184602087016129d7565b7f5a00000000000000000000000000000000000000000000000000000000000000920191825250600101919050565b600083516134508184602088016129d7565b8351908301906134648183602088016129d7565b01949350505050565b7f2d000000000000000000000000000000000000000000000000000000000000008152600082516134a58160018501602087016129d7565b919091016001019291505056fe30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030302ea2646970667358221220902c3ebd3a521eb3bd4f0c38b12de01860ba53093bb090dc053e3fd35c58a58964736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "toString(address)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bool)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes1)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes10)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes11)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes12)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes13)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes14)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes15)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes16)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes17)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes18)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes19)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes2)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes20)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes21)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes22)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes23)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes24)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes25)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes26)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes27)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes28)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes29)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes3)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes30)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes31)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes32)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes4)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes5)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes6)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes7)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes8)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes9)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(int256)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(int256,uint8)": {
        "params": {
          "decimals": "The number of decimal places to use",
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(uint256)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(uint256,uint8)": {
        "params": {
          "decimals": "The number of decimal places to use",
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(uint40)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(uint40,int8)": {
        "params": {
          "tzOffset": "The number of quarters-of-an-hour to offset",
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "toString(address)": {
        "notice": "Convert the given address value to string (ie. \"<...>\")"
      },
      "toString(bool)": {
        "notice": "Convert the given boolean value to string (ie. \"true\" / \"false\")"
      },
      "toString(bytes)": {
        "notice": "Convert the given bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes1)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes10)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes11)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes12)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes13)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes14)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes15)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes16)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes17)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes18)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes19)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes2)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes20)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes21)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes22)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes23)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes24)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes25)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes26)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes27)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes28)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes29)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes3)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes30)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes31)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes32)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes4)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes5)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes6)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes7)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes8)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes9)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(int256)": {
        "notice": "Convert the given int value to string"
      },
      "toString(int256,uint8)": {
        "notice": "Convert the given int value to string, where as many decimal digits are used as given"
      },
      "toString(uint256)": {
        "notice": "Convert the given uint value to string"
      },
      "toString(uint256,uint8)": {
        "notice": "Convert the given uint value to string, where as many decimal digits are used as given"
      },
      "toString(uint40)": {
        "notice": "Convert the given epoch value to ISO8601 format (ie. \"0000-00-00T00:00:00Z\")"
      },
      "toString(uint40,int8)": {
        "notice": "Convert the given epoch value to ISO8601 format (ie. \"0000-00-00T00:00:00+00:00\")"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
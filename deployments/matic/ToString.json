{
  "address": "0x1b6286EBdFeba70A8579E987A46Ee00cC7370572",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "EpochTimeTooBig",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "Epoch",
          "name": "epoch",
          "type": "uint40"
        },
        {
          "internalType": "Quarters",
          "name": "tzOffset",
          "type": "int8"
        }
      ],
      "name": "EpochTimeTooSmallForTimezoneOffset",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "Quarters",
          "name": "tzOffset",
          "type": "int8"
        }
      ],
      "name": "TimezoneOffsetTooBig",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "Quarters",
          "name": "tzOffset",
          "type": "int8"
        }
      ],
      "name": "TimezoneOffsetTooSmall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes25",
          "name": "value",
          "type": "bytes25"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes14",
          "name": "value",
          "type": "bytes14"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Epoch",
          "name": "value",
          "type": "uint40"
        },
        {
          "internalType": "Quarters",
          "name": "tzOffset",
          "type": "int8"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes5",
          "name": "value",
          "type": "bytes5"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes30",
          "name": "value",
          "type": "bytes30"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes18",
          "name": "value",
          "type": "bytes18"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Epoch",
          "name": "value",
          "type": "uint40"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes13",
          "name": "value",
          "type": "bytes13"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes6",
          "name": "value",
          "type": "bytes6"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes3",
          "name": "value",
          "type": "bytes3"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes23",
          "name": "value",
          "type": "bytes23"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "value",
          "type": "bytes"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes17",
          "name": "value",
          "type": "bytes17"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes9",
          "name": "value",
          "type": "bytes9"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes28",
          "name": "value",
          "type": "bytes28"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "value",
          "type": "bytes16"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "value",
          "type": "bytes29"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes12",
          "name": "value",
          "type": "bytes12"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes8",
          "name": "value",
          "type": "bytes8"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes31",
          "name": "value",
          "type": "bytes31"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes27",
          "name": "value",
          "type": "bytes27"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes2",
          "name": "value",
          "type": "bytes2"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes11",
          "name": "value",
          "type": "bytes11"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes26",
          "name": "value",
          "type": "bytes26"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes15",
          "name": "value",
          "type": "bytes15"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "value",
          "type": "bytes32"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "value",
          "type": "bytes4"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes21",
          "name": "value",
          "type": "bytes21"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes10",
          "name": "value",
          "type": "bytes10"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes24",
          "name": "value",
          "type": "bytes24"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes1",
          "name": "value",
          "type": "bytes1"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes7",
          "name": "value",
          "type": "bytes7"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes19",
          "name": "value",
          "type": "bytes19"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes22",
          "name": "value",
          "type": "bytes22"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes20",
          "name": "value",
          "type": "bytes20"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xf320c8f4a1dfae052cb4181da2ade45c4060fdf86f22c73ced0766cab1335c3e",
  "receipt": {
    "to": null,
    "from": "0x4BADCf0DCeaAD060f86D9b34c9E118c8319945AE",
    "contractAddress": "0x1b6286EBdFeba70A8579E987A46Ee00cC7370572",
    "transactionIndex": 28,
    "gasUsed": "2967983",
    "logsBloom": "0x
    "blockHash": "0xaba630cae32ac5120db706930772d5eda117609b2d3b50b60b6ac479d6aaa390",
    "transactionHash": "0xf320c8f4a1dfae052cb4181da2ade45c4060fdf86f22c73ced0766cab1335c3e",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 34745883,
        "transactionHash": "0xf320c8f4a1dfae052cb4181da2ade45c4060fdf86f22c73ced0766cab1335c3e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004badcf0dceaad060f86d9b34c9e118c8319945ae",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000017e627d6654df41000000000000000000000000000000000000000000000000d7725be58932975000000000000000000000000000000000000000000000196e078518855f4530d2000000000000000000000000000000000000000000000000d5f3f96822ddb80f00000000000000000000000000000000000000000000196e09037b02c59a1013",
        "logIndex": 110,
        "blockHash": "0xaba630cae32ac5120db706930772d5eda117609b2d3b50b60b6ac479d6aaa390"
      }
    ],
    "blockNumber": 34745883,
    "cumulativeGasUsed": "7401045",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "ca5ca7361487a7be35eac94f891f63cb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"EpochTimeTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"Epoch\",\"name\":\"epoch\",\"type\":\"uint40\"},{\"internalType\":\"Quarters\",\"name\":\"tzOffset\",\"type\":\"int8\"}],\"name\":\"EpochTimeTooSmallForTimezoneOffset\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"Quarters\",\"name\":\"tzOffset\",\"type\":\"int8\"}],\"name\":\"TimezoneOffsetTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"Quarters\",\"name\":\"tzOffset\",\"type\":\"int8\"}],\"name\":\"TimezoneOffsetTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes25\",\"name\":\"value\",\"type\":\"bytes25\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes14\",\"name\":\"value\",\"type\":\"bytes14\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Epoch\",\"name\":\"value\",\"type\":\"uint40\"},{\"internalType\":\"Quarters\",\"name\":\"tzOffset\",\"type\":\"int8\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes5\",\"name\":\"value\",\"type\":\"bytes5\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes30\",\"name\":\"value\",\"type\":\"bytes30\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes18\",\"name\":\"value\",\"type\":\"bytes18\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Epoch\",\"name\":\"value\",\"type\":\"uint40\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes13\",\"name\":\"value\",\"type\":\"bytes13\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes6\",\"name\":\"value\",\"type\":\"bytes6\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes3\",\"name\":\"value\",\"type\":\"bytes3\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes23\",\"name\":\"value\",\"type\":\"bytes23\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes17\",\"name\":\"value\",\"type\":\"bytes17\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes9\",\"name\":\"value\",\"type\":\"bytes9\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes28\",\"name\":\"value\",\"type\":\"bytes28\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"value\",\"type\":\"bytes16\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"value\",\"type\":\"bytes29\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes12\",\"name\":\"value\",\"type\":\"bytes12\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes8\",\"name\":\"value\",\"type\":\"bytes8\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes31\",\"name\":\"value\",\"type\":\"bytes31\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes27\",\"name\":\"value\",\"type\":\"bytes27\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes2\",\"name\":\"value\",\"type\":\"bytes2\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes11\",\"name\":\"value\",\"type\":\"bytes11\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes26\",\"name\":\"value\",\"type\":\"bytes26\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes15\",\"name\":\"value\",\"type\":\"bytes15\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"value\",\"type\":\"bytes4\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes21\",\"name\":\"value\",\"type\":\"bytes21\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes10\",\"name\":\"value\",\"type\":\"bytes10\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes24\",\"name\":\"value\",\"type\":\"bytes24\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"value\",\"type\":\"bytes1\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes7\",\"name\":\"value\",\"type\":\"bytes7\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes19\",\"name\":\"value\",\"type\":\"bytes19\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes22\",\"name\":\"value\",\"type\":\"bytes22\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"value\",\"type\":\"bytes20\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"EpochTimeTooBig(uint256)\":[{\"params\":{\"epoch\":\"The offending epoch value\"}}],\"EpochTimeTooSmallForTimezoneOffset(uint40,int8)\":[{\"params\":{\"epoch\":\"The offending epoch value\",\"tzOffset\":\"The offending timezone offset\"}}],\"TimezoneOffsetTooBig(int8)\":[{\"params\":{\"tzOffset\":\"The offending timezone offset\"}}],\"TimezoneOffsetTooSmall(int8)\":[{\"params\":{\"tzOffset\":\"The offending timezone offset\"}}]},\"kind\":\"dev\",\"methods\":{\"toString(address)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bool)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes1)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes10)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes11)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes12)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes13)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes14)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes15)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes16)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes17)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes18)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes19)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes2)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes20)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes21)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes22)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes23)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes24)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes25)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes26)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes27)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes28)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes29)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes3)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes30)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes31)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes32)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes4)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes5)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes6)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes7)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes8)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(bytes9)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(int256)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(int256,uint8)\":{\"params\":{\"decimals\":\"The number of decimal places to use\",\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(uint256)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(uint256,uint8)\":{\"params\":{\"decimals\":\"The number of decimal places to use\",\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(uint40)\":{\"params\":{\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}},\"toString(uint40,int8)\":{\"params\":{\"tzOffset\":\"The number of quarters-of-an-hour to offset\",\"value\":\"The value to convert to string\"},\"returns\":{\"_0\":\"The resulting string\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"EpochTimeTooBig(uint256)\":[{\"notice\":\"Raised upon finding an epoch value that will not fit in 4 characters\"}],\"EpochTimeTooSmallForTimezoneOffset(uint40,int8)\":[{\"notice\":\"Raised upon finding an epoch value below the absolute value of the given timezone offset\"}],\"TimezoneOffsetTooBig(int8)\":[{\"notice\":\"Raised upon finding a timezone offset greater than 56\"}],\"TimezoneOffsetTooSmall(int8)\":[{\"notice\":\"Raised upon finding a timezone offset smaller than -48\"}]},\"kind\":\"user\",\"methods\":{\"toString(address)\":{\"notice\":\"Convert the given address value to string (ie. \\\"<...>\\\")\"},\"toString(bool)\":{\"notice\":\"Convert the given boolean value to string (ie. \\\"true\\\" / \\\"false\\\")\"},\"toString(bytes)\":{\"notice\":\"Convert the given bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes1)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes10)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes11)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes12)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes13)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes14)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes15)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes16)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes17)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes18)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes19)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes2)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes20)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes21)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes22)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes23)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes24)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes25)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes26)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes27)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes28)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes29)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes3)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes30)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes31)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes32)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes4)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes5)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes6)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes7)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes8)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(bytes9)\":{\"notice\":\"Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\"},\"toString(int256)\":{\"notice\":\"Convert the given int value to string\"},\"toString(int256,uint8)\":{\"notice\":\"Convert the given int value to string, where as many decimal digits are used as given\"},\"toString(uint256)\":{\"notice\":\"Convert the given uint value to string\"},\"toString(uint256,uint8)\":{\"notice\":\"Convert the given uint value to string, where as many decimal digits are used as given\"},\"toString(uint40)\":{\"notice\":\"Convert the given epoch value to ISO8601 format (ie. \\\"0000-00-00T00:00:00Z\\\")\"},\"toString(uint40,int8)\":{\"notice\":\"Convert the given epoch value to ISO8601 format (ie. \\\"0000-00-00T00:00:00+00:00\\\")\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@lacrypta/gateway/contracts/ToString.sol\":\"ToString\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@lacrypta/gateway/contracts/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\n// Type used for UNIX epoch quantities\\ntype Epoch is uint40;\\n\\n// Type used to represent \\\"quarters-of-an-hour\\\" (used for timezone offset specification)\\ntype Quarters is int8;\\n\\n/**\\n * Set of parts of a date/time value encoded by a given epoch\\n *\\n * @custom:member year  The year the given epoch encodes\\n * @custom:member month  The month the given epoch encodes\\n * @custom:member day  The day the given epoch encodes\\n * @custom:member hour  The hour the given epoch encodes\\n * @custom:member minute  The minute the given epoch encodes\\n * @custom:member second  The second the given epoch encodes\\n * @custom:member tzHours  The timezone offset hours\\n * @custom:member tzMinutes  The timezone offset minutes (always multiple of 15)\\n * @custom:member epoch  Calculated epoch value, taking timezoneOffset into account\\n */\\nstruct DateTimeParts {\\n    uint256 year;\\n    uint256 month;\\n    uint256 day;\\n    uint256 hour;\\n    uint256 minute;\\n    uint256 second;\\n    int8 tzHours;\\n    uint256 tzMinutes;\\n    uint256 epoch;\\n}\\n\\n/**\\n * Raised upon finding a timezone offset smaller than -48\\n *\\n * @param tzOffset  The offending timezone offset\\n */\\nerror TimezoneOffsetTooSmall(Quarters tzOffset);\\n\\n/**\\n * Raised upon finding a timezone offset greater than 56\\n *\\n * @param tzOffset  The offending timezone offset\\n */\\nerror TimezoneOffsetTooBig(Quarters tzOffset);\\n\\n/**\\n * Raised upon finding an epoch value below the absolute value of the given timezone offset\\n *\\n * @param epoch  The offending epoch value\\n * @param tzOffset  The offending timezone offset\\n */\\nerror EpochTimeTooSmallForTimezoneOffset(Epoch epoch, Quarters tzOffset);\\n\\n/**\\n * Extract the date/time components from the given epoch value\\n *\\n * @param value  The value to extract components from\\n * @return dateTimeParts  The DateTimeParts the given epoch encodes\\n */\\nfunction dateTimeParts(Epoch value) pure returns (DateTimeParts memory) {\\n    return dateTimeParts(value, Quarters.wrap(0));\\n}\\n\\n/**\\n * Extract the date/time components from the given epoch value and timezone offset\\n *\\n * Mostly taken from: https://howardhinnant.github.io/date_algorithms.html#civil_from_days\\n *\\n * @param value  The value to extract components from\\n * @param tzOffset  The number of quarters-of-an-hour to offset\\n * @return dateTimeParts  The DateTimeParts the given epoch encodes\\n */\\nfunction dateTimeParts(Epoch value, Quarters tzOffset) pure returns (DateTimeParts memory) {\\n    unchecked {\\n        if (Quarters.unwrap(tzOffset) < -48) {\\n            revert TimezoneOffsetTooSmall(tzOffset);\\n        }\\n        if (56 < Quarters.unwrap(tzOffset)) {\\n            revert TimezoneOffsetTooBig(tzOffset);\\n        }\\n\\n        DateTimeParts memory result;\\n\\n        int256 tzOffsetInSeconds = int256(Quarters.unwrap(tzOffset)) * 900;\\n        if (tzOffsetInSeconds < 0) {\\n            if (Epoch.unwrap(value) < uint256(-tzOffsetInSeconds)) {\\n                revert EpochTimeTooSmallForTimezoneOffset(value, tzOffset);\\n            }\\n            result.epoch = Epoch.unwrap(value) - uint256(-tzOffsetInSeconds);\\n        } else {\\n            result.epoch = Epoch.unwrap(value) + uint256(tzOffsetInSeconds);\\n        }\\n\\n        {\\n            uint256 z = result.epoch / 86400 + 719468;\\n            uint256 era = z / 146097;\\n            uint256 doe = z - era * 146097;\\n            uint256 yoe = (doe - doe / 1460 + doe / 36524 - doe / 146096) / 365;\\n            uint256 doy = doe - (365 * yoe + yoe / 4 - yoe / 100);\\n            uint256 mp = (5 * doy + 2) / 153;\\n            //\\n            result.year = yoe + era * 400 + (mp == 10 || mp == 11 ? 1 : 0);\\n            result.month = mp < 10 ? mp + 3 : mp - 9;\\n            result.day = doy - (153 * mp + 2) / 5 + 1;\\n        }\\n\\n        {\\n            uint256 w = result.epoch % 86400;\\n            //\\n            result.hour = w / 3600;\\n            result.minute = (w % 3600) / 60;\\n            result.second = w % 60;\\n        }\\n\\n        result.tzHours = int8(tzOffsetInSeconds / 3600);\\n        result.tzMinutes = uint8((uint256(tzOffsetInSeconds < 0 ? -tzOffsetInSeconds : tzOffsetInSeconds) % 3600) / 60);\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xe963e74e9999e7f94dc86183e829794475163834bee562c69e2660f859242d76\",\"license\":\"AGPL-3.0-or-later\"},\"@lacrypta/gateway/contracts/ToString.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport {DateTimeParts, Epoch, Quarters, dateTimeParts} from \\\"./DateTime.sol\\\";\\n\\nlibrary ToString {\\n    /**\\n     * Convert the given boolean value to string (ie. \\\"true\\\" / \\\"false\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bool value) public pure returns (string memory) {\\n        return value ? \\\"true\\\" : \\\"false\\\";\\n    }\\n\\n    /**\\n     * Convert the given uint value to string\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(uint256 value) public pure returns (string memory) {\\n        return toString(value, 0);\\n    }\\n\\n    /**\\n     * Convert the given uint value to string, where as many decimal digits are used as given\\n     *\\n     * @param value  The value to convert to string\\n     * @param decimals  The number of decimal places to use\\n     * @return  The resulting string\\n     */\\n    function toString(uint256 value, uint8 decimals) public pure returns (string memory) {\\n        unchecked {\\n            bytes10 DEC_DIGITS = \\\"0123456789\\\";\\n\\n            bytes memory buffer = \\\"00000000000000000000000000000000000000000000000000000000000000000000000000000.\\\";  // buffer.length = 78\\n            uint8 i = 78;\\n\\n            // remove trailing 0s\\n            while ((0 < decimals) && (value % 10 == 0)) {\\n                value /= 10;\\n                decimals--;\\n            }\\n            // if there are remaining decimals to write, do so\\n            if (0 < decimals) {\\n                while (0 < decimals) {\\n                    buffer[--i] = DEC_DIGITS[value % 10];\\n                    value /= 10;\\n                    decimals--;\\n                }\\n                buffer[--i] = \\\".\\\";\\n            }\\n            // output a 0 in case nothing left\\n            if (value == 0) {\\n                buffer[--i] = DEC_DIGITS[0];\\n            } else {\\n                while (value != 0) {\\n                    buffer[--i] = DEC_DIGITS[value % 10];\\n                    value /= 10;\\n                }\\n            }\\n            // transfer result from buffer\\n            bytes memory result = new bytes(78 - i);\\n            uint8 j = 0;\\n            while (i < 78) {\\n                result[j++] = buffer[i++];\\n            }\\n            return string(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given int value to string\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(int256 value) public pure returns (string memory) {\\n        return toString(value, 0);\\n    }\\n\\n    /**\\n     * Convert the given int value to string, where as many decimal digits are used as given\\n     *\\n     * @param value  The value to convert to string\\n     * @param decimals  The number of decimal places to use\\n     * @return  The resulting string\\n     */\\n    function toString(int256 value, uint8 decimals) public pure returns (string memory) {\\n        unchecked {\\n            if (value < 0) {\\n                return string.concat(\\\"-\\\", toString(value == type(int256).min ? 1 + type(uint256).max >> 1 : uint256(-value), decimals));\\n            } else {\\n                return toString(uint256(value), decimals);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert the given bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes memory value) public pure returns (string memory) {\\n        unchecked {\\n            bytes16 HEX_DIGITS = \\\"0123456789abcdef\\\";\\n\\n            uint256 len = value.length;\\n            bytes memory buffer = new bytes(len * 2 + 2);\\n\\n            buffer[0] = \\\"[\\\";\\n            for ((uint256 i, uint256 j, uint256 k) = (0, 1, 2); i < len; (i, j, k) = (i + 1, j + 2, k + 2)) {\\n                uint8 val = uint8(value[i]);\\n                (buffer[j], buffer[k]) = (HEX_DIGITS[val >> 4], HEX_DIGITS[val & 0x0f]);\\n            }\\n            buffer[len * 2 + 1] = \\\"]\\\";\\n\\n            return string(buffer);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes1 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes2 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes3 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes4 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes5 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes6 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes7 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes8 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes9 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes10 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes11 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes12 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes13 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes14 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes15 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes16 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes17 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes18 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes19 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes20 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes21 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes22 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes23 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes24 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes25 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes26 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes27 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes28 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes29 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes30 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes31 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes32 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given address value to string (ie. \\\"<...>\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(address value) public pure returns (string memory) {\\n        unchecked {\\n            bytes16 HEX_DIGITS = \\\"0123456789abcdef\\\";\\n\\n            bytes20 nValue = bytes20(value);\\n            bytes memory buffer = new bytes(42);\\n            buffer[0] = \\\"<\\\";\\n            for ((uint256 i, uint256 j, uint256 k) = (0, 1, 2); i < 20; (i, j, k) = (i + 1, j + 2, k + 2)) {\\n                uint8 val = uint8(nValue[i]);\\n                (buffer[j], buffer[k]) = (HEX_DIGITS[val >> 4], HEX_DIGITS[val & 0x0f]);\\n            }\\n            buffer[41] = \\\">\\\";\\n            return string(buffer);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given epoch value to ISO8601 format (ie. \\\"0000-00-00T00:00:00Z\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(Epoch value) public pure returns (string memory) {\\n        return toString(value, Quarters.wrap(0));\\n    }\\n\\n    /**\\n     * Raised upon finding an epoch value that will not fit in 4 characters\\n     *\\n     * @param epoch  The offending epoch value\\n     */\\n    error EpochTimeTooBig(uint256 epoch);\\n\\n    /**\\n     * Convert the given epoch value to ISO8601 format (ie. \\\"0000-00-00T00:00:00+00:00\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @param tzOffset  The number of quarters-of-an-hour to offset\\n     * @return  The resulting string\\n     */\\n    function toString(Epoch value, Quarters tzOffset) public pure returns (string memory) {\\n        unchecked {\\n            bytes10 DEC_DIGITS = \\\"0123456789\\\";\\n\\n            DateTimeParts memory parts = dateTimeParts(value, tzOffset);\\n            if (253402311599 < parts.epoch) {\\n                revert EpochTimeTooBig(parts.epoch);\\n            }\\n\\n            bytes memory buffer = \\\"0000-00-00T00:00:00\\\";\\n\\n            buffer[0] = DEC_DIGITS[(parts.year / 1000) % 10];\\n            buffer[1] = DEC_DIGITS[(parts.year / 100) % 10];\\n            buffer[2] = DEC_DIGITS[(parts.year / 10) % 10];\\n            buffer[3] = DEC_DIGITS[parts.year % 10];\\n            //\\n            buffer[5] = DEC_DIGITS[(parts.month / 10) % 10];\\n            buffer[6] = DEC_DIGITS[parts.month % 10];\\n            //\\n            buffer[8] = DEC_DIGITS[(parts.day / 10) % 10];\\n            buffer[9] = DEC_DIGITS[parts.day % 10];\\n            //\\n            buffer[11] = DEC_DIGITS[(parts.hour / 10) % 10];\\n            buffer[12] = DEC_DIGITS[parts.hour % 10];\\n            //\\n            buffer[14] = DEC_DIGITS[(parts.minute / 10) % 10];\\n            buffer[15] = DEC_DIGITS[parts.minute % 10];\\n            //\\n            buffer[17] = DEC_DIGITS[(parts.second / 10) % 10];\\n            buffer[18] = DEC_DIGITS[parts.second % 10];\\n\\n            if (Quarters.unwrap(tzOffset) == 0) {\\n                return string.concat(string(buffer), \\\"Z\\\");\\n            } else {\\n                bytes memory tzBuffer = \\\" 00:00\\\";\\n                uint8 tzh;\\n                if (Quarters.unwrap(tzOffset) < 0) {\\n                    tzBuffer[0] = \\\"-\\\";\\n                    tzh = uint8(-parts.tzHours);\\n                } else {\\n                    tzBuffer[0] = \\\"+\\\";\\n                    tzh = uint8(parts.tzHours);\\n                }\\n\\n                tzBuffer[1] = DEC_DIGITS[(tzh / 10) % 10];\\n                tzBuffer[2] = DEC_DIGITS[tzh % 10];\\n                //\\n                tzBuffer[4] = DEC_DIGITS[(parts.tzMinutes / 10) % 10];\\n                tzBuffer[5] = DEC_DIGITS[parts.tzMinutes % 10];\\n\\n                return string.concat(string(buffer), string(tzBuffer));\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x25f6db398305b375382a88c22fc7a2ce49eec0580c4e8379efeb4f335c27dda4\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6134fe61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106102dd5760003560e01c80637dde1e4b11610190578063b11a19e8116100ed578063c5f36d69116100a1578063e0b881ed1161007b578063e0b881ed146105ca578063e2d43d9a146105dd578063e378819b146105f057600080fd5b8063c5f36d6914610591578063da4042ca146105a4578063da65eecd146105b757600080fd5b8063b5745377116100d2578063b574537714610558578063bba526711461056b578063c134f76b1461057e57600080fd5b8063b11a19e814610532578063b332d2d91461054557600080fd5b80639dc8e87c11610144578063a322c40e11610129578063a322c40e146104f9578063ae35901a1461050c578063ae86a9531461051f57600080fd5b80639dc8e87c146104d3578063a1fa2a03146104e657600080fd5b806384b0722c1161017557806384b0722c1461049a578063869e8692146104ad57806399f0e287146104c057600080fd5b80637dde1e4b1461047457806381527d6f1461048757600080fd5b806367acea2b1161023e57806371dce7da116101f25780637500547b116101d75780637500547b1461043b5780637cd0fc941461044e5780637d85fb431461046157600080fd5b806371dce7da146104155780637214675b1461042857600080fd5b80636d4e3940116102235780636d4e3940146103dc5780636e517b3d146103ef57806371aad10d1461040257600080fd5b806367acea2b146103b65780636900a3ae146103c957600080fd5b806335e6a92e116102955780634b2dd5191161027a5780634b2dd5191461037d57806356ca623e146103905780635b1e0ff6146103a357600080fd5b806335e6a92e14610357578063415912811461036a57600080fd5b80632b50f9b1116102c65780632b50f9b11461031e5780633099b01914610331578063338dc7fd1461034457600080fd5b80630cd5903e146102e25780630f9243d61461030b575b600080fd5b6102f56102f036600461295d565b610603565b60405161030291906129c3565b60405180910390f35b6102f56103193660046129f6565b610695565b6102f561032c366004612a52565b610716565b6102f561033f366004612a8f565b610f67565b6102f5610352366004612ae2565b610fe8565b6102f5610365366004612b0e565b611289565b6102f5610378366004612b50565b61130a565b6102f561038b366004612b92565b61138b565b6102f561039e366004612bad565b611398565b6102f56103b1366004612be3565b611571565b6102f56103c4366004612c25565b6115f2565b6102f56103d7366004612c67565b611673565b6102f56103ea366004612c80565b611680565b6102f56103fd366004612cc2565b611701565b6102f5610410366004612d1a565b611782565b6102f5610423366004612dcb565b61196f565b6102f5610436366004612ded565b6119ea565b6102f5610449366004612e2f565b611a6b565b6102f561045c366004612e71565b611aec565b6102f561046f366004612eb3565b611b6d565b6102f5610482366004612ef5565b611bee565b6102f5610495366004612f37565b611c6f565b6102f56104a8366004612f79565b611cf0565b6102f56104bb366004612fbb565b611d71565b6102f56104ce366004612ffd565b611df2565b6102f56104e136600461303f565b611e73565b6102f56104f4366004613081565b611ef4565b6102f5610507366004612c67565b611f75565b6102f561051a3660046130c3565b611f82565b6102f561052d366004613105565b612003565b6102f5610540366004612c67565b612084565b6102f5610553366004613147565b612105565b6102f5610566366004613189565b612186565b6102f56105793660046131cb565b612207565b6102f561058c36600461320d565b612288565b6102f561059f36600461324f565b612309565b6102f56105b2366004612ae2565b61238a565b6102f56105c5366004613291565b612408565b6102f56105d83660046132d3565b612489565b6102f56105eb366004613315565b61250a565b6102f56105fe366004613357565b61258b565b6040805160198082528183019092526060916000919060208201818036833701905050905060005b601960ff8216101561068457838160ff166019811061064c5761064c613399565b1a60f81b828260ff168151811061066557610665613399565b60200101906001600160f81b031916908160001a90535060010161062b565b5061068e81611782565b9392505050565b60408051600e8082528183019092526060916000919060208201818036833701905050905060005b600e60ff8216101561068457838160ff16600e81106106de576106de613399565b1a60f81b828260ff16815181106106f7576106f7613399565b60200101906001600160f81b031916908160001a9053506001016106bd565b60607f30313233343536373839000000000000000000000000000000000000000000006000610745858561260c565b9050806101000151643afff46baf101561079d578061010001516040517f031ae10400000000000000000000000000000000000000000000000000000000815260040161079491815260200190565b60405180910390fd5b60408051808201909152601381527f303030302d30302d30305430303a30303a303000000000000000000000000000602082015281518390600a906103e8900406600a81106107ee576107ee613399565b1a60f81b8160008151811061080557610805613399565b60200101906001600160f81b031916908160001a90535082600a6064846000015181610833576108336133af565b0481610841576108416133af565b06600a811061085257610852613399565b1a60f81b8160018151811061086957610869613399565b60200101906001600160f81b031916908160001a90535082600a80846000015181610896576108966133af565b04816108a4576108a46133af565b06600a81106108b5576108b5613399565b1a60f81b816002815181106108cc576108cc613399565b60200101906001600160f81b031916908160001a90535081518390600a9006600a81106108fb576108fb613399565b1a60f81b8160038151811061091257610912613399565b60200101906001600160f81b031916908160001a90535082600a8084602001518161093f5761093f6133af565b048161094d5761094d6133af565b06600a811061095e5761095e613399565b1a60f81b8160058151811061097557610975613399565b60200101906001600160f81b031916908160001a90535082600a8360200151816109a1576109a16133af565b06600a81106109b2576109b2613399565b1a60f81b816006815181106109c9576109c9613399565b60200101906001600160f81b031916908160001a90535082600a808460400151816109f6576109f66133af565b0481610a0457610a046133af565b06600a8110610a1557610a15613399565b1a60f81b81600881518110610a2c57610a2c613399565b60200101906001600160f81b031916908160001a90535082600a836040015181610a5857610a586133af565b06600a8110610a6957610a69613399565b1a60f81b81600981518110610a8057610a80613399565b60200101906001600160f81b031916908160001a90535082600a80846060015181610aad57610aad6133af565b0481610abb57610abb6133af565b06600a8110610acc57610acc613399565b1a60f81b81600b81518110610ae357610ae3613399565b60200101906001600160f81b031916908160001a90535082600a836060015181610b0f57610b0f6133af565b06600a8110610b2057610b20613399565b1a60f81b81600c81518110610b3757610b37613399565b60200101906001600160f81b031916908160001a90535082600a80846080015181610b6457610b646133af565b0481610b7257610b726133af565b06600a8110610b8357610b83613399565b1a60f81b81600e81518110610b9a57610b9a613399565b60200101906001600160f81b031916908160001a90535082600a836080015181610bc657610bc66133af565b06600a8110610bd757610bd7613399565b1a60f81b81600f81518110610bee57610bee613399565b60200101906001600160f81b031916908160001a90535082600a808460a0015181610c1b57610c1b6133af565b0481610c2957610c296133af565b06600a8110610c3a57610c3a613399565b1a60f81b81601181518110610c5157610c51613399565b60200101906001600160f81b031916908160001a90535082600a8360a0015181610c7d57610c7d6133af565b06600a8110610c8e57610c8e613399565b1a60f81b81601281518110610ca557610ca5613399565b60200101906001600160f81b031916908160001a9053508460000b600003610cf15780604051602001610cd891906133c5565b6040516020818303038152906040529350505050610f61565b60408051808201909152600681527f2030303a303000000000000000000000000000000000000000000000000000006020820152600086810b811315610d8a577f2d0000000000000000000000000000000000000000000000000000000000000082600081518110610d6557610d65613399565b60200101906001600160f81b031916908160001a9053505060c0830151600003610ddc565b7f2b0000000000000000000000000000000000000000000000000000000000000082600081518110610dbe57610dbe613399565b60200101906001600160f81b031916908160001a9053505060c08301515b84600a8060ff84160460ff1681610df557610df56133af565b0660ff16600a8110610e0957610e09613399565b1a60f81b82600181518110610e2057610e20613399565b60200101906001600160f81b031916908160001a90535084600a60ff83160660ff16600a8110610e5257610e52613399565b1a60f81b82600281518110610e6957610e69613399565b60200101906001600160f81b031916908160001a90535084600a808660e0015181610e9657610e966133af565b0481610ea457610ea46133af565b06600a8110610eb557610eb5613399565b1a60f81b82600481518110610ecc57610ecc613399565b60200101906001600160f81b031916908160001a90535084600a8560e0015181610ef857610ef86133af565b06600a8110610f0957610f09613399565b1a60f81b82600581518110610f2057610f20613399565b60200101906001600160f81b031916908160001a9053508282604051602001610f4a929190613406565b604051602081830303815290604052955050505050505b92915050565b6040805160058082528183019092526060916000919060208201818036833701905050905060005b600560ff8216101561068457838160ff1660058110610fb057610fb0613399565b1a60f81b828260ff1681518110610fc957610fc9613399565b60200101906001600160f81b031916908160001a905350600101610f8f565b606060007f3031323334353637383900000000000000000000000000000000000000000000905060006040518060800160405280604e815260200161347b604e91399050604e5b8460ff1660001080156110435750600a8606155b1561105a57600a860495506000199094019361102f565b60ff851615611120575b60ff8516156110cb5782600a8706600a811061108257611082613399565b1a60f81b82826001900392508260ff16815181106110a2576110a2613399565b60200101906001600160f81b031916908160001a905350600a8604955060001990940193611064565b7f2e0000000000000000000000000000000000000000000000000000000000000082826001900392508260ff168151811061110857611108613399565b60200101906001600160f81b031916908160001a9053505b85600003611167578260001a60f81b82826001900392508260ff168151811061114b5761114b613399565b60200101906001600160f81b031916908160001a9053506111c4565b85156111c45782600a8706600a811061118257611182613399565b1a60f81b82826001900392508260ff16815181106111a2576111a2613399565b60200101906001600160f81b031916908160001a905350600a86049550611167565b600081604e0360ff1667ffffffffffffffff8111156111e5576111e5612d04565b6040519080825280601f01601f19166020018201604052801561120f576020820181803683370190505b50905060005b604e8360ff16101561127e57838380600101945060ff168151811061123c5761123c613399565b602001015160f81c60f81b828280600101935060ff168151811061126257611262613399565b60200101906001600160f81b031916908160001a905350611215565b509695505050505050565b60408051601e8082528183019092526060916000919060208201818036833701905050905060005b601e60ff8216101561068457838160ff16601e81106112d2576112d2613399565b1a60f81b828260ff16815181106112eb576112eb613399565b60200101906001600160f81b031916908160001a9053506001016112b1565b6040805160128082528183019092526060916000919060208201818036833701905050905060005b601260ff8216101561068457838160ff166012811061135357611353613399565b1a60f81b828260ff168151811061136c5761136c613399565b60200101906001600160f81b031916908160001a905350600101611332565b6060610f61826000610716565b60408051602a80825260608281019093527f30313233343536373839616263646566000000000000000000000000000000009184841b91600091906020820181803683370190505090507f3c000000000000000000000000000000000000000000000000000000000000008160008151811061141657611416613399565b60200101906001600160f81b031916908160001a9053506000600160025b601483101561151b57600085846014811061145157611451613399565b1a905086600482901c60ff166010811061146d5761146d613399565b1a60f81b87600f83166010811061148657611486613399565b1a60f81b86858151811061149c5761149c613399565b602001018785815181106114b2576114b2613399565b7fff00000000000000000000000000000000000000000000000000000000000000841660001a9101602001537fff00000000000000000000000000000000000000000000000000000000000000831660001a905350506001909301925060029182019101611434565b5050507f3e000000000000000000000000000000000000000000000000000000000000008160298151811061155257611552613399565b60200101906001600160f81b031916908160001a905350949350505050565b60408051600d8082528183019092526060916000919060208201818036833701905050905060005b600d60ff8216101561068457838160ff16600d81106115ba576115ba613399565b1a60f81b828260ff16815181106115d3576115d3613399565b60200101906001600160f81b031916908160001a905350600101611599565b6040805160068082528183019092526060916000919060208201818036833701905050905060005b600660ff8216101561068457838160ff166006811061163b5761163b613399565b1a60f81b828260ff168151811061165457611654613399565b60200101906001600160f81b031916908160001a90535060010161161a565b6060610f61826000610fe8565b6040805160038082528183019092526060916000919060208201818036833701905050905060005b600360ff8216101561068457838160ff16600381106116c9576116c9613399565b1a60f81b828260ff16815181106116e2576116e2613399565b60200101906001600160f81b031916908160001a9053506001016116a8565b6040805160178082528183019092526060916000919060208201818036833701905050905060005b601760ff8216101561068457838160ff166017811061174a5761174a613399565b1a60f81b828260ff168151811061176357611763613399565b60200101906001600160f81b031916908160001a905350600101611729565b80516060907f303132333435363738396162636465660000000000000000000000000000000090600060028083020167ffffffffffffffff8111156117c9576117c9612d04565b6040519080825280601f01601f1916602001820160405280156117f3576020820181803683370190505b5090507f5b000000000000000000000000000000000000000000000000000000000000008160008151811061182a5761182a613399565b60200101906001600160f81b031916908160001a9053506000600160025b8483101561193357600088848151811061186457611864613399565b016020015160f881901c9150879060fc1c6010811061188557611885613399565b1a60f81b87600f83166010811061189e5761189e613399565b1a60f81b8685815181106118b4576118b4613399565b602001018785815181106118ca576118ca613399565b7fff00000000000000000000000000000000000000000000000000000000000000841660001a9101602001537fff00000000000000000000000000000000000000000000000000000000000000831660001a905350506001909301925060029182019101611848565b5050507f5d0000000000000000000000000000000000000000000000000000000000000081836002026001018151811061155257611552613399565b6060816119b1576040518060400160405280600581526020017f66616c7365000000000000000000000000000000000000000000000000000000815250610f61565b505060408051808201909152600481527f7472756500000000000000000000000000000000000000000000000000000000602082015290565b6040805160118082528183019092526060916000919060208201818036833701905050905060005b601160ff8216101561068457838160ff1660118110611a3357611a33613399565b1a60f81b828260ff1681518110611a4c57611a4c613399565b60200101906001600160f81b031916908160001a905350600101611a12565b6040805160098082528183019092526060916000919060208201818036833701905050905060005b600960ff8216101561068457838160ff1660098110611ab457611ab4613399565b1a60f81b828260ff1681518110611acd57611acd613399565b60200101906001600160f81b031916908160001a905350600101611a93565b60408051601c8082528183019092526060916000919060208201818036833701905050905060005b601c60ff8216101561068457838160ff16601c8110611b3557611b35613399565b1a60f81b828260ff1681518110611b4e57611b4e613399565b60200101906001600160f81b031916908160001a905350600101611b14565b6040805160108082528183019092526060916000919060208201818036833701905050905060005b601060ff8216101561068457838160ff1660108110611bb657611bb6613399565b1a60f81b828260ff1681518110611bcf57611bcf613399565b60200101906001600160f81b031916908160001a905350600101611b95565b60408051601d8082528183019092526060916000919060208201818036833701905050905060005b601d60ff8216101561068457838160ff16601d8110611c3757611c37613399565b1a60f81b828260ff1681518110611c5057611c50613399565b60200101906001600160f81b031916908160001a905350600101611c16565b60408051600c8082528183019092526060916000919060208201818036833701905050905060005b600c60ff8216101561068457838160ff16600c8110611cb857611cb8613399565b1a60f81b828260ff1681518110611cd157611cd1613399565b60200101906001600160f81b031916908160001a905350600101611c97565b6040805160088082528183019092526060916000919060208201818036833701905050905060005b600860ff8216101561068457838160ff1660088110611d3957611d39613399565b1a60f81b828260ff1681518110611d5257611d52613399565b60200101906001600160f81b031916908160001a905350600101611d18565b60408051601f8082528183019092526060916000919060208201818036833701905050905060005b601f60ff8216101561068457838160ff16601f8110611dba57611dba613399565b1a60f81b828260ff1681518110611dd357611dd3613399565b60200101906001600160f81b031916908160001a905350600101611d99565b60408051601b8082528183019092526060916000919060208201818036833701905050905060005b601b60ff8216101561068457838160ff16601b8110611e3b57611e3b613399565b1a60f81b828260ff1681518110611e5457611e54613399565b60200101906001600160f81b031916908160001a905350600101611e1a565b6040805160028082528183019092526060916000919060208201818036833701905050905060005b600260ff8216101561068457838160ff1660028110611ebc57611ebc613399565b1a60f81b828260ff1681518110611ed557611ed5613399565b60200101906001600160f81b031916908160001a905350600101611e9b565b60408051600b8082528183019092526060916000919060208201818036833701905050905060005b600b60ff8216101561068457838160ff16600b8110611f3d57611f3d613399565b1a60f81b828260ff1681518110611f5657611f56613399565b60200101906001600160f81b031916908160001a905350600101611f1c565b6060610f6182600061238a565b60408051601a8082528183019092526060916000919060208201818036833701905050905060005b601a60ff8216101561068457838160ff16601a8110611fcb57611fcb613399565b1a60f81b828260ff1681518110611fe457611fe4613399565b60200101906001600160f81b031916908160001a905350600101611faa565b60408051600f8082528183019092526060916000919060208201818036833701905050905060005b600f60ff8216101561068457838160ff16600f811061204c5761204c613399565b1a60f81b828260ff168151811061206557612065613399565b60200101906001600160f81b031916908160001a90535060010161202b565b6040805160208082528183019092526060916000919060208201818036833701905050905060005b602060ff8216101561068457838160ff16602081106120cd576120cd613399565b1a60f81b828260ff16815181106120e6576120e6613399565b60200101906001600160f81b031916908160001a9053506001016120ac565b6040805160048082528183019092526060916000919060208201818036833701905050905060005b600460ff8216101561068457838160ff166004811061214e5761214e613399565b1a60f81b828260ff168151811061216757612167613399565b60200101906001600160f81b031916908160001a90535060010161212d565b6040805160158082528183019092526060916000919060208201818036833701905050905060005b601560ff8216101561068457838160ff16601581106121cf576121cf613399565b1a60f81b828260ff16815181106121e8576121e8613399565b60200101906001600160f81b031916908160001a9053506001016121ae565b60408051600a8082528183019092526060916000919060208201818036833701905050905060005b600a60ff8216101561068457838160ff16600a811061225057612250613399565b1a60f81b828260ff168151811061226957612269613399565b60200101906001600160f81b031916908160001a90535060010161222f565b6040805160188082528183019092526060916000919060208201818036833701905050905060005b601860ff8216101561068457838160ff16601881106122d1576122d1613399565b1a60f81b828260ff16815181106122ea576122ea613399565b60200101906001600160f81b031916908160001a9053506001016122b0565b6040805160018082528183019092526060916000919060208201818036833701905050905060005b600160ff8216101561068457838160ff166001811061235257612352613399565b1a60f81b828260ff168151811061236b5761236b613399565b60200101906001600160f81b031916908160001a905350600101612331565b606060008312156123f7576123d17f800000000000000000000000000000000000000000000000000000000000000084146123c857836000036123cb565b60005b83610fe8565b6040516020016123e19190613435565b6040516020818303038152906040529050610f61565b6124018383610fe8565b9050610f61565b6040805160078082528183019092526060916000919060208201818036833701905050905060005b600760ff8216101561068457838160ff166007811061245157612451613399565b1a60f81b828260ff168151811061246a5761246a613399565b60200101906001600160f81b031916908160001a905350600101612430565b6040805160138082528183019092526060916000919060208201818036833701905050905060005b601360ff8216101561068457838160ff16601381106124d2576124d2613399565b1a60f81b828260ff16815181106124eb576124eb613399565b60200101906001600160f81b031916908160001a9053506001016124b1565b6040805160168082528183019092526060916000919060208201818036833701905050905060005b601660ff8216101561068457838160ff166016811061255357612553613399565b1a60f81b828260ff168151811061256c5761256c613399565b60200101906001600160f81b031916908160001a905350600101612532565b6040805160148082528183019092526060916000919060208201818036833701905050905060005b601460ff8216101561068457838160ff16601481106125d4576125d4613399565b1a60f81b828260ff16815181106125ed576125ed613399565b60200101906001600160f81b031916908160001a9053506001016125b3565b61265d6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000800b815260200160008152602001600081525090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd08260000b12156126c0576040517f527cc386000000000000000000000000000000000000000000000000000000008152600083900b6004820152602401610794565b8160000b60381215612704576040517f5da7a5e7000000000000000000000000000000000000000000000000000000008152600083900b6004820152602401610794565b6127556040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000800b815260200160008152602001600081525090565b60008360000b61038402905060008112156127d657806000038564ffffffffff1610156127c1576040517f7662186000000000000000000000000000000000000000000000000000000000815264ffffffffff86166004820152600085900b6024820152604401610794565b64ffffffffff851681016101008301526127e7565b64ffffffffff851681016101008301525b60006201518083610100015181612800576128006133af565b04620afa6c019050600062023ab1828161281c5761281c6133af565b04905062023ab181028203600061016d62023ab083046105b484048403618eac850401030490506064810461016d82026004830401038203600060996002600584020104905080600a1480612871575080600b145b61287c57600061287f565b60015b60ff1661019086028401018852600a811061289d57600981036128a2565b806003015b6020890152600560026099830201048203600101886040018181525050505050505050600062015180836101000151816128de576128de6133af565b069050610e1081046060840152603c610e108206816128ff576128ff6133af565b046080840152603c9081900660a0840152610e10808305600090810b60c0860152831261292c5782612931565b826000035b8161293e5761293e6133af565b068161294c5761294c6133af565b0460ff1660e0830152509392505050565b60006020828403121561296f57600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffffff000000000000008116811461068e57600080fd5b60005b838110156129ba5781810151838201526020016129a2565b50506000910152565b60208152600082518060208401526129e281604085016020870161299f565b601f01601f19169190910160400192915050565b600060208284031215612a0857600080fd5b81357fffffffffffffffffffffffffffff0000000000000000000000000000000000008116811461068e57600080fd5b803564ffffffffff81168114612a4d57600080fd5b919050565b60008060408385031215612a6557600080fd5b612a6e83612a38565b915060208301358060000b8114612a8457600080fd5b809150509250929050565b600060208284031215612aa157600080fd5b81357fffffffffff0000000000000000000000000000000000000000000000000000008116811461068e57600080fd5b803560ff81168114612a4d57600080fd5b60008060408385031215612af557600080fd5b82359150612b0560208401612ad1565b90509250929050565b600060208284031215612b2057600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00008116811461068e57600080fd5b600060208284031215612b6257600080fd5b81357fffffffffffffffffffffffffffffffffffff00000000000000000000000000008116811461068e57600080fd5b600060208284031215612ba457600080fd5b61068e82612a38565b600060208284031215612bbf57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461068e57600080fd5b600060208284031215612bf557600080fd5b81357fffffffffffffffffffffffffff000000000000000000000000000000000000008116811461068e57600080fd5b600060208284031215612c3757600080fd5b81357fffffffffffff00000000000000000000000000000000000000000000000000008116811461068e57600080fd5b600060208284031215612c7957600080fd5b5035919050565b600060208284031215612c9257600080fd5b81357fffffff00000000000000000000000000000000000000000000000000000000008116811461068e57600080fd5b600060208284031215612cd457600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000008116811461068e57600080fd5b634e487b7160e01b600052604160045260246000fd5b600060208284031215612d2c57600080fd5b813567ffffffffffffffff80821115612d4457600080fd5b818401915084601f830112612d5857600080fd5b813581811115612d6a57612d6a612d04565b604051601f8201601f19908116603f01168101908382118183101715612d9257612d92612d04565b81604052828152876020848701011115612dab57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208284031215612ddd57600080fd5b8135801515811461068e57600080fd5b600060208284031215612dff57600080fd5b81357fffffffffffffffffffffffffffffffffff0000000000000000000000000000008116811461068e57600080fd5b600060208284031215612e4157600080fd5b81357fffffffffffffffffff00000000000000000000000000000000000000000000008116811461068e57600080fd5b600060208284031215612e8357600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000008116811461068e57600080fd5b600060208284031215612ec557600080fd5b81357fffffffffffffffffffffffffffffffff000000000000000000000000000000008116811461068e57600080fd5b600060208284031215612f0757600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000008116811461068e57600080fd5b600060208284031215612f4957600080fd5b81357fffffffffffffffffffffffff00000000000000000000000000000000000000008116811461068e57600080fd5b600060208284031215612f8b57600080fd5b81357fffffffffffffffff0000000000000000000000000000000000000000000000008116811461068e57600080fd5b600060208284031215612fcd57600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008116811461068e57600080fd5b60006020828403121561300f57600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000008116811461068e57600080fd5b60006020828403121561305157600080fd5b81357fffff0000000000000000000000000000000000000000000000000000000000008116811461068e57600080fd5b60006020828403121561309357600080fd5b81357fffffffffffffffffffffff0000000000000000000000000000000000000000008116811461068e57600080fd5b6000602082840312156130d557600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000008116811461068e57600080fd5b60006020828403121561311757600080fd5b81357fffffffffffffffffffffffffffffff00000000000000000000000000000000008116811461068e57600080fd5b60006020828403121561315957600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461068e57600080fd5b60006020828403121561319b57600080fd5b81357fffffffffffffffffffffffffffffffffffffffffff00000000000000000000008116811461068e57600080fd5b6000602082840312156131dd57600080fd5b81357fffffffffffffffffffff000000000000000000000000000000000000000000008116811461068e57600080fd5b60006020828403121561321f57600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008116811461068e57600080fd5b60006020828403121561326157600080fd5b81357fff000000000000000000000000000000000000000000000000000000000000008116811461068e57600080fd5b6000602082840312156132a357600080fd5b81357fffffffffffffff000000000000000000000000000000000000000000000000008116811461068e57600080fd5b6000602082840312156132e557600080fd5b81357fffffffffffffffffffffffffffffffffffffff000000000000000000000000008116811461068e57600080fd5b60006020828403121561332757600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffff000000000000000000008116811461068e57600080fd5b60006020828403121561336957600080fd5b81357fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008116811461068e57600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600082516133d781846020870161299f565b7f5a00000000000000000000000000000000000000000000000000000000000000920191825250600101919050565b6000835161341881846020880161299f565b83519083019061342c81836020880161299f565b01949350505050565b7f2d0000000000000000000000000000000000000000000000000000000000000081526000825161346d81600185016020870161299f565b919091016001019291505056fe30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030302ea2646970667358221220b3bdb16e187770c6d4889d6c76fc7ca57ad0708e260d6982b7e467c463c8ddc364736f6c63430008110033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106102dd5760003560e01c80637dde1e4b11610190578063b11a19e8116100ed578063c5f36d69116100a1578063e0b881ed1161007b578063e0b881ed146105ca578063e2d43d9a146105dd578063e378819b146105f057600080fd5b8063c5f36d6914610591578063da4042ca146105a4578063da65eecd146105b757600080fd5b8063b5745377116100d2578063b574537714610558578063bba526711461056b578063c134f76b1461057e57600080fd5b8063b11a19e814610532578063b332d2d91461054557600080fd5b80639dc8e87c11610144578063a322c40e11610129578063a322c40e146104f9578063ae35901a1461050c578063ae86a9531461051f57600080fd5b80639dc8e87c146104d3578063a1fa2a03146104e657600080fd5b806384b0722c1161017557806384b0722c1461049a578063869e8692146104ad57806399f0e287146104c057600080fd5b80637dde1e4b1461047457806381527d6f1461048757600080fd5b806367acea2b1161023e57806371dce7da116101f25780637500547b116101d75780637500547b1461043b5780637cd0fc941461044e5780637d85fb431461046157600080fd5b806371dce7da146104155780637214675b1461042857600080fd5b80636d4e3940116102235780636d4e3940146103dc5780636e517b3d146103ef57806371aad10d1461040257600080fd5b806367acea2b146103b65780636900a3ae146103c957600080fd5b806335e6a92e116102955780634b2dd5191161027a5780634b2dd5191461037d57806356ca623e146103905780635b1e0ff6146103a357600080fd5b806335e6a92e14610357578063415912811461036a57600080fd5b80632b50f9b1116102c65780632b50f9b11461031e5780633099b01914610331578063338dc7fd1461034457600080fd5b80630cd5903e146102e25780630f9243d61461030b575b600080fd5b6102f56102f036600461295d565b610603565b60405161030291906129c3565b60405180910390f35b6102f56103193660046129f6565b610695565b6102f561032c366004612a52565b610716565b6102f561033f366004612a8f565b610f67565b6102f5610352366004612ae2565b610fe8565b6102f5610365366004612b0e565b611289565b6102f5610378366004612b50565b61130a565b6102f561038b366004612b92565b61138b565b6102f561039e366004612bad565b611398565b6102f56103b1366004612be3565b611571565b6102f56103c4366004612c25565b6115f2565b6102f56103d7366004612c67565b611673565b6102f56103ea366004612c80565b611680565b6102f56103fd366004612cc2565b611701565b6102f5610410366004612d1a565b611782565b6102f5610423366004612dcb565b61196f565b6102f5610436366004612ded565b6119ea565b6102f5610449366004612e2f565b611a6b565b6102f561045c366004612e71565b611aec565b6102f561046f366004612eb3565b611b6d565b6102f5610482366004612ef5565b611bee565b6102f5610495366004612f37565b611c6f565b6102f56104a8366004612f79565b611cf0565b6102f56104bb366004612fbb565b611d71565b6102f56104ce366004612ffd565b611df2565b6102f56104e136600461303f565b611e73565b6102f56104f4366004613081565b611ef4565b6102f5610507366004612c67565b611f75565b6102f561051a3660046130c3565b611f82565b6102f561052d366004613105565b612003565b6102f5610540366004612c67565b612084565b6102f5610553366004613147565b612105565b6102f5610566366004613189565b612186565b6102f56105793660046131cb565b612207565b6102f561058c36600461320d565b612288565b6102f561059f36600461324f565b612309565b6102f56105b2366004612ae2565b61238a565b6102f56105c5366004613291565b612408565b6102f56105d83660046132d3565b612489565b6102f56105eb366004613315565b61250a565b6102f56105fe366004613357565b61258b565b6040805160198082528183019092526060916000919060208201818036833701905050905060005b601960ff8216101561068457838160ff166019811061064c5761064c613399565b1a60f81b828260ff168151811061066557610665613399565b60200101906001600160f81b031916908160001a90535060010161062b565b5061068e81611782565b9392505050565b60408051600e8082528183019092526060916000919060208201818036833701905050905060005b600e60ff8216101561068457838160ff16600e81106106de576106de613399565b1a60f81b828260ff16815181106106f7576106f7613399565b60200101906001600160f81b031916908160001a9053506001016106bd565b60607f30313233343536373839000000000000000000000000000000000000000000006000610745858561260c565b9050806101000151643afff46baf101561079d578061010001516040517f031ae10400000000000000000000000000000000000000000000000000000000815260040161079491815260200190565b60405180910390fd5b60408051808201909152601381527f303030302d30302d30305430303a30303a303000000000000000000000000000602082015281518390600a906103e8900406600a81106107ee576107ee613399565b1a60f81b8160008151811061080557610805613399565b60200101906001600160f81b031916908160001a90535082600a6064846000015181610833576108336133af565b0481610841576108416133af565b06600a811061085257610852613399565b1a60f81b8160018151811061086957610869613399565b60200101906001600160f81b031916908160001a90535082600a80846000015181610896576108966133af565b04816108a4576108a46133af565b06600a81106108b5576108b5613399565b1a60f81b816002815181106108cc576108cc613399565b60200101906001600160f81b031916908160001a90535081518390600a9006600a81106108fb576108fb613399565b1a60f81b8160038151811061091257610912613399565b60200101906001600160f81b031916908160001a90535082600a8084602001518161093f5761093f6133af565b048161094d5761094d6133af565b06600a811061095e5761095e613399565b1a60f81b8160058151811061097557610975613399565b60200101906001600160f81b031916908160001a90535082600a8360200151816109a1576109a16133af565b06600a81106109b2576109b2613399565b1a60f81b816006815181106109c9576109c9613399565b60200101906001600160f81b031916908160001a90535082600a808460400151816109f6576109f66133af565b0481610a0457610a046133af565b06600a8110610a1557610a15613399565b1a60f81b81600881518110610a2c57610a2c613399565b60200101906001600160f81b031916908160001a90535082600a836040015181610a5857610a586133af565b06600a8110610a6957610a69613399565b1a60f81b81600981518110610a8057610a80613399565b60200101906001600160f81b031916908160001a90535082600a80846060015181610aad57610aad6133af565b0481610abb57610abb6133af565b06600a8110610acc57610acc613399565b1a60f81b81600b81518110610ae357610ae3613399565b60200101906001600160f81b031916908160001a90535082600a836060015181610b0f57610b0f6133af565b06600a8110610b2057610b20613399565b1a60f81b81600c81518110610b3757610b37613399565b60200101906001600160f81b031916908160001a90535082600a80846080015181610b6457610b646133af565b0481610b7257610b726133af565b06600a8110610b8357610b83613399565b1a60f81b81600e81518110610b9a57610b9a613399565b60200101906001600160f81b031916908160001a90535082600a836080015181610bc657610bc66133af565b06600a8110610bd757610bd7613399565b1a60f81b81600f81518110610bee57610bee613399565b60200101906001600160f81b031916908160001a90535082600a808460a0015181610c1b57610c1b6133af565b0481610c2957610c296133af565b06600a8110610c3a57610c3a613399565b1a60f81b81601181518110610c5157610c51613399565b60200101906001600160f81b031916908160001a90535082600a8360a0015181610c7d57610c7d6133af565b06600a8110610c8e57610c8e613399565b1a60f81b81601281518110610ca557610ca5613399565b60200101906001600160f81b031916908160001a9053508460000b600003610cf15780604051602001610cd891906133c5565b6040516020818303038152906040529350505050610f61565b60408051808201909152600681527f2030303a303000000000000000000000000000000000000000000000000000006020820152600086810b811315610d8a577f2d0000000000000000000000000000000000000000000000000000000000000082600081518110610d6557610d65613399565b60200101906001600160f81b031916908160001a9053505060c0830151600003610ddc565b7f2b0000000000000000000000000000000000000000000000000000000000000082600081518110610dbe57610dbe613399565b60200101906001600160f81b031916908160001a9053505060c08301515b84600a8060ff84160460ff1681610df557610df56133af565b0660ff16600a8110610e0957610e09613399565b1a60f81b82600181518110610e2057610e20613399565b60200101906001600160f81b031916908160001a90535084600a60ff83160660ff16600a8110610e5257610e52613399565b1a60f81b82600281518110610e6957610e69613399565b60200101906001600160f81b031916908160001a90535084600a808660e0015181610e9657610e966133af565b0481610ea457610ea46133af565b06600a8110610eb557610eb5613399565b1a60f81b82600481518110610ecc57610ecc613399565b60200101906001600160f81b031916908160001a90535084600a8560e0015181610ef857610ef86133af565b06600a8110610f0957610f09613399565b1a60f81b82600581518110610f2057610f20613399565b60200101906001600160f81b031916908160001a9053508282604051602001610f4a929190613406565b604051602081830303815290604052955050505050505b92915050565b6040805160058082528183019092526060916000919060208201818036833701905050905060005b600560ff8216101561068457838160ff1660058110610fb057610fb0613399565b1a60f81b828260ff1681518110610fc957610fc9613399565b60200101906001600160f81b031916908160001a905350600101610f8f565b606060007f3031323334353637383900000000000000000000000000000000000000000000905060006040518060800160405280604e815260200161347b604e91399050604e5b8460ff1660001080156110435750600a8606155b1561105a57600a860495506000199094019361102f565b60ff851615611120575b60ff8516156110cb5782600a8706600a811061108257611082613399565b1a60f81b82826001900392508260ff16815181106110a2576110a2613399565b60200101906001600160f81b031916908160001a905350600a8604955060001990940193611064565b7f2e0000000000000000000000000000000000000000000000000000000000000082826001900392508260ff168151811061110857611108613399565b60200101906001600160f81b031916908160001a9053505b85600003611167578260001a60f81b82826001900392508260ff168151811061114b5761114b613399565b60200101906001600160f81b031916908160001a9053506111c4565b85156111c45782600a8706600a811061118257611182613399565b1a60f81b82826001900392508260ff16815181106111a2576111a2613399565b60200101906001600160f81b031916908160001a905350600a86049550611167565b600081604e0360ff1667ffffffffffffffff8111156111e5576111e5612d04565b6040519080825280601f01601f19166020018201604052801561120f576020820181803683370190505b50905060005b604e8360ff16101561127e57838380600101945060ff168151811061123c5761123c613399565b602001015160f81c60f81b828280600101935060ff168151811061126257611262613399565b60200101906001600160f81b031916908160001a905350611215565b509695505050505050565b60408051601e8082528183019092526060916000919060208201818036833701905050905060005b601e60ff8216101561068457838160ff16601e81106112d2576112d2613399565b1a60f81b828260ff16815181106112eb576112eb613399565b60200101906001600160f81b031916908160001a9053506001016112b1565b6040805160128082528183019092526060916000919060208201818036833701905050905060005b601260ff8216101561068457838160ff166012811061135357611353613399565b1a60f81b828260ff168151811061136c5761136c613399565b60200101906001600160f81b031916908160001a905350600101611332565b6060610f61826000610716565b60408051602a80825260608281019093527f30313233343536373839616263646566000000000000000000000000000000009184841b91600091906020820181803683370190505090507f3c000000000000000000000000000000000000000000000000000000000000008160008151811061141657611416613399565b60200101906001600160f81b031916908160001a9053506000600160025b601483101561151b57600085846014811061145157611451613399565b1a905086600482901c60ff166010811061146d5761146d613399565b1a60f81b87600f83166010811061148657611486613399565b1a60f81b86858151811061149c5761149c613399565b602001018785815181106114b2576114b2613399565b7fff00000000000000000000000000000000000000000000000000000000000000841660001a9101602001537fff00000000000000000000000000000000000000000000000000000000000000831660001a905350506001909301925060029182019101611434565b5050507f3e000000000000000000000000000000000000000000000000000000000000008160298151811061155257611552613399565b60200101906001600160f81b031916908160001a905350949350505050565b60408051600d8082528183019092526060916000919060208201818036833701905050905060005b600d60ff8216101561068457838160ff16600d81106115ba576115ba613399565b1a60f81b828260ff16815181106115d3576115d3613399565b60200101906001600160f81b031916908160001a905350600101611599565b6040805160068082528183019092526060916000919060208201818036833701905050905060005b600660ff8216101561068457838160ff166006811061163b5761163b613399565b1a60f81b828260ff168151811061165457611654613399565b60200101906001600160f81b031916908160001a90535060010161161a565b6060610f61826000610fe8565b6040805160038082528183019092526060916000919060208201818036833701905050905060005b600360ff8216101561068457838160ff16600381106116c9576116c9613399565b1a60f81b828260ff16815181106116e2576116e2613399565b60200101906001600160f81b031916908160001a9053506001016116a8565b6040805160178082528183019092526060916000919060208201818036833701905050905060005b601760ff8216101561068457838160ff166017811061174a5761174a613399565b1a60f81b828260ff168151811061176357611763613399565b60200101906001600160f81b031916908160001a905350600101611729565b80516060907f303132333435363738396162636465660000000000000000000000000000000090600060028083020167ffffffffffffffff8111156117c9576117c9612d04565b6040519080825280601f01601f1916602001820160405280156117f3576020820181803683370190505b5090507f5b000000000000000000000000000000000000000000000000000000000000008160008151811061182a5761182a613399565b60200101906001600160f81b031916908160001a9053506000600160025b8483101561193357600088848151811061186457611864613399565b016020015160f881901c9150879060fc1c6010811061188557611885613399565b1a60f81b87600f83166010811061189e5761189e613399565b1a60f81b8685815181106118b4576118b4613399565b602001018785815181106118ca576118ca613399565b7fff00000000000000000000000000000000000000000000000000000000000000841660001a9101602001537fff00000000000000000000000000000000000000000000000000000000000000831660001a905350506001909301925060029182019101611848565b5050507f5d0000000000000000000000000000000000000000000000000000000000000081836002026001018151811061155257611552613399565b6060816119b1576040518060400160405280600581526020017f66616c7365000000000000000000000000000000000000000000000000000000815250610f61565b505060408051808201909152600481527f7472756500000000000000000000000000000000000000000000000000000000602082015290565b6040805160118082528183019092526060916000919060208201818036833701905050905060005b601160ff8216101561068457838160ff1660118110611a3357611a33613399565b1a60f81b828260ff1681518110611a4c57611a4c613399565b60200101906001600160f81b031916908160001a905350600101611a12565b6040805160098082528183019092526060916000919060208201818036833701905050905060005b600960ff8216101561068457838160ff1660098110611ab457611ab4613399565b1a60f81b828260ff1681518110611acd57611acd613399565b60200101906001600160f81b031916908160001a905350600101611a93565b60408051601c8082528183019092526060916000919060208201818036833701905050905060005b601c60ff8216101561068457838160ff16601c8110611b3557611b35613399565b1a60f81b828260ff1681518110611b4e57611b4e613399565b60200101906001600160f81b031916908160001a905350600101611b14565b6040805160108082528183019092526060916000919060208201818036833701905050905060005b601060ff8216101561068457838160ff1660108110611bb657611bb6613399565b1a60f81b828260ff1681518110611bcf57611bcf613399565b60200101906001600160f81b031916908160001a905350600101611b95565b60408051601d8082528183019092526060916000919060208201818036833701905050905060005b601d60ff8216101561068457838160ff16601d8110611c3757611c37613399565b1a60f81b828260ff1681518110611c5057611c50613399565b60200101906001600160f81b031916908160001a905350600101611c16565b60408051600c8082528183019092526060916000919060208201818036833701905050905060005b600c60ff8216101561068457838160ff16600c8110611cb857611cb8613399565b1a60f81b828260ff1681518110611cd157611cd1613399565b60200101906001600160f81b031916908160001a905350600101611c97565b6040805160088082528183019092526060916000919060208201818036833701905050905060005b600860ff8216101561068457838160ff1660088110611d3957611d39613399565b1a60f81b828260ff1681518110611d5257611d52613399565b60200101906001600160f81b031916908160001a905350600101611d18565b60408051601f8082528183019092526060916000919060208201818036833701905050905060005b601f60ff8216101561068457838160ff16601f8110611dba57611dba613399565b1a60f81b828260ff1681518110611dd357611dd3613399565b60200101906001600160f81b031916908160001a905350600101611d99565b60408051601b8082528183019092526060916000919060208201818036833701905050905060005b601b60ff8216101561068457838160ff16601b8110611e3b57611e3b613399565b1a60f81b828260ff1681518110611e5457611e54613399565b60200101906001600160f81b031916908160001a905350600101611e1a565b6040805160028082528183019092526060916000919060208201818036833701905050905060005b600260ff8216101561068457838160ff1660028110611ebc57611ebc613399565b1a60f81b828260ff1681518110611ed557611ed5613399565b60200101906001600160f81b031916908160001a905350600101611e9b565b60408051600b8082528183019092526060916000919060208201818036833701905050905060005b600b60ff8216101561068457838160ff16600b8110611f3d57611f3d613399565b1a60f81b828260ff1681518110611f5657611f56613399565b60200101906001600160f81b031916908160001a905350600101611f1c565b6060610f6182600061238a565b60408051601a8082528183019092526060916000919060208201818036833701905050905060005b601a60ff8216101561068457838160ff16601a8110611fcb57611fcb613399565b1a60f81b828260ff1681518110611fe457611fe4613399565b60200101906001600160f81b031916908160001a905350600101611faa565b60408051600f8082528183019092526060916000919060208201818036833701905050905060005b600f60ff8216101561068457838160ff16600f811061204c5761204c613399565b1a60f81b828260ff168151811061206557612065613399565b60200101906001600160f81b031916908160001a90535060010161202b565b6040805160208082528183019092526060916000919060208201818036833701905050905060005b602060ff8216101561068457838160ff16602081106120cd576120cd613399565b1a60f81b828260ff16815181106120e6576120e6613399565b60200101906001600160f81b031916908160001a9053506001016120ac565b6040805160048082528183019092526060916000919060208201818036833701905050905060005b600460ff8216101561068457838160ff166004811061214e5761214e613399565b1a60f81b828260ff168151811061216757612167613399565b60200101906001600160f81b031916908160001a90535060010161212d565b6040805160158082528183019092526060916000919060208201818036833701905050905060005b601560ff8216101561068457838160ff16601581106121cf576121cf613399565b1a60f81b828260ff16815181106121e8576121e8613399565b60200101906001600160f81b031916908160001a9053506001016121ae565b60408051600a8082528183019092526060916000919060208201818036833701905050905060005b600a60ff8216101561068457838160ff16600a811061225057612250613399565b1a60f81b828260ff168151811061226957612269613399565b60200101906001600160f81b031916908160001a90535060010161222f565b6040805160188082528183019092526060916000919060208201818036833701905050905060005b601860ff8216101561068457838160ff16601881106122d1576122d1613399565b1a60f81b828260ff16815181106122ea576122ea613399565b60200101906001600160f81b031916908160001a9053506001016122b0565b6040805160018082528183019092526060916000919060208201818036833701905050905060005b600160ff8216101561068457838160ff166001811061235257612352613399565b1a60f81b828260ff168151811061236b5761236b613399565b60200101906001600160f81b031916908160001a905350600101612331565b606060008312156123f7576123d17f800000000000000000000000000000000000000000000000000000000000000084146123c857836000036123cb565b60005b83610fe8565b6040516020016123e19190613435565b6040516020818303038152906040529050610f61565b6124018383610fe8565b9050610f61565b6040805160078082528183019092526060916000919060208201818036833701905050905060005b600760ff8216101561068457838160ff166007811061245157612451613399565b1a60f81b828260ff168151811061246a5761246a613399565b60200101906001600160f81b031916908160001a905350600101612430565b6040805160138082528183019092526060916000919060208201818036833701905050905060005b601360ff8216101561068457838160ff16601381106124d2576124d2613399565b1a60f81b828260ff16815181106124eb576124eb613399565b60200101906001600160f81b031916908160001a9053506001016124b1565b6040805160168082528183019092526060916000919060208201818036833701905050905060005b601660ff8216101561068457838160ff166016811061255357612553613399565b1a60f81b828260ff168151811061256c5761256c613399565b60200101906001600160f81b031916908160001a905350600101612532565b6040805160148082528183019092526060916000919060208201818036833701905050905060005b601460ff8216101561068457838160ff16601481106125d4576125d4613399565b1a60f81b828260ff16815181106125ed576125ed613399565b60200101906001600160f81b031916908160001a9053506001016125b3565b61265d6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000800b815260200160008152602001600081525090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd08260000b12156126c0576040517f527cc386000000000000000000000000000000000000000000000000000000008152600083900b6004820152602401610794565b8160000b60381215612704576040517f5da7a5e7000000000000000000000000000000000000000000000000000000008152600083900b6004820152602401610794565b6127556040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000800b815260200160008152602001600081525090565b60008360000b61038402905060008112156127d657806000038564ffffffffff1610156127c1576040517f7662186000000000000000000000000000000000000000000000000000000000815264ffffffffff86166004820152600085900b6024820152604401610794565b64ffffffffff851681016101008301526127e7565b64ffffffffff851681016101008301525b60006201518083610100015181612800576128006133af565b04620afa6c019050600062023ab1828161281c5761281c6133af565b04905062023ab181028203600061016d62023ab083046105b484048403618eac850401030490506064810461016d82026004830401038203600060996002600584020104905080600a1480612871575080600b145b61287c57600061287f565b60015b60ff1661019086028401018852600a811061289d57600981036128a2565b806003015b6020890152600560026099830201048203600101886040018181525050505050505050600062015180836101000151816128de576128de6133af565b069050610e1081046060840152603c610e108206816128ff576128ff6133af565b046080840152603c9081900660a0840152610e10808305600090810b60c0860152831261292c5782612931565b826000035b8161293e5761293e6133af565b068161294c5761294c6133af565b0460ff1660e0830152509392505050565b60006020828403121561296f57600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffffff000000000000008116811461068e57600080fd5b60005b838110156129ba5781810151838201526020016129a2565b50506000910152565b60208152600082518060208401526129e281604085016020870161299f565b601f01601f19169190910160400192915050565b600060208284031215612a0857600080fd5b81357fffffffffffffffffffffffffffff0000000000000000000000000000000000008116811461068e57600080fd5b803564ffffffffff81168114612a4d57600080fd5b919050565b60008060408385031215612a6557600080fd5b612a6e83612a38565b915060208301358060000b8114612a8457600080fd5b809150509250929050565b600060208284031215612aa157600080fd5b81357fffffffffff0000000000000000000000000000000000000000000000000000008116811461068e57600080fd5b803560ff81168114612a4d57600080fd5b60008060408385031215612af557600080fd5b82359150612b0560208401612ad1565b90509250929050565b600060208284031215612b2057600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00008116811461068e57600080fd5b600060208284031215612b6257600080fd5b81357fffffffffffffffffffffffffffffffffffff00000000000000000000000000008116811461068e57600080fd5b600060208284031215612ba457600080fd5b61068e82612a38565b600060208284031215612bbf57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461068e57600080fd5b600060208284031215612bf557600080fd5b81357fffffffffffffffffffffffffff000000000000000000000000000000000000008116811461068e57600080fd5b600060208284031215612c3757600080fd5b81357fffffffffffff00000000000000000000000000000000000000000000000000008116811461068e57600080fd5b600060208284031215612c7957600080fd5b5035919050565b600060208284031215612c9257600080fd5b81357fffffff00000000000000000000000000000000000000000000000000000000008116811461068e57600080fd5b600060208284031215612cd457600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000008116811461068e57600080fd5b634e487b7160e01b600052604160045260246000fd5b600060208284031215612d2c57600080fd5b813567ffffffffffffffff80821115612d4457600080fd5b818401915084601f830112612d5857600080fd5b813581811115612d6a57612d6a612d04565b604051601f8201601f19908116603f01168101908382118183101715612d9257612d92612d04565b81604052828152876020848701011115612dab57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208284031215612ddd57600080fd5b8135801515811461068e57600080fd5b600060208284031215612dff57600080fd5b81357fffffffffffffffffffffffffffffffffff0000000000000000000000000000008116811461068e57600080fd5b600060208284031215612e4157600080fd5b81357fffffffffffffffffff00000000000000000000000000000000000000000000008116811461068e57600080fd5b600060208284031215612e8357600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000008116811461068e57600080fd5b600060208284031215612ec557600080fd5b81357fffffffffffffffffffffffffffffffff000000000000000000000000000000008116811461068e57600080fd5b600060208284031215612f0757600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000008116811461068e57600080fd5b600060208284031215612f4957600080fd5b81357fffffffffffffffffffffffff00000000000000000000000000000000000000008116811461068e57600080fd5b600060208284031215612f8b57600080fd5b81357fffffffffffffffff0000000000000000000000000000000000000000000000008116811461068e57600080fd5b600060208284031215612fcd57600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008116811461068e57600080fd5b60006020828403121561300f57600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000008116811461068e57600080fd5b60006020828403121561305157600080fd5b81357fffff0000000000000000000000000000000000000000000000000000000000008116811461068e57600080fd5b60006020828403121561309357600080fd5b81357fffffffffffffffffffffff0000000000000000000000000000000000000000008116811461068e57600080fd5b6000602082840312156130d557600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000008116811461068e57600080fd5b60006020828403121561311757600080fd5b81357fffffffffffffffffffffffffffffff00000000000000000000000000000000008116811461068e57600080fd5b60006020828403121561315957600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461068e57600080fd5b60006020828403121561319b57600080fd5b81357fffffffffffffffffffffffffffffffffffffffffff00000000000000000000008116811461068e57600080fd5b6000602082840312156131dd57600080fd5b81357fffffffffffffffffffff000000000000000000000000000000000000000000008116811461068e57600080fd5b60006020828403121561321f57600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008116811461068e57600080fd5b60006020828403121561326157600080fd5b81357fff000000000000000000000000000000000000000000000000000000000000008116811461068e57600080fd5b6000602082840312156132a357600080fd5b81357fffffffffffffff000000000000000000000000000000000000000000000000008116811461068e57600080fd5b6000602082840312156132e557600080fd5b81357fffffffffffffffffffffffffffffffffffffff000000000000000000000000008116811461068e57600080fd5b60006020828403121561332757600080fd5b81357fffffffffffffffffffffffffffffffffffffffffffff000000000000000000008116811461068e57600080fd5b60006020828403121561336957600080fd5b81357fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008116811461068e57600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600082516133d781846020870161299f565b7f5a00000000000000000000000000000000000000000000000000000000000000920191825250600101919050565b6000835161341881846020880161299f565b83519083019061342c81836020880161299f565b01949350505050565b7f2d0000000000000000000000000000000000000000000000000000000000000081526000825161346d81600185016020870161299f565b919091016001019291505056fe30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030302ea2646970667358221220b3bdb16e187770c6d4889d6c76fc7ca57ad0708e260d6982b7e467c463c8ddc364736f6c63430008110033",
  "devdoc": {
    "errors": {
      "EpochTimeTooBig(uint256)": [
        {
          "params": {
            "epoch": "The offending epoch value"
          }
        }
      ],
      "EpochTimeTooSmallForTimezoneOffset(uint40,int8)": [
        {
          "params": {
            "epoch": "The offending epoch value",
            "tzOffset": "The offending timezone offset"
          }
        }
      ],
      "TimezoneOffsetTooBig(int8)": [
        {
          "params": {
            "tzOffset": "The offending timezone offset"
          }
        }
      ],
      "TimezoneOffsetTooSmall(int8)": [
        {
          "params": {
            "tzOffset": "The offending timezone offset"
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "toString(address)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bool)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes1)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes10)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes11)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes12)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes13)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes14)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes15)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes16)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes17)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes18)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes19)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes2)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes20)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes21)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes22)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes23)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes24)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes25)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes26)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes27)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes28)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes29)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes3)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes30)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes31)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes32)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes4)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes5)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes6)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes7)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes8)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(bytes9)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(int256)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(int256,uint8)": {
        "params": {
          "decimals": "The number of decimal places to use",
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(uint256)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(uint256,uint8)": {
        "params": {
          "decimals": "The number of decimal places to use",
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(uint40)": {
        "params": {
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      },
      "toString(uint40,int8)": {
        "params": {
          "tzOffset": "The number of quarters-of-an-hour to offset",
          "value": "The value to convert to string"
        },
        "returns": {
          "_0": "The resulting string"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "EpochTimeTooBig(uint256)": [
        {
          "notice": "Raised upon finding an epoch value that will not fit in 4 characters"
        }
      ],
      "EpochTimeTooSmallForTimezoneOffset(uint40,int8)": [
        {
          "notice": "Raised upon finding an epoch value below the absolute value of the given timezone offset"
        }
      ],
      "TimezoneOffsetTooBig(int8)": [
        {
          "notice": "Raised upon finding a timezone offset greater than 56"
        }
      ],
      "TimezoneOffsetTooSmall(int8)": [
        {
          "notice": "Raised upon finding a timezone offset smaller than -48"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "toString(address)": {
        "notice": "Convert the given address value to string (ie. \"<...>\")"
      },
      "toString(bool)": {
        "notice": "Convert the given boolean value to string (ie. \"true\" / \"false\")"
      },
      "toString(bytes)": {
        "notice": "Convert the given bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes1)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes10)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes11)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes12)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes13)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes14)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes15)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes16)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes17)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes18)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes19)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes2)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes20)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes21)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes22)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes23)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes24)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes25)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes26)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes27)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes28)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes29)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes3)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes30)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes31)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes32)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes4)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes5)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes6)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes7)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes8)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(bytes9)": {
        "notice": "Convert the given fixed-size bytes value to string (ie. \"[...]\")"
      },
      "toString(int256)": {
        "notice": "Convert the given int value to string"
      },
      "toString(int256,uint8)": {
        "notice": "Convert the given int value to string, where as many decimal digits are used as given"
      },
      "toString(uint256)": {
        "notice": "Convert the given uint value to string"
      },
      "toString(uint256,uint8)": {
        "notice": "Convert the given uint value to string, where as many decimal digits are used as given"
      },
      "toString(uint40)": {
        "notice": "Convert the given epoch value to ISO8601 format (ie. \"0000-00-00T00:00:00Z\")"
      },
      "toString(uint40,int8)": {
        "notice": "Convert the given epoch value to ISO8601 format (ie. \"0000-00-00T00:00:00+00:00\")"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
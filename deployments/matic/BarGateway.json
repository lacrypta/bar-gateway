{
  "address": "0x8552E2D4CC186954E861fD5c9aA8FfbbDE65e4e4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "theToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "theDestination",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyServed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "validUntil",
          "type": "uint256"
        }
      ],
      "name": "Expired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "validSince",
          "type": "uint256"
        }
      ],
      "name": "NotYetActive",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "voucherHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "VoucherServed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERMIT_AND_PURCHASE_VOUCHER_TAG",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PURCHASE_VOUCHER_TAG",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOUCHER_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validUntil",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "buildPermitAndPurchaseVoucher",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validSince",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "buildPermitAndPurchaseVoucher",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validSince",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validSince",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validUntil",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "buildPermitAndPurchaseVoucher",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validSince",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "buildPurchaseVoucher",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validSince",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validUntil",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "buildPurchaseVoucher",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validSince",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validSince",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validUntil",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "buildPurchaseVoucher",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validSince",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destination",
      "outputs": [
        {
          "internalType": "address",
          "name": "theDestination",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validSince",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        }
      ],
      "name": "hashVoucher",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "voucherHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validSince",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "serveVoucher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validSince",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "serveVoucher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validSince",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        }
      ],
      "name": "stringifyVoucher",
      "outputs": [
        {
          "internalType": "string",
          "name": "voucherString",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "theToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validSince",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "validateVoucher",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validSince",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "validateVoucher",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "voucherServed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x661602572e8140eac40486380e583e5ea947cd355ddf45b8aaa9f26d03ce136b",
  "receipt": {
    "to": null,
    "from": "0x4BADCf0DCeaAD060f86D9b34c9E118c8319945AE",
    "contractAddress": "0x8552E2D4CC186954E861fD5c9aA8FfbbDE65e4e4",
    "transactionIndex": 30,
    "gasUsed": "2797053",
    "logsBloom": "0x
    "blockHash": "0x5b61bf865bbf8c434ef309ca138c6b12be60fe77bb84eef932e7818b5ff988c0",
    "transactionHash": "0x661602572e8140eac40486380e583e5ea947cd355ddf45b8aaa9f26d03ce136b",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 34752533,
        "transactionHash": "0x661602572e8140eac40486380e583e5ea947cd355ddf45b8aaa9f26d03ce136b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004badcf0dceaad060f86d9b34c9e118c8319945ae",
          "0x000000000000000000000000ef46d5fe753c988606e6f703260d816af53b03eb"
        ],
        "data": "0x000000000000000000000000000000000000000000000000018c8d1ba17ebff2000000000000000000000000000000000000000000000000bc36ef5a70c74b92000000000000000000000000000000000000000000003141c4918f123950ef97000000000000000000000000000000000000000000000000baaa623ecf488ba0000000000000000000000000000000000000000000003141c61e1c2ddacfaf89",
        "logIndex": 156,
        "blockHash": "0x5b61bf865bbf8c434ef309ca138c6b12be60fe77bb84eef932e7818b5ff988c0"
      }
    ],
    "blockNumber": 34752533,
    "cumulativeGasUsed": "7684406",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x78a486306D15E7111cca541F2f1307a1cFCaF5C4",
    "0x4BADCf0DCeaAD060f86D9b34c9E118c8319945AE"
  ],
  "numDeployments": 3,
  "solcInputHash": "1b20487334fc2dfe1f743b15d72bc9e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"theDestination\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyServed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"validSince\",\"type\":\"uint256\"}],\"name\":\"NotYetActive\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"voucherHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"VoucherServed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERMIT_AND_PURCHASE_VOUCHER_TAG\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PURCHASE_VOUCHER_TAG\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOUCHER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"buildPermitAndPurchaseVoucher\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validSince\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"buildPermitAndPurchaseVoucher\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validSince\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validSince\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"buildPermitAndPurchaseVoucher\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validSince\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"buildPurchaseVoucher\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validSince\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"buildPurchaseVoucher\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validSince\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validSince\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"buildPurchaseVoucher\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validSince\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"theDestination\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validSince\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"}],\"name\":\"hashVoucher\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"voucherHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validSince\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"serveVoucher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validSince\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"serveVoucher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validSince\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"}],\"name\":\"stringifyVoucher\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"voucherString\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"theToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validSince\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"validateVoucher\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validSince\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"validateVoucher\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"voucherServed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"Expired(uint256)\":[{\"params\":{\"validUntil\":\"The maximum block timestamp this voucher was valid until\"}}],\"NotYetActive(uint256)\":[{\"params\":{\"validSince\":\"The minimum block timestamp this voucher will be valid since\"}}]},\"kind\":\"dev\",\"methods\":{\"buildPermitAndPurchaseVoucher(uint256,address,uint256,uint8,bytes32,bytes32,string)\":{\"params\":{\"amount\":\"Amount to use\",\"from\":\"Transfer origin to use\",\"message\":\"Message to use\",\"nonce\":\"Nonce to use\",\"r\":\"The permit's signature \\\"r\\\" value\",\"s\":\"The permit's signature \\\"s\\\" value\",\"v\":\"The permit's signature \\\"v\\\" value\"},\"returns\":{\"voucher\":\" The generated voucher\"}},\"buildPermitAndPurchaseVoucher(uint256,uint256,address,uint256,uint8,bytes32,bytes32,string)\":{\"params\":{\"amount\":\"Amount to use\",\"from\":\"Transfer origin to use\",\"message\":\"Message to use\",\"nonce\":\"Nonce to use\",\"r\":\"The permit's signature \\\"r\\\" value\",\"s\":\"The permit's signature \\\"s\\\" value\",\"v\":\"The permit's signature \\\"v\\\" value\",\"validUntil\":\"Voucher validUntil to use\"},\"returns\":{\"voucher\":\" The generated voucher\"}},\"buildPermitAndPurchaseVoucher(uint256,uint256,uint256,address,uint256,uint8,bytes32,bytes32,string)\":{\"params\":{\"amount\":\"Amount to use\",\"from\":\"Transfer origin to use\",\"message\":\"Message to use\",\"nonce\":\"Nonce to use\",\"r\":\"The permit's signature \\\"r\\\" value\",\"s\":\"The permit's signature \\\"s\\\" value\",\"v\":\"The permit's signature \\\"v\\\" value\",\"validSince\":\"Voucher validSince to use\",\"validUntil\":\"Voucher validUntil to use\"},\"returns\":{\"voucher\":\" The generated voucher\"}},\"buildPurchaseVoucher(uint256,address,uint256,string)\":{\"params\":{\"amount\":\"Amount to use\",\"from\":\"Transfer origin to use\",\"message\":\"Message to use\",\"nonce\":\"Nonce to use\"},\"returns\":{\"voucher\":\" The generated voucher\"}},\"buildPurchaseVoucher(uint256,uint256,address,uint256,string)\":{\"params\":{\"amount\":\"Amount to use\",\"from\":\"Transfer origin to use\",\"message\":\"Message to use\",\"nonce\":\"Nonce to use\",\"validUntil\":\"Voucher validUntil to use\"},\"returns\":{\"voucher\":\" The generated voucher\"}},\"buildPurchaseVoucher(uint256,uint256,uint256,address,uint256,string)\":{\"params\":{\"amount\":\"Amount to use\",\"from\":\"Transfer origin to use\",\"message\":\"Message to use\",\"nonce\":\"Nonce to use\",\"validSince\":\"Voucher validSince to use\",\"validUntil\":\"Voucher validUntil to use\"},\"returns\":{\"voucher\":\" The generated voucher\"}},\"constructor\":{\"params\":{\"theDestination\":\"Configured destination for transfers\",\"theToken\":\"Underlying ERC20 token\"}},\"destination()\":{\"returns\":{\"theDestination\":\" The address of the configured destination\"}},\"hashVoucher((uint32,uint256,uint256,uint256,bytes,bytes))\":{\"params\":{\"voucher\":\"The voucher to retrieve the hash for\"},\"returns\":{\"voucherHash\":\" The voucher hash associated to the given voucher\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"serveVoucher((uint32,uint256,uint256,uint256,bytes,bytes),bytes)\":{\"custom:emit\":\"VoucherServed\",\"params\":{\"signature\":\"The associated voucher signature\",\"voucher\":\"The voucher to serve\"}},\"serveVoucher((uint32,uint256,uint256,uint256,bytes,bytes),bytes32,bytes32,uint8)\":{\"custom:emit\":\"VoucherServed\",\"params\":{\"r\":\"The \\\"r\\\" component of the associated voucher signature\",\"s\":\"The \\\"s\\\" component of the associated voucher signature\",\"v\":\"The \\\"v\\\" component of the associated voucher signature\",\"voucher\":\"The voucher to serve\"}},\"stringifyVoucher((uint32,uint256,uint256,uint256,bytes,bytes))\":{\"params\":{\"voucher\":\"The voucher to stringify\"},\"returns\":{\"voucherString\":\" The string representation to be signed of the given voucher\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"Interface ID to check against\"},\"returns\":{\"_0\":\"Whether the provided interface ID is supported\"}},\"token()\":{\"returns\":{\"theToken\":\" The address of the underlying ERC20 token\"}},\"validateVoucher((uint32,uint256,uint256,uint256,bytes,bytes),bytes)\":{\"params\":{\"signature\":\"The associated voucher signature\",\"voucher\":\"The voucher to validate\"}},\"validateVoucher((uint32,uint256,uint256,uint256,bytes,bytes),bytes32,bytes32,uint8)\":{\"params\":{\"r\":\"The \\\"r\\\" component of the associated voucher signature\",\"s\":\"The \\\"s\\\" component of the associated voucher signature\",\"v\":\"The \\\"v\\\" component of the associated voucher signature\",\"voucher\":\"The voucher to validate\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyServed()\":[{\"notice\":\"Raised upon encountering an already served voucher\"}],\"Expired(uint256)\":[{\"notice\":\"Raised upon encountering a voucher that has already expired\"}],\"InvalidSignature()\":[{\"notice\":\"Raised upon encountering a voucher with an invalid signature\"}],\"NotYetActive(uint256)\":[{\"notice\":\"Raised upon encountering a voucher that is not yet active\"}]},\"events\":{\"VoucherServed(bytes32,address)\":{\"notice\":\"Emitted upon a voucher being served\"}},\"kind\":\"user\",\"methods\":{\"VOUCHER_TYPEHASH()\":{\"notice\":\"Return the typehash associated to the Gateway Voucher itself\"},\"buildPermitAndPurchaseVoucher(uint256,address,uint256,uint8,bytes32,bytes32,string)\":{\"notice\":\"Build a PermitAndPurchaseVoucher from the given parameters\"},\"buildPermitAndPurchaseVoucher(uint256,uint256,address,uint256,uint8,bytes32,bytes32,string)\":{\"notice\":\"Build a PermitAndPurchaseVoucher from the given parameters\"},\"buildPermitAndPurchaseVoucher(uint256,uint256,uint256,address,uint256,uint8,bytes32,bytes32,string)\":{\"notice\":\"Build a PermitAndPurchaseVoucher from the given parameters\"},\"buildPurchaseVoucher(uint256,address,uint256,string)\":{\"notice\":\"Build a PurchaseVoucher from the given parameters\"},\"buildPurchaseVoucher(uint256,uint256,address,uint256,string)\":{\"notice\":\"Build a PurchaseVoucher from the given parameters\"},\"buildPurchaseVoucher(uint256,uint256,uint256,address,uint256,string)\":{\"notice\":\"Build a PurchaseVoucher from the given parameters\"},\"constructor\":{\"notice\":\"Build a new ERC20Gateway from the given token address\"},\"destination()\":{\"notice\":\"Retrieve the address of the configured destination\"},\"hashVoucher((uint32,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"Return the voucher hash associated to the given voucher\"},\"serveVoucher((uint32,uint256,uint256,uint256,bytes,bytes),bytes)\":{\"notice\":\"Serve the given voucher, by forwarding to the appropriate handler for the voucher's tag\"},\"serveVoucher((uint32,uint256,uint256,uint256,bytes,bytes),bytes32,bytes32,uint8)\":{\"notice\":\"Serve the given voucher, by forwarding to the appropriate handler for the voucher's tag\"},\"stringifyVoucher((uint32,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"Return the string representation to be signed for a given Voucher\"},\"supportsInterface(bytes4)\":{\"notice\":\"Implementation of the IERC165 interface\"},\"token()\":{\"notice\":\"Retrieve the address of the underlying ERC20 token\"},\"validateVoucher((uint32,uint256,uint256,uint256,bytes,bytes),bytes)\":{\"notice\":\"Validate the given voucher against the given signature\"},\"validateVoucher((uint32,uint256,uint256,uint256,bytes,bytes),bytes32,bytes32,uint8)\":{\"notice\":\"Validate the given voucher against the given signature, by the given signer\"},\"voucherServed(bytes32)\":{\"notice\":\"Determine whether the given voucher hash has been already served\"}},\"notice\":\"Bar gateway implementation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BarGateway.sol\":\"BarGateway\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@lacrypta/gateway/contracts/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\n// Type used for UNIX epoch quantities\\ntype Epoch is uint40;\\n\\n// Type used to represent \\\"quarters-of-an-hour\\\" (used for timezone offset specification)\\ntype Quarters is int8;\\n\\n/**\\n * Set of parts of a date/time value encoded by a given epoch\\n *\\n * @custom:member year  The year the given epoch encodes\\n * @custom:member month  The month the given epoch encodes\\n * @custom:member day  The day the given epoch encodes\\n * @custom:member hour  The hour the given epoch encodes\\n * @custom:member minute  The minute the given epoch encodes\\n * @custom:member second  The second the given epoch encodes\\n * @custom:member tzHours  The timezone offset hours\\n * @custom:member tzMinutes  The timezone offset minutes (always multiple of 15)\\n * @custom:member epoch  Calculated epoch value, taking timezoneOffset into account\\n */\\nstruct DateTimeParts {\\n    uint256 year;\\n    uint256 month;\\n    uint256 day;\\n    uint256 hour;\\n    uint256 minute;\\n    uint256 second;\\n    int8 tzHours;\\n    uint256 tzMinutes;\\n    uint256 epoch;\\n}\\n\\n/**\\n * Raised upon finding a timezone offset smaller than -48\\n *\\n * @param tzOffset  The offending timezone offset\\n */\\nerror TimezoneOffsetTooSmall(Quarters tzOffset);\\n\\n/**\\n * Raised upon finding a timezone offset greater than 56\\n *\\n * @param tzOffset  The offending timezone offset\\n */\\nerror TimezoneOffsetTooBig(Quarters tzOffset);\\n\\n/**\\n * Raised upon finding an epoch value below the absolute value of the given timezone offset\\n *\\n * @param epoch  The offending epoch value\\n * @param tzOffset  The offending timezone offset\\n */\\nerror EpochTimeTooSmallForTimezoneOffset(Epoch epoch, Quarters tzOffset);\\n\\n/**\\n * Extract the date/time components from the given epoch value\\n *\\n * @param value  The value to extract components from\\n * @return dateTimeParts  The DateTimeParts the given epoch encodes\\n */\\nfunction dateTimeParts(Epoch value) pure returns (DateTimeParts memory) {\\n    return dateTimeParts(value, Quarters.wrap(0));\\n}\\n\\n/**\\n * Extract the date/time components from the given epoch value and timezone offset\\n *\\n * Mostly taken from: https://howardhinnant.github.io/date_algorithms.html#civil_from_days\\n *\\n * @param value  The value to extract components from\\n * @param tzOffset  The number of quarters-of-an-hour to offset\\n * @return dateTimeParts  The DateTimeParts the given epoch encodes\\n */\\nfunction dateTimeParts(Epoch value, Quarters tzOffset) pure returns (DateTimeParts memory) {\\n    unchecked {\\n        if (Quarters.unwrap(tzOffset) < -48) {\\n            revert TimezoneOffsetTooSmall(tzOffset);\\n        }\\n        if (56 < Quarters.unwrap(tzOffset)) {\\n            revert TimezoneOffsetTooBig(tzOffset);\\n        }\\n\\n        DateTimeParts memory result;\\n\\n        int256 tzOffsetInSeconds = int256(Quarters.unwrap(tzOffset)) * 900;\\n        if (tzOffsetInSeconds < 0) {\\n            if (Epoch.unwrap(value) < uint256(-tzOffsetInSeconds)) {\\n                revert EpochTimeTooSmallForTimezoneOffset(value, tzOffset);\\n            }\\n            result.epoch = Epoch.unwrap(value) - uint256(-tzOffsetInSeconds);\\n        } else {\\n            result.epoch = Epoch.unwrap(value) + uint256(tzOffsetInSeconds);\\n        }\\n\\n        {\\n            uint256 z = result.epoch / 86400 + 719468;\\n            uint256 era = z / 146097;\\n            uint256 doe = z - era * 146097;\\n            uint256 yoe = (doe - doe / 1460 + doe / 36524 - doe / 146096) / 365;\\n            uint256 doy = doe - (365 * yoe + yoe / 4 - yoe / 100);\\n            uint256 mp = (5 * doy + 2) / 153;\\n            //\\n            result.year = yoe + era * 400 + (mp == 10 || mp == 11 ? 1 : 0);\\n            result.month = mp < 10 ? mp + 3 : mp - 9;\\n            result.day = doy - (153 * mp + 2) / 5 + 1;\\n        }\\n\\n        {\\n            uint256 w = result.epoch % 86400;\\n            //\\n            result.hour = w / 3600;\\n            result.minute = (w % 3600) / 60;\\n            result.second = w % 60;\\n        }\\n\\n        result.tzHours = int8(tzOffsetInSeconds / 3600);\\n        result.tzMinutes = uint8((uint256(tzOffsetInSeconds < 0 ? -tzOffsetInSeconds : tzOffsetInSeconds) % 3600) / 60);\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xe963e74e9999e7f94dc86183e829794475163834bee562c69e2660f859242d76\",\"license\":\"AGPL-3.0-or-later\"},\"@lacrypta/gateway/contracts/Gateway.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {SignatureChecker} from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\n\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport {Multicall} from \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport {ToString} from \\\"./ToString.sol\\\";\\nimport {Epoch} from \\\"./DateTime.sol\\\";\\n\\nimport \\\"./IGateway.sol\\\";\\n\\nabstract contract Gateway is Context, ERC165, IGateway, Multicall, ReentrancyGuard {\\n    using ToString for Epoch;\\n    using ToString for bytes;\\n    using ToString for uint32;\\n    using ToString for uint256;\\n\\n    /**\\n     * Structure used to keep track of handling functions\\n     *\\n     * @custom:member message  The user-readable message-generating function\\n     * @custom:member signer  The signer-extractor function\\n     * @custom:member execute  The execution function\\n     */\\n    struct HandlerEntry {\\n        function(Voucher calldata) view returns (string memory) message;\\n        function(Voucher calldata) view returns (address) signer;\\n        function(Voucher calldata) execute;\\n    }\\n\\n    // Mapping from voucher tag to handling entry\\n    mapping(uint32 => HandlerEntry) private voucherHandler;\\n\\n    // typehash associated to the gateway Voucher itself\\n    //\\n    // This is computed using the \\\"encodeType\\\" convention laid out in <https://eips.ethereum.org/EIPS/eip-712#definition-of-encodetype>.\\n    bytes32 public constant override VOUCHER_TYPEHASH =\\n        keccak256(\\\"Voucher(uint32 tag,uint256 nonce,uint256 deadline,bytes payload,bytes metadata)\\\");\\n\\n    // Set of voucher hashes served\\n    mapping(bytes32 => bool) public override voucherServed;\\n\\n    /**\\n     * Implementation of the IERC165 interface\\n     *\\n     * @param interfaceId  Interface ID to check against\\n     * @return  Whether the provided interface ID is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IGateway).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * Return the voucher hash associated to the given voucher\\n     *\\n     * @param voucher  The voucher to retrieve the hash for\\n     * @return voucherHash  The voucher hash associated to the given voucher\\n     */\\n    function hashVoucher(Voucher calldata voucher) external view override returns (bytes32 voucherHash) {\\n        voucherHash = _hashVoucher(voucher);\\n    }\\n\\n    /**\\n     * Return the string representation to be signed for a given Voucher\\n     *\\n     * @param voucher  The voucher to stringify\\n     * @return voucherString  The string representation to be signed of the given voucher\\n     */\\n    function stringifyVoucher(Voucher calldata voucher) external view override returns (string memory voucherString) {\\n        voucherString = _stringifyVoucher(voucher);\\n    }\\n\\n    /**\\n     * Validate the given voucher against the given signature\\n     *\\n     * @param voucher  The voucher to validate\\n     * @param signature  The associated voucher signature\\n     */\\n    function validateVoucher(Voucher calldata voucher, bytes calldata signature) external view override {\\n        _validateVoucher(voucher, signature);\\n    }\\n\\n    /**\\n     * Validate the given voucher against the given signature, by the given signer\\n     *\\n     * @param voucher  The voucher to validate\\n     * @param r  The \\\"r\\\" component of the associated voucher signature\\n     * @param s  The \\\"s\\\" component of the associated voucher signature\\n     * @param v  The \\\"v\\\" component of the associated voucher signature\\n     */\\n    function validateVoucher(Voucher calldata voucher, bytes32 r, bytes32 s, uint8 v) external view override {\\n        _validateVoucher(voucher, _joinSignatureParts(r, s, v));\\n    }\\n\\n    /**\\n     * Serve the given voucher, by forwarding to the appropriate handler for the voucher's tag\\n     *\\n     * @param voucher  The voucher to serve\\n     * @param signature  The associated voucher signature\\n     * @custom:emit  VoucherServed\\n     */\\n    function serveVoucher(Voucher calldata voucher, bytes calldata signature) external override nonReentrant {\\n        _serveVoucher(voucher, signature);\\n    }\\n\\n    /**\\n     * Serve the given voucher, by forwarding to the appropriate handler for the voucher's tag\\n     *\\n     * @param voucher  The voucher to serve\\n     * @param r  The \\\"r\\\" component of the associated voucher signature\\n     * @param s  The \\\"s\\\" component of the associated voucher signature\\n     * @param v  The \\\"v\\\" component of the associated voucher signature\\n     * @custom:emit  VoucherServed\\n     */\\n    function serveVoucher(Voucher calldata voucher, bytes32 r, bytes32 s, uint8 v) external override nonReentrant {\\n        _serveVoucher(voucher, _joinSignatureParts(r, s, v));\\n    }\\n\\n    // --- Protected handling ---------------------------------------------------------------------------------------------------------------------------------\\n\\n    /**\\n     * Add the given pair of signer and serving functions to the tag map\\n     *\\n     * @param tag  The tag to add the mapping for\\n     * @param entry  The handling entry instance\\n     */\\n    function _addHandler(uint32 tag, HandlerEntry memory entry) internal {\\n        voucherHandler[tag] = entry;\\n    }\\n\\n    /**\\n     * Add the given pair of signer and serving functions to the tag map\\n     *\\n     * @param tag  The tag to remove the mapping for\\n     * @return entry  The previous entry\\n     */\\n    function _removeHandler(uint32 tag) internal returns (HandlerEntry memory entry) {\\n        entry = voucherHandler[tag];\\n        delete voucherHandler[tag];\\n    }\\n\\n    // --- Protected utilities --------------------------------------------------------------------------------------------------------------------------------\\n\\n    /**\\n     * Return the user-readable message for the given voucher\\n     *\\n     * @param voucher  Voucher to obtain the user-readable message for\\n     * @return message  The voucher's user-readable message\\n     */\\n    function _message(Voucher calldata voucher) internal view returns (string memory message) {\\n        message = voucherHandler[voucher.tag].message(voucher);\\n    }\\n\\n    /**\\n     * Retrieve the signer of the given Voucher\\n     *\\n     * @param voucher  Voucher to retrieve the signer of\\n     * @return signer  The voucher's signer\\n     */\\n    function _signer(Voucher calldata voucher) internal view returns (address signer) {\\n        signer = voucherHandler[voucher.tag].signer(voucher);\\n    }\\n\\n    /**\\n     * Execute the given Voucher\\n     *\\n     * @param voucher  Voucher to execute\\n     */\\n    function _execute(Voucher calldata voucher) internal {\\n        voucherHandler[voucher.tag].execute(voucher);\\n    }\\n\\n    /**\\n     * Actually return the string representation to be signed for a given Voucher\\n     *\\n     * @param voucher  The voucher to stringify\\n     * @return voucherString  The string representation to be signed of the given voucher\\n     */\\n    function _stringifyVoucher(Voucher calldata voucher) internal view returns (string memory voucherString) {\\n        voucherString = string.concat(\\n            string.concat(_message(voucher), \\\"\\\\n\\\"),\\n            \\\"---\\\\n\\\",\\n            string.concat(\\\"tag: \\\", voucher.tag.toString(), \\\"\\\\n\\\"),\\n            string.concat(\\\"nonce: \\\", voucher.nonce.toString(), \\\"\\\\n\\\"),\\n            string.concat(\\\"valid since: \\\", Epoch.wrap(uint40(voucher.validSince)).toString(), \\\"\\\\n\\\"),\\n            string.concat(\\\"valid until: \\\", Epoch.wrap(uint40(voucher.validUntil)).toString(), \\\"\\\\n\\\"),\\n            string.concat(\\\"payload: \\\", voucher.payload.toString(), \\\"\\\\n\\\"),\\n            string.concat(\\\"metadata: \\\", voucher.metadata.toString())\\n        );\\n    }\\n\\n    /**\\n     * Actually return the voucher hash associated to the given voucher\\n     *\\n     * @param voucher  The voucher to retrieve the hash for\\n     * @return voucherHash  The voucher hash associated to the given voucher\\n     */\\n    function _hashVoucher(Voucher calldata voucher) internal view returns (bytes32 voucherHash) {\\n        voucherHash = ECDSA.toEthSignedMessageHash(bytes(_stringifyVoucher(voucher)));\\n    }\\n\\n    /**\\n     * Validate the given voucher against the given signature, by the given signer\\n     *\\n     * @param voucher  The voucher to validate\\n     * @param signature  The associated voucher signature\\n     */\\n    function _validateVoucher(Voucher calldata voucher, bytes memory signature) internal view returns(bytes32 voucherHash) {\\n        if (block.timestamp < voucher.validSince) {\\n            revert NotYetActive(voucher.validSince);\\n        }\\n        if (voucher.validUntil < block.timestamp) {\\n            revert Expired(voucher.validUntil);\\n        }\\n        voucherHash = _hashVoucher(voucher);\\n        if (voucherServed[voucherHash]) {\\n            revert AlreadyServed();\\n        }\\n        if (!SignatureChecker.isValidSignatureNow(_signer(voucher), voucherHash, signature)) {\\n            revert InvalidSignature();\\n        }\\n    }\\n\\n    /**\\n     * Mark the given voucher hash as served, and emit the corresponding event\\n     *\\n     * @param voucher  The voucher hash to serve\\n     * @param signature  The associated voucher signature\\n     * @custom:emit  VoucherServed\\n     */\\n    function _serveVoucher(Voucher calldata voucher, bytes memory signature) internal {\\n        bytes32 voucherHash = _validateVoucher(voucher, signature);\\n\\n        voucherServed[voucherHash] = true;\\n\\n        _execute(voucher);\\n\\n        emit VoucherServed(voucherHash, _msgSender());\\n    }\\n\\n    // --- Private Utilities ----------------------------------------------------------------------------------------------------------------------------------\\n\\n    /**\\n     * Join the \\\"r\\\", \\\"s\\\", and \\\"v\\\" components of a signature into a single bytes structure\\n     *\\n     * @param r  The \\\"r\\\" component of the signature\\n     * @param s  The \\\"s\\\" component of the signature\\n     * @param v  The \\\"v\\\" component of the signature\\n     * @return signature  The joint signature\\n     */\\n    function _joinSignatureParts(bytes32 r, bytes32 s, uint8 v) private pure returns (bytes memory signature) {\\n        signature = bytes.concat(r, s, bytes1(v));\\n    }\\n}\\n\",\"keccak256\":\"0xd879d9f6db689da778e7e5624369b8691d8556cd746d469ce4ca065f8e5e7eef\",\"license\":\"AGPL-3.0-or-later\"},\"@lacrypta/gateway/contracts/IGateway.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\ninterface IGateway {\\n    /**\\n     * Raised upon encountering a voucher that is not yet active\\n     *\\n     * @param validSince  The minimum block timestamp this voucher will be valid since\\n     */\\n    error NotYetActive(uint256 validSince);\\n\\n    /**\\n     * Raised upon encountering a voucher that has already expired\\n     *\\n     * @param validUntil  The maximum block timestamp this voucher was valid until\\n     */\\n    error Expired(uint256 validUntil);\\n\\n    /**\\n     * Raised upon encountering an already served voucher\\n     *\\n     */\\n    error AlreadyServed();\\n\\n    /**\\n     * Raised upon encountering a voucher with an invalid signature\\n     *\\n     */\\n    error InvalidSignature();\\n\\n    /**\\n     * Voucher --- tagged union used for specific vouchers' implementation\\n     *\\n     * @custom:member tag  An integer representing the type of voucher this particular voucher is\\n     * @custom:member nonce  The voucher nonce to use\\n     * @custom:member validSince  The minimum block timestamp this voucher is valid since\\n     * @custom:member validUntil  The maximum block timestamp this voucher is valid until\\n     * @custom:member payload  Actual abi.encode()-ed payload (used for serving the call proper)\\n     * @custom:member metadata  Additional abi.encode()-ed metadata (used for administrative tasks)\\n     */\\n    struct Voucher {\\n        uint32 tag;\\n        //\\n        uint256 nonce;\\n        uint256 validSince;\\n        uint256 validUntil;\\n        //\\n        bytes payload;\\n        bytes metadata;\\n    }\\n\\n    /**\\n     * Emitted upon a voucher being served\\n     *\\n     * @param voucherHash  The voucher hash served\\n     * @param delegate  The delegate serving the voucher\\n     */\\n    event VoucherServed(bytes32 indexed voucherHash, address delegate);\\n\\n    /**\\n     * Return the typehash associated to the Gateway Voucher itself\\n     *\\n     * @return  The typehash associated to the gateway Voucher itself\\n     */\\n    function VOUCHER_TYPEHASH() external view returns (bytes32);\\n\\n    /**\\n     * Determine whether the given voucher hash has been already served\\n     *\\n     * @param voucherHash  The voucher hash to check\\n     * @return served  True whenever the given voucher hash has already been served\\n     */\\n    function voucherServed(bytes32 voucherHash) external view returns (bool served);\\n\\n    /**\\n     * Return the voucher hash associated to the given voucher\\n     *\\n     * @param voucher  The voucher to retrieve the hash for\\n     * @return voucherHash  The voucher hash associated to the given voucher\\n     */\\n    function hashVoucher(Voucher calldata voucher) external view returns (bytes32 voucherHash);\\n\\n    /**\\n     * Return the string representation to be signed for a given Voucher\\n     *\\n     * @param voucher  The voucher to stringify\\n     * @return voucherString  The string representation to be signed of the given voucher\\n     */\\n    function stringifyVoucher(Voucher calldata voucher) external view returns (string memory voucherString);\\n\\n    /**\\n     * Validate the given voucher against the given signature, by the given signer\\n     *\\n     * @param voucher  The voucher to validate\\n     * @param signature  The associated voucher signature\\n     */\\n    function validateVoucher(Voucher calldata voucher, bytes memory signature) external view;\\n\\n    /**\\n     * Validate the given voucher against the given signature, by the given signer\\n     *\\n     * @param voucher  The voucher to validate\\n     * @param r  The \\\"r\\\" component of the associated voucher signature\\n     * @param s  The \\\"s\\\" component of the associated voucher signature\\n     * @param v  The \\\"v\\\" component of the associated voucher signature\\n     */\\n    function validateVoucher(Voucher calldata voucher, bytes32 r, bytes32 s, uint8 v) external view;\\n\\n    /**\\n     * Serve the given voucher, by forwarding to the appropriate handler for the voucher's tag\\n     *\\n     * @param voucher  The voucher to serve\\n     * @param signature  The associated voucher signature\\n     * @custom:emit  VoucherServed\\n     */\\n    function serveVoucher(Voucher calldata voucher, bytes calldata signature) external;\\n\\n    /**\\n     * Serve the given voucher, by forwarding to the appropriate handler for the voucher's tag\\n     *\\n     * @param voucher  The voucher to serve\\n     * @param r  The \\\"r\\\" component of the associated voucher signature\\n     * @param s  The \\\"s\\\" component of the associated voucher signature\\n     * @param v  The \\\"v\\\" component of the associated voucher signature\\n     * @custom:emit  VoucherServed\\n     */\\n    function serveVoucher(Voucher calldata voucher, bytes32 r, bytes32 s, uint8 v) external;\\n}\\n\",\"keccak256\":\"0x2e23946ef3b6413798d0b28688feac0a33fa5c192ea357fc0ebe3e7fe8a3581c\",\"license\":\"AGPL-3.0-or-later\"},\"@lacrypta/gateway/contracts/ToString.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport {DateTimeParts, Epoch, Quarters, dateTimeParts} from \\\"./DateTime.sol\\\";\\n\\nlibrary ToString {\\n    /**\\n     * Convert the given boolean value to string (ie. \\\"true\\\" / \\\"false\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bool value) public pure returns (string memory) {\\n        return value ? \\\"true\\\" : \\\"false\\\";\\n    }\\n\\n    /**\\n     * Convert the given uint value to string\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(uint256 value) public pure returns (string memory) {\\n        return toString(value, 0);\\n    }\\n\\n    /**\\n     * Convert the given uint value to string, where as many decimal digits are used as given\\n     *\\n     * @param value  The value to convert to string\\n     * @param decimals  The number of decimal places to use\\n     * @return  The resulting string\\n     */\\n    function toString(uint256 value, uint8 decimals) public pure returns (string memory) {\\n        unchecked {\\n            bytes10 DEC_DIGITS = \\\"0123456789\\\";\\n\\n            bytes memory buffer = \\\"00000000000000000000000000000000000000000000000000000000000000000000000000000.\\\";  // buffer.length = 78\\n            uint8 i = 78;\\n\\n            // remove trailing 0s\\n            while ((0 < decimals) && (value % 10 == 0)) {\\n                value /= 10;\\n                decimals--;\\n            }\\n            // if there are remaining decimals to write, do so\\n            if (0 < decimals) {\\n                while (0 < decimals) {\\n                    buffer[--i] = DEC_DIGITS[value % 10];\\n                    value /= 10;\\n                    decimals--;\\n                }\\n                buffer[--i] = \\\".\\\";\\n            }\\n            // output a 0 in case nothing left\\n            if (value == 0) {\\n                buffer[--i] = DEC_DIGITS[0];\\n            } else {\\n                while (value != 0) {\\n                    buffer[--i] = DEC_DIGITS[value % 10];\\n                    value /= 10;\\n                }\\n            }\\n            // transfer result from buffer\\n            bytes memory result = new bytes(78 - i);\\n            uint8 j = 0;\\n            while (i < 78) {\\n                result[j++] = buffer[i++];\\n            }\\n            return string(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given int value to string\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(int256 value) public pure returns (string memory) {\\n        return toString(value, 0);\\n    }\\n\\n    /**\\n     * Convert the given int value to string, where as many decimal digits are used as given\\n     *\\n     * @param value  The value to convert to string\\n     * @param decimals  The number of decimal places to use\\n     * @return  The resulting string\\n     */\\n    function toString(int256 value, uint8 decimals) public pure returns (string memory) {\\n        unchecked {\\n            if (value < 0) {\\n                return string.concat(\\\"-\\\", toString(value == type(int256).min ? 1 + type(uint256).max >> 1 : uint256(-value), decimals));\\n            } else {\\n                return toString(uint256(value), decimals);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert the given bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes memory value) public pure returns (string memory) {\\n        unchecked {\\n            bytes16 HEX_DIGITS = \\\"0123456789abcdef\\\";\\n\\n            uint256 len = value.length;\\n            bytes memory buffer = new bytes(len * 2 + 2);\\n\\n            buffer[0] = \\\"[\\\";\\n            for ((uint256 i, uint256 j, uint256 k) = (0, 1, 2); i < len; (i, j, k) = (i + 1, j + 2, k + 2)) {\\n                uint8 val = uint8(value[i]);\\n                (buffer[j], buffer[k]) = (HEX_DIGITS[val >> 4], HEX_DIGITS[val & 0x0f]);\\n            }\\n            buffer[len * 2 + 1] = \\\"]\\\";\\n\\n            return string(buffer);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes1 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes2 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes3 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes4 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes5 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes6 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes7 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes8 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes9 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes10 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes11 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes12 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes13 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes14 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes15 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes16 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes17 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes18 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes19 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes20 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes21 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes22 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes23 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes24 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes25 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes26 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes27 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes28 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes29 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes30 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes31 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes32 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given address value to string (ie. \\\"<...>\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(address value) public pure returns (string memory) {\\n        unchecked {\\n            bytes16 HEX_DIGITS = \\\"0123456789abcdef\\\";\\n\\n            bytes20 nValue = bytes20(value);\\n            bytes memory buffer = new bytes(42);\\n            buffer[0] = \\\"<\\\";\\n            for ((uint256 i, uint256 j, uint256 k) = (0, 1, 2); i < 20; (i, j, k) = (i + 1, j + 2, k + 2)) {\\n                uint8 val = uint8(nValue[i]);\\n                (buffer[j], buffer[k]) = (HEX_DIGITS[val >> 4], HEX_DIGITS[val & 0x0f]);\\n            }\\n            buffer[41] = \\\">\\\";\\n            return string(buffer);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given epoch value to ISO8601 format (ie. \\\"0000-00-00T00:00:00Z\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(Epoch value) public pure returns (string memory) {\\n        return toString(value, Quarters.wrap(0));\\n    }\\n\\n    /**\\n     * Raised upon finding an epoch value that will not fit in 4 characters\\n     *\\n     * @param epoch  The offending epoch value\\n     */\\n    error EpochTimeTooBig(uint256 epoch);\\n\\n    /**\\n     * Convert the given epoch value to ISO8601 format (ie. \\\"0000-00-00T00:00:00+00:00\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @param tzOffset  The number of quarters-of-an-hour to offset\\n     * @return  The resulting string\\n     */\\n    function toString(Epoch value, Quarters tzOffset) public pure returns (string memory) {\\n        unchecked {\\n            bytes10 DEC_DIGITS = \\\"0123456789\\\";\\n\\n            DateTimeParts memory parts = dateTimeParts(value, tzOffset);\\n            if (253402311599 < parts.epoch) {\\n                revert EpochTimeTooBig(parts.epoch);\\n            }\\n\\n            bytes memory buffer = \\\"0000-00-00T00:00:00\\\";\\n\\n            buffer[0] = DEC_DIGITS[(parts.year / 1000) % 10];\\n            buffer[1] = DEC_DIGITS[(parts.year / 100) % 10];\\n            buffer[2] = DEC_DIGITS[(parts.year / 10) % 10];\\n            buffer[3] = DEC_DIGITS[parts.year % 10];\\n            //\\n            buffer[5] = DEC_DIGITS[(parts.month / 10) % 10];\\n            buffer[6] = DEC_DIGITS[parts.month % 10];\\n            //\\n            buffer[8] = DEC_DIGITS[(parts.day / 10) % 10];\\n            buffer[9] = DEC_DIGITS[parts.day % 10];\\n            //\\n            buffer[11] = DEC_DIGITS[(parts.hour / 10) % 10];\\n            buffer[12] = DEC_DIGITS[parts.hour % 10];\\n            //\\n            buffer[14] = DEC_DIGITS[(parts.minute / 10) % 10];\\n            buffer[15] = DEC_DIGITS[parts.minute % 10];\\n            //\\n            buffer[17] = DEC_DIGITS[(parts.second / 10) % 10];\\n            buffer[18] = DEC_DIGITS[parts.second % 10];\\n\\n            if (Quarters.unwrap(tzOffset) == 0) {\\n                return string.concat(string(buffer), \\\"Z\\\");\\n            } else {\\n                bytes memory tzBuffer = \\\" 00:00\\\";\\n                uint8 tzh;\\n                if (Quarters.unwrap(tzOffset) < 0) {\\n                    tzBuffer[0] = \\\"-\\\";\\n                    tzh = uint8(-parts.tzHours);\\n                } else {\\n                    tzBuffer[0] = \\\"+\\\";\\n                    tzh = uint8(parts.tzHours);\\n                }\\n\\n                tzBuffer[1] = DEC_DIGITS[(tzh / 10) % 10];\\n                tzBuffer[2] = DEC_DIGITS[tzh % 10];\\n                //\\n                tzBuffer[4] = DEC_DIGITS[(parts.tzMinutes / 10) % 10];\\n                tzBuffer[5] = DEC_DIGITS[parts.tzMinutes % 10];\\n\\n                return string.concat(string(buffer), string(tzBuffer));\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x25f6db398305b375382a88c22fc7a2ce49eec0580c4e8379efeb4f335c27dda4\",\"license\":\"AGPL-3.0-or-later\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x35e30a35e23f856cbcee3558b7efdd83f6017a8f1b419710645143d98e892463\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.1) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length == 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BarGateway.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {Gateway} from \\\"@lacrypta/gateway/contracts/Gateway.sol\\\";\\n\\nimport {IBarGateway} from \\\"./IBarGateway.sol\\\";\\n\\n/**\\n * Bar gateway implementation\\n *\\n */\\ncontract BarGateway is Gateway, IBarGateway {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20Permit;\\n\\n    // address of the underlying ERC20 token\\n    address internal immutable _token;\\n\\n    // address of the configured destination\\n    address internal immutable _destination;\\n\\n    // Tag associated to the PermitAndPurchaseVoucher\\n    //\\n    // This is computed using the \\\"encodeType\\\" convention laid out in <https://eips.ethereum.org/EIPS/eip-712#definition-of-encodetype>.\\n    // Note that it is not REQUIRED to be so computed, but we do so anyways to minimize encoding conventions.\\n    uint32 public constant PERMIT_AND_PURCHASE_VOUCHER_TAG =\\n        uint32(bytes4(keccak256(\\\"PermitAndPurchaseVoucher(address from,uint256 amount,uint8 v,bytes32 r,bytes32 s,string message)\\\")));\\n\\n    // Tag associated to the PurchaseVoucher\\n    //\\n    // This is computed using the \\\"encodeType\\\" convention laid out in <https://eips.ethereum.org/EIPS/eip-712#definition-of-encodetype>.\\n    // Note that it is not REQUIRED to be so computed, but we do so anyways to minimize encoding conventions.\\n    uint32 public constant PURCHASE_VOUCHER_TAG =\\n        uint32(bytes4(keccak256(\\\"PurchaseVoucher(address from,uint256 amount,string message)\\\")));\\n\\n    /**\\n     * Build a new ERC20Gateway from the given token address\\n     *\\n     * @param theToken  Underlying ERC20 token\\n     * @param theDestination  Configured destination for transfers\\n     */\\n    constructor(address theToken, address theDestination) {\\n        _token = theToken;\\n        _destination = theDestination;\\n        _addHandler(PERMIT_AND_PURCHASE_VOUCHER_TAG, HandlerEntry({\\n            message: _generatePermitAndPurchaseVoucherMessage,\\n            signer: _extractPermitAndPurchaseVoucherSigner,\\n            execute: _executePermitAndPurchaseVoucher\\n        }));\\n        _addHandler(PURCHASE_VOUCHER_TAG, HandlerEntry({\\n            message: _generatePurchaseVoucherMessage,\\n            signer: _extractPurchaseVoucherSigner,\\n            execute: _executePurchaseVoucher\\n        }));\\n    }\\n\\n    /**\\n     * Retrieve the address of the underlying ERC20 token\\n     *\\n     * @return theToken  The address of the underlying ERC20 token\\n     */\\n    function token() external view returns (address theToken) {\\n        theToken = _token;\\n    }\\n\\n    /**\\n     * Retrieve the address of the configured destination\\n     *\\n     * @return theDestination  The address of the configured destination\\n     */\\n    function destination() external view returns (address theDestination) {\\n        theDestination = _destination;\\n    }\\n\\n    /**\\n     * Implementation of the IERC165 interface\\n     *\\n     * @param interfaceId  Interface ID to check against\\n     * @return  Whether the provided interface ID is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IBarGateway).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * Build a PermitAndPurchaseVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param validSince  Voucher validSince to use\\n     * @param validUntil  Voucher validUntil to use\\n     * @param from  Transfer origin to use\\n     * @param amount  Amount to use\\n     * @param v  The permit's signature \\\"v\\\" value\\n     * @param r  The permit's signature \\\"r\\\" value\\n     * @param s  The permit's signature \\\"s\\\" value\\n     * @param message  Message to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildPermitAndPurchaseVoucher(uint256 nonce, uint256 validSince, uint256 validUntil, address from, uint256 amount, uint8 v, bytes32 r, bytes32 s, string calldata message) external pure override returns (Voucher memory voucher) {\\n        voucher = _buildPermitAndPurchaseVoucher(nonce, validSince, validUntil, from, amount, v, r, s, message);\\n    }\\n\\n    /**\\n     * Build a PermitAndPurchaseVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param validUntil  Voucher validUntil to use\\n     * @param from  Transfer origin to use\\n     * @param amount  Amount to use\\n     * @param v  The permit's signature \\\"v\\\" value\\n     * @param r  The permit's signature \\\"r\\\" value\\n     * @param s  The permit's signature \\\"s\\\" value\\n     * @param message  Message to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildPermitAndPurchaseVoucher(uint256 nonce, uint256 validUntil, address from, uint256 amount, uint8 v, bytes32 r, bytes32 s, string calldata message) external view override returns (Voucher memory voucher) {\\n        voucher = _buildPermitAndPurchaseVoucher(nonce, block.timestamp, validUntil, from, amount, v, r, s, message);\\n    }\\n\\n    /**\\n     * Build a PermitAndPurchaseVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param from  Transfer origin to use\\n     * @param amount  Amount to use\\n     * @param v  The permit's signature \\\"v\\\" value\\n     * @param r  The permit's signature \\\"r\\\" value\\n     * @param s  The permit's signature \\\"s\\\" value\\n     * @param message  Message to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildPermitAndPurchaseVoucher(uint256 nonce, address from, uint256 amount, uint8 v, bytes32 r, bytes32 s, string calldata message) external view override returns (Voucher memory voucher) {\\n        voucher = _buildPermitAndPurchaseVoucher(nonce, block.timestamp, block.timestamp + 1 hours, from, amount, v, r, s, message);\\n    }\\n\\n    /**\\n     * Build a PurchaseVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param validSince  Voucher validSince to use\\n     * @param validUntil  Voucher validUntil to use\\n     * @param from  Transfer origin to use\\n     * @param amount  Amount to use\\n     * @param message  Message to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildPurchaseVoucher(uint256 nonce, uint256 validSince, uint256 validUntil, address from, uint256 amount, string calldata message) external pure override returns (Voucher memory voucher) {\\n        voucher = _buildPurchaseVoucher(nonce, validSince, validUntil, from, amount, message);\\n    }\\n\\n    /**\\n     * Build a PurchaseVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param validUntil  Voucher validUntil to use\\n     * @param from  Transfer origin to use\\n     * @param amount  Amount to use\\n     * @param message  Message to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildPurchaseVoucher(uint256 nonce, uint256 validUntil, address from, uint256 amount, string calldata message) external view override returns (Voucher memory voucher) {\\n        voucher = _buildPurchaseVoucher(nonce, block.timestamp, validUntil, from, amount, message);\\n    }\\n\\n    /**\\n     * Build a PurchaseVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param from  Transfer origin to use\\n     * @param amount  Amount to use\\n     * @param message  Message to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildPurchaseVoucher(uint256 nonce, address from, uint256 amount, string calldata message) external view override returns (Voucher memory voucher) {\\n        voucher = _buildPurchaseVoucher(nonce, block.timestamp, block.timestamp + 1 hours, from, amount, message);\\n    }\\n\\n    /**\\n     * Build a Voucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param validSince  Voucher validSince to use\\n     * @param validUntil  Voucher validUntil to use\\n     * @param from  Transfer origin to use\\n     * @param amount  Amount to use\\n     * @param v  The permit's signature \\\"v\\\" value\\n     * @param r  The permit's signature \\\"r\\\" value\\n     * @param s  The permit's signature \\\"s\\\" value\\n     * @param message  Message to use\\n     * @return voucher  The generated voucher\\n     */\\n    function _buildPermitAndPurchaseVoucher(uint256 nonce, uint256 validSince, uint256 validUntil, address from, uint256 amount, uint8 v, bytes32 r, bytes32 s, string calldata message) internal pure returns (Voucher memory voucher) {\\n        voucher = Voucher(\\n            PERMIT_AND_PURCHASE_VOUCHER_TAG,\\n            nonce,\\n            validSince,\\n            validUntil,\\n            abi.encode(PermitAndPurchaseVoucher(from, amount, v, r, s, message)),\\n            bytes(\\\"\\\")\\n        );\\n    }\\n\\n    /**\\n     * Build a Voucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param validSince  Voucher validSince to use\\n     * @param validUntil  Voucher validUntil to use\\n     * @param from  Transfer origin to use\\n     * @param amount  Amount to use\\n     * @param message  Message to use\\n     * @return voucher  The generated voucher\\n     */\\n    function _buildPurchaseVoucher(uint256 nonce, uint256 validSince, uint256 validUntil, address from, uint256 amount, string calldata message) internal pure returns (Voucher memory voucher) {\\n        voucher = Voucher(\\n            PURCHASE_VOUCHER_TAG,\\n            nonce,\\n            validSince,\\n            validUntil,\\n            abi.encode(PurchaseVoucher(from, amount, message)),\\n            bytes(\\\"\\\")\\n        );\\n    }\\n\\n    /**\\n     * Generate the user-readable message from the given voucher\\n     *\\n     * @param voucher  Voucher to generate the user-readable message of\\n     * @return message  The voucher's generated user-readable message\\n     */\\n    function _generatePermitAndPurchaseVoucherMessage(Voucher calldata voucher) internal pure returns (string memory message) {\\n        PermitAndPurchaseVoucher memory decodedVoucher = abi.decode(voucher.payload, (PermitAndPurchaseVoucher));\\n        message = decodedVoucher.message;\\n    }\\n\\n    /**\\n     * Generate the user-readable message from the given voucher\\n     *\\n     * @param voucher  Voucher to generate the user-readable message of\\n     * @return message  The voucher's generated user-readable message\\n     */\\n    function _generatePurchaseVoucherMessage(Voucher calldata voucher) internal pure returns (string memory message) {\\n        PurchaseVoucher memory decodedVoucher = abi.decode(voucher.payload, (PurchaseVoucher));\\n        message = decodedVoucher.message;\\n    }\\n\\n    /**\\n     * Extract the signer from the given voucher\\n     *\\n     * @param voucher  Voucher to extract the signer of\\n     * @return signer  The voucher's signer\\n     */\\n    function _extractPermitAndPurchaseVoucherSigner(Voucher calldata voucher) internal pure returns (address signer) {\\n        PermitAndPurchaseVoucher memory decodedVoucher = abi.decode(voucher.payload, (PermitAndPurchaseVoucher));\\n        signer = decodedVoucher.from;\\n    }\\n\\n    /**\\n     * Extract the signer from the given voucher\\n     *\\n     * @param voucher  Voucher to extract the signer of\\n     * @return signer  The voucher's signer\\n     */\\n    function _extractPurchaseVoucherSigner(Voucher calldata voucher) internal pure returns (address signer) {\\n        PurchaseVoucher memory decodedVoucher = abi.decode(voucher.payload, (PurchaseVoucher));\\n        signer = decodedVoucher.from;\\n    }\\n\\n    /**\\n     * Execute the given (already validated) voucher\\n     *\\n     * @param voucher  The voucher to execute\\n     */\\n    function _executePermitAndPurchaseVoucher(Voucher calldata voucher) internal {\\n        PermitAndPurchaseVoucher memory decodedVoucher = abi.decode(voucher.payload, (PermitAndPurchaseVoucher));\\n        IERC20Permit(_token).safePermit(\\n            decodedVoucher.from,\\n            _destination,\\n            type(uint256).max,\\n            type(uint256).max,\\n            decodedVoucher.v,\\n            decodedVoucher.r,\\n            decodedVoucher.s\\n        );\\n        if (0 < decodedVoucher.amount) {\\n            IERC20(_token).safeTransferFrom(\\n                decodedVoucher.from,\\n                _destination,\\n                decodedVoucher.amount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Execute the given (already validated) voucher\\n     *\\n     * @param voucher  The voucher to execute\\n     */\\n    function _executePurchaseVoucher(Voucher calldata voucher) internal {\\n        PurchaseVoucher memory decodedVoucher = abi.decode(voucher.payload, (PurchaseVoucher));\\n        if (0 < decodedVoucher.amount) {\\n            IERC20(_token).safeTransferFrom(decodedVoucher.from, _destination, decodedVoucher.amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3eb721ff263248af816fc4fb821da140f65ffabdc9a1e235f205a88aaf6addc3\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/IBarGateway.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\nimport {IGateway} from \\\"@lacrypta/gateway/contracts/IGateway.sol\\\";\\n\\n/**\\n * Bar gateway interface, representing purchases of lists of line items\\n *\\n */\\ninterface IBarGateway is IGateway {\\n\\n    /**\\n     * (infinite-in-time-and-amount) Permit & Purchase voucher\\n     *\\n     * @custom:member from  The address from which to transfer funds\\n     * @custom:member amount  The total amount of funds to transfer\\n     * @custom:member v  The permit's signature \\\"v\\\" value\\n     * @custom:member r  The permit's signature \\\"r\\\" value\\n     * @custom:member s  The permit's signature \\\"s\\\" value\\n     * @custom:member message  The message to show to the end user\\n     */\\n    struct PermitAndPurchaseVoucher {\\n        address from;\\n        uint256 amount;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        string message;\\n    }\\n\\n    /**\\n     * Purchase voucher\\n     *\\n     * @custom:member from  The address from which to transfer funds\\n     * @custom:member amount  The total amount of funds to transfer\\n     * @custom:member message  The message to show to the end user\\n     */\\n    struct PurchaseVoucher {\\n        address from;\\n        uint256 amount;\\n        string message;\\n    }\\n\\n    /**\\n     * Retrieve the address of the underlying ERC20 token\\n     *\\n     * @return theToken  The address of the underlying ERC20 token\\n     */\\n    function token() external view returns (address theToken);\\n\\n    /**\\n     * Retrieve the address of the configured destination\\n     *\\n     * @return theDestination  The address of the configured destination\\n     */\\n    function destination() external view returns (address theDestination);\\n\\n    /**\\n     * Build a PermitAndPurchaseVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param validSince  Voucher validSince to use\\n     * @param validUntil  Voucher validUntil to use\\n     * @param from  Transfer origin to use\\n     * @param amount  Amount to use\\n     * @param v  The permit's signature \\\"v\\\" value\\n     * @param r  The permit's signature \\\"r\\\" value\\n     * @param s  The permit's signature \\\"s\\\" value\\n     * @param message  Message to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildPermitAndPurchaseVoucher(uint256 nonce, uint256 validSince, uint256 validUntil, address from, uint256 amount, uint8 v, bytes32 r, bytes32 s, string calldata message) external view returns (Voucher memory voucher);\\n\\n    /**\\n     * Build a PermitAndPurchaseVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param validUntil  Voucher validUntil to use\\n     * @param from  Transfer origin to use\\n     * @param amount  Amount to use\\n     * @param v  The permit's signature \\\"v\\\" value\\n     * @param r  The permit's signature \\\"r\\\" value\\n     * @param s  The permit's signature \\\"s\\\" value\\n     * @param message  Message to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildPermitAndPurchaseVoucher(uint256 nonce, uint256 validUntil, address from, uint256 amount, uint8 v, bytes32 r, bytes32 s, string calldata message) external view returns (Voucher memory voucher);\\n\\n    /**\\n     * Build a PermitAndPurchaseVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param from  Transfer origin to use\\n     * @param amount  Amount to use\\n     * @param v  The permit's signature \\\"v\\\" value\\n     * @param r  The permit's signature \\\"r\\\" value\\n     * @param s  The permit's signature \\\"s\\\" value\\n     * @param message  Message to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildPermitAndPurchaseVoucher(uint256 nonce, address from, uint256 amount, uint8 v, bytes32 r, bytes32 s, string calldata message) external view returns (Voucher memory voucher);\\n\\n    /**\\n     * Build a PurchaseVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param validSince  Voucher validSince to use\\n     * @param validUntil  Voucher validUntil to use\\n     * @param from  Transfer origin to use\\n     * @param amount  Amount to use\\n     * @param message  Message to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildPurchaseVoucher(uint256 nonce, uint256 validSince, uint256 validUntil, address from, uint256 amount, string calldata message) external view returns (Voucher memory voucher);\\n\\n    /**\\n     * Build a PurchaseVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param validUntil  Voucher validUntil to use\\n     * @param from  Transfer origin to use\\n     * @param amount  Amount to use\\n     * @param message  Message to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildPurchaseVoucher(uint256 nonce, uint256 validUntil, address from, uint256 amount, string calldata message) external view returns (Voucher memory voucher);\\n\\n    /**\\n     * Build a PurchaseVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param from  Transfer origin to use\\n     * @param amount  Amount to use\\n     * @param message  Message to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildPurchaseVoucher(uint256 nonce, address from, uint256 amount, string calldata message) external view returns (Voucher memory voucher);\\n}\\n\",\"keccak256\":\"0xa578403abb29ea094dd8cb30ab773fcdc4a5670a521ad498edf3d57631161232\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162003c6c38038062003c6c83398101604081905262000034916200089e565b600160008181556001600160a01b03848116608052831660a05260408051606081018252620001a0602090811b6200094d176001600160401b039081168352620001cd821b62000976178116828401908152620001f6831b6200099b17821694840194855263a681b763909552949052517fed1379435e089df6cff13d37b3604fa470989a1f29c053538c9eb1ba46387e9a8054935192518516600160801b02600160801b600160c01b031993861668010000000000000000026001600160801b031990951692909516919091179290921716919091179055620001987ff7d719823c8a23d19efc4eacc1963ff9c7d7bcf57ddbb5747243f182c5dc0b4e60e01c60405180606001604052806200031260201b62000a95176001600160401b031681526020016200033f60201b62000abe176001600160401b031681526020016200036060201b62000adb176001600160401b03168152506200029f60201b60201c565b505062000c4e565b60606000620001b36080840184620008dd565b810190620001c2919062000a02565b60a001519392505050565b600080620001df6080840184620008dd565b810190620001ee919062000a02565b519392505050565b6000620002076080830183620008dd565b81019062000216919062000a02565b90506200025d816000015160a051600019808560400151866060015187608001516080516001600160a01b0316620003c160201b62000b611790979695949392919060201c565b6020810151156200029b576200029b816000015160a05183602001516080516001600160a01b0316620005a760201b62000da017909392919060201c565b5050565b63ffffffff909116600090815260016020908152604091829020835181549285015193909401516001600160401b03908116600160801b02600160801b600160c01b031994821668010000000000000000026001600160801b031990941691909516179190911791909116919091179055565b60606000620003256080840184620008dd565b81019062000334919062000ac5565b604001519392505050565b600080620003516080840184620008dd565b810190620001ee919062000ac5565b6000620003716080830183620008dd565b81019062000380919062000ac5565b6020810151909150156200029b576200029b816000015160a05183602001516080516001600160a01b0316620005a760201b62000da017909392919060201c565b604051623f675f60e91b81526001600160a01b038881166004830152600091908a1690637ecebe0090602401602060405180830381865afa1580156200040b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000431919062000b6f565b60405163d505accf60e01b81526001600160a01b038a811660048301528981166024830152604482018990526064820188905260ff8716608483015260a4820186905260c48201859052919250908a169063d505accf9060e401600060405180830381600087803b158015620004a657600080fd5b505af1158015620004bb573d6000803e3d6000fd5b5050604051623f675f60e91b81526001600160a01b038b81166004830152600093508c169150637ecebe0090602401602060405180830381865afa15801562000508573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200052e919062000b6f565b90506200053d82600162000b89565b81146200059b5760405162461bcd60e51b815260206004820152602160248201527f5361666545524332303a207065726d697420646964206e6f74207375636365656044820152601960fa1b60648201526084015b60405180910390fd5b50505050505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b039081166323b872dd60e01b17909152620006079186916200060d16565b50505050565b600062000669826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620006f060201b62000e28179092919060201c565b805190915015620006eb57808060200190518101906200068a919062000bb1565b620006eb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840162000592565b505050565b60606200070184846000856200070b565b90505b9392505050565b6060824710156200076e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840162000592565b6001600160a01b0385163b620007c75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640162000592565b600080866001600160a01b03168587604051620007e5919062000bfb565b60006040518083038185875af1925050503d806000811462000824576040519150601f19603f3d011682016040523d82523d6000602084013e62000829565b606091505b5090925090506200083c82828662000847565b979650505050505050565b606083156200085857508162000704565b825115620008695782518084602001fd5b8160405162461bcd60e51b815260040162000592919062000c19565b6001600160a01b03811681146200089b57600080fd5b50565b60008060408385031215620008b257600080fd5b8251620008bf8162000885565b6020840151909250620008d28162000885565b809150509250929050565b6000808335601e19843603018112620008f557600080fd5b8301803591506001600160401b038211156200091057600080fd5b6020019150368190038213156200092657600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b03811182821017156200096857620009686200092d565b60405290565b600082601f8301126200098057600080fd5b81356001600160401b03808211156200099d576200099d6200092d565b604051601f8301601f19908116603f01168101908282118183101715620009c857620009c86200092d565b81604052838152866020858801011115620009e257600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121562000a1557600080fd5b81356001600160401b038082111562000a2d57600080fd5b9083019060c0828603121562000a4257600080fd5b62000a4c62000943565b823562000a598162000885565b815260208381013590820152604083013560ff8116811462000a7a57600080fd5b80604083015250606083013560608201526080830135608082015260a08301358281111562000aa857600080fd5b62000ab6878286016200096e565b60a08301525095945050505050565b60006020828403121562000ad857600080fd5b81356001600160401b038082111562000af057600080fd5b908301906060828603121562000b0557600080fd5b60405160608101818110838211171562000b235762000b236200092d565b604052823562000b338162000885565b81526020838101359082015260408301358281111562000b5257600080fd5b62000b60878286016200096e565b60408301525095945050505050565b60006020828403121562000b8257600080fd5b5051919050565b8082018082111562000bab57634e487b7160e01b600052601160045260246000fd5b92915050565b60006020828403121562000bc457600080fd5b815180151581146200070457600080fd5b60005b8381101562000bf257818101518382015260200162000bd8565b50506000910152565b6000825162000c0f81846020870162000bd5565b9190910192915050565b602081526000825180602084015262000c3a81604085016020870162000bd5565b601f01601f19169190910160400192915050565b60805160a051612fce62000c9e600039600081816102f2015281816109fd01528181610a6c0152610b3c015260008181610378015281816109d901528181610a490152610b190152612fce6000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c80639ae3be29116100cd578063c616f21d11610081578063ce6b5b0411610066578063ce6b5b0414610350578063e2d8b9c714610363578063fc0c546a1461037657600080fd5b8063c616f21d1461032a578063c83909f61461033d57600080fd5b8063a3099cac116100b2578063a3099cac146102bd578063ac9650d8146102d0578063b269681d146102f057600080fd5b80639ae3be291461028a578063a2576e7e1461029d57600080fd5b80635c42187f1161012457806389a7f48e1161010957806389a7f48e146102355780638bb185441461025857806394739e871461026357600080fd5b80635c42187f1461020d5780635f9b7b471461022257600080fd5b80630f443671116101555780630f443671146101ba5780633203872d146101da578063370ab341146101fa57600080fd5b806301ffc9a7146101715780630aa8610614610199575b600080fd5b61018461017f3660046120a1565b61039c565b60405190151581526020015b60405180910390f35b6101ac6101a73660046120fb565b6103f8565b604051908152602001610190565b6101cd6101c836600461219f565b610403565b6040516101909190612287565b6101e563f7d7198281565b60405163ffffffff9091168152602001610190565b6101cd6102083660046122f7565b610462565b61022061021b366004612382565b6104cb565b005b6101cd6102303660046123e3565b61058c565b610184610243366004612486565b60026020526000908152604090205460ff1681565b6101e563a681b76381565b6101ac7f3c4eccc58df3b1fa05ba717589f6675a1af0cfee2fe59126957513d39f45d1ce81565b6101cd61029836600461249f565b6105ec565b6102b06102ab3660046120fb565b61064f565b6040516101909190612507565b6102206102cb36600461251a565b61065a565b6102e36102de366004612583565b6106fe565b60405161019091906125f8565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b039091168152602001610190565b6101cd610338366004612678565b6107f3565b61022061034b366004612382565b61084c565b61022061035e36600461251a565b6108ad565b6101cd6103713660046126e9565b6108f3565b7f0000000000000000000000000000000000000000000000000000000000000000610312565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f979d37f30000000000000000000000000000000000000000000000000000000014806103f257506103f282610e41565b92915050565b60006103f282610ed8565b6104426040518060c00160405280600063ffffffff16815260200160008152602001600081526020016000815260200160608152602001606081525090565b6104548a428b8b8b8b8b8b8b8b610eeb565b9a9950505050505050505050565b6104a16040518060c00160405280600063ffffffff16815260200160008152602001600081526020016000815260200160608152602001606081525090565b6104be89426104b281610e1061277a565b8b8b8b8b8b8b8b610eeb565b9998505050505050505050565b6002600054036105225760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260005560408051602081018590528082018490527fff0000000000000000000000000000000000000000000000000000000000000060f884901b166060820152815180820360410181526061909101909152610581908590611026565b505060016000555050565b6105cb6040518060c00160405280600063ffffffff16815260200160008152602001600081526020016000815260200160608152602001606081525090565b6105dd8b8b8b8b8b8b8b8b8b8b610eeb565b9b9a5050505050505050505050565b61062b6040518060c00160405280600063ffffffff16815260200160008152602001600081526020016000815260200160608152602001606081525090565b610645864261063c81610e1061277a565b888888886110b7565b9695505050505050565b60606103f2826111da565b6002600054036106ac5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610519565b60026000819055506106f48383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061102692505050565b5050600160005550565b60608167ffffffffffffffff8111156107195761071961278d565b60405190808252806020026020018201604052801561074c57816020015b60608152602001906001900390816107375790505b50905060005b828110156107ec576107bc30858584818110610770576107706127a3565b905060200281019061078291906127b9565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061170192505050565b8282815181106107ce576107ce6127a3565b602002602001018190525080806107e49061281e565b915050610752565b5092915050565b6108326040518060c00160405280600063ffffffff16815260200160008152602001600081526020016000815260200160608152602001606081525090565b610841874288888888886110b7565b979650505050505050565b60408051602081018590528082018490527fff0000000000000000000000000000000000000000000000000000000000000060f884901b1660608201528151808203604101815260619091019091526108a6908590611726565b5050505050565b6108ed8383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061172692505050565b50505050565b6109326040518060c00160405280600063ffffffff16815260200160008152602001600081526020016000815260200160608152602001606081525090565b610941888888888888886110b7565b98975050505050505050565b6060600061095e60808401846127b9565b81019061096b9190612910565b60a001519392505050565b60008061098660808401846127b9565b8101906109939190612910565b519392505050565b60006109aa60808301836127b9565b8101906109b79190612910565b8051604082015160608301516080840151939450610a2a936001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001693927f0000000000000000000000000000000000000000000000000000000000000000926000199283929190610b61565b602081015115610a915780516020820151610a91916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f000000000000000000000000000000000000000000000000000000000000000090610da0565b5050565b60606000610aa660808401846127b9565b810190610ab391906129bd565b604001519392505050565b600080610ace60808401846127b9565b81019061099391906129bd565b6000610aea60808301836127b9565b810190610af791906129bd565b602081015190915015610a915780516020820151610a91916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f000000000000000000000000000000000000000000000000000000000000000090610da0565b6040517f7ecebe000000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152600091908a1690637ecebe0090602401602060405180830381865afa158015610bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be89190612a5b565b6040517fd505accf0000000000000000000000000000000000000000000000000000000081526001600160a01b038a811660048301528981166024830152604482018990526064820188905260ff8716608483015260a4820186905260c48201859052919250908a169063d505accf9060e401600060405180830381600087803b158015610c7557600080fd5b505af1158015610c89573d6000803e3d6000fd5b50506040517f7ecebe000000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152600093508c169150637ecebe0090602401602060405180830381865afa158015610cef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d139190612a5b565b9050610d2082600161277a565b8114610d945760405162461bcd60e51b815260206004820152602160248201527f5361666545524332303a207065726d697420646964206e6f742073756363656560448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610519565b50505050505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526108ed90859061184e565b6060610e378484600085611938565b90505b9392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f4c32b3500000000000000000000000000000000000000000000000000000000014806103f257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146103f2565b60006103f2610ee6836111da565b611a75565b610f2a6040518060c00160405280600063ffffffff16815260200160008152602001600081526020016000815260200160608152602001606081525090565b6040518060c001604052807fa681b7637c5ed2feda69f41cc9a534ac17fcd118d80d10db879b348157ebd93460e01c63ffffffff1681526020018c81526020018b81526020018a81526020016040518060c001604052808b6001600160a01b031681526020018a81526020018960ff16815260200188815260200187815260200186868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050915250604051610ff39190602001612a74565b60408051601f1981840301815291815290825280516020818101909252600081529101529b9a5050505050505050505050565b60006110328383611726565b600081815260026020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055905061107483611ab0565b807fd193a54dd0b0b5884cffc665f0803faa8d7f44280881b0a277878158bebd4c5d336040516001600160a01b03909116815260200160405180910390a2505050565b6110f66040518060c00160405280600063ffffffff16815260200160008152602001600081526020016000815260200160608152602001606081525090565b6040518060c001604052807ff7d719823c8a23d19efc4eacc1963ff9c7d7bcf57ddbb5747243f182c5dc0b4e60e01c63ffffffff1681526020018981526020018881526020018781526020016040518060600160405280886001600160a01b0316815260200187815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152506040516111aa9190602001612acd565b60408051601f19818403018152918152908252805160208181019092526000815291015298975050505050505050565b60606111e582611aff565b6040516020016111f59190612b05565b60408051601f198184030181529190526112126020840184612b2a565b6040517f6900a3ae00000000000000000000000000000000000000000000000000000000815263ffffffff9091166004820152731b6286EBdFeba70A8579E987A46Ee00cC737057290636900a3ae90602401600060405180830381865af4158015611281573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112a99190810190612b50565b6040516020016112b99190612bbe565b60408051808303601f19018152908290527f6900a3ae0000000000000000000000000000000000000000000000000000000082526020850135600483015290731b6286EBdFeba70A8579E987A46Ee00cC737057290636900a3ae90602401600060405180830381865af4158015611334573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261135c9190810190612b50565b60405160200161136c9190612c0e565b60408051808303601f190181528282527f4b2dd5190000000000000000000000000000000000000000000000000000000083529086013564ffffffffff16600483015290731b6286EBdFeba70A8579E987A46Ee00cC737057290634b2dd51990602401600060405180830381865af41580156113ec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114149190810190612b50565b6040516020016114249190612c5e565b60408051808303601f19018152908290527f4b2dd519000000000000000000000000000000000000000000000000000000008252606087013564ffffffffff16600483015290731b6286EBdFeba70A8579E987A46Ee00cC737057290634b2dd51990602401600060405180830381865af41580156114a6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114ce9190810190612b50565b6040516020016114de9190612cae565b60408051601f198184030181529190526114fb60808801886127b9565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040517f71aad10d000000000000000000000000000000000000000000000000000000008152731b6286EBdFeba70A8579E987A46Ee00cC7370572936371aad10d935061157e925090600401612507565b600060405180830381865af415801561159b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115c39190810190612b50565b6040516020016115d39190612ce6565b60408051601f198184030181529190526115f060a08901896127b9565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040517f71aad10d000000000000000000000000000000000000000000000000000000008152731b6286EBdFeba70A8579E987A46Ee00cC7370572936371aad10d9350611673925090600401612507565b600060405180830381865af4158015611690573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116b89190810190612b50565b6040516020016116c89190612d36565b60408051601f19818403018152908290526116eb97969594939291602001612d7b565b6040516020818303038152906040529050919050565b6060610e3a8383604051806060016040528060278152602001612f7260279139611b39565b6000826040013542101561176c57604080517fb27ee6fc000000000000000000000000000000000000000000000000000000008152908401356004820152602401610519565b42836060013510156117b0576040517ff80dbaea00000000000000000000000000000000000000000000000000000000815260608401356004820152602401610519565b6117b983610ed8565b60008181526002602052604090205490915060ff1615611805576040517f86a77a9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61181861181184611c23565b8284611c68565b6103f2576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006118a3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e289092919063ffffffff16565b80519091501561193357808060200190518101906118c19190612e42565b6119335760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610519565b505050565b6060824710156119b05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610519565b6001600160a01b0385163b611a075760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610519565b600080866001600160a01b03168587604051611a239190612e64565b60006040518083038185875af1925050503d8060008114611a60576040519150601f19603f3d011682016040523d82523d6000602084013e611a65565b606091505b5091509150610841828286611def565b6000611a818251611e28565b82604051602001611a93929190612e80565b604051602081830303815290604052805190602001209050919050565b611afc8160016000611ac56020840184612b2a565b63ffffffff908116825260208201929092526040016000205470010000000000000000000000000000000090048015612097021716565b50565b60606103f28260016000611b166020840184612b2a565b63ffffffff90811682526020820192909252604001600020546120978115021716565b60606001600160a01b0384163b611bb85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610519565b600080856001600160a01b031685604051611bd39190612e64565b600060405180830381855af49150503d8060008114611c0e576040519150601f19603f3d011682016040523d82523d6000602084013e611c13565b606091505b5091509150610645828286611def565b60006103f282600183611c396020840184612b2a565b63ffffffff90811682526020820192909252604001600020546801000000000000000090048015612097021716565b6000806000611c778585611f65565b90925090506000816004811115611c9057611c90612edb565b148015611cae5750856001600160a01b0316826001600160a01b0316145b15611cbe57600192505050610e3a565b600080876001600160a01b0316631626ba7e60e01b8888604051602401611ce6929190612ef1565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051611d519190612e64565b600060405180830381855afa9150503d8060008114611d8c576040519150601f19603f3d011682016040523d82523d6000602084013e611d91565b606091505b5091509150818015611da4575080516020145b8015610941575080517f1626ba7e0000000000000000000000000000000000000000000000000000000090611de29083016020908101908401612a5b565b1498975050505050505050565b60608315611dfe575081610e3a565b825115611e0e5782518084602001fd5b8160405162461bcd60e51b81526004016105199190612507565b606081600003611e6b57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115611e955780611e7f8161281e565b9150611e8e9050600a83612f20565b9150611e6f565b60008167ffffffffffffffff811115611eb057611eb061278d565b6040519080825280601f01601f191660200182016040528015611eda576020820181803683370190505b5090505b8415611f5d57611eef600183612f34565b9150611efc600a86612f47565b611f0790603061277a565b60f81b818381518110611f1c57611f1c6127a3565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611f56600a86612f20565b9450611ede565b949350505050565b6000808251604103611f9b5760208301516040840151606085015160001a611f8f87828585611faa565b94509450505050611fa3565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611fe1575060009050600361208e565b8460ff16601b14158015611ff957508460ff16601c14155b1561200a575060009050600461208e565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561205e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166120875760006001925092505061208e565b9150600090505b94509492505050565b61209f612f5b565b565b6000602082840312156120b357600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610e3a57600080fd5b600060c082840312156120f557600080fd5b50919050565b60006020828403121561210d57600080fd5b813567ffffffffffffffff81111561212457600080fd5b611f5d848285016120e3565b80356001600160a01b038116811461214757600080fd5b919050565b803560ff8116811461214757600080fd5b60008083601f84011261216f57600080fd5b50813567ffffffffffffffff81111561218757600080fd5b602083019150836020828501011115611fa357600080fd5b60008060008060008060008060006101008a8c0312156121be57600080fd5b8935985060208a013597506121d560408b01612130565b965060608a013595506121ea60808b0161214c565b945060a08a0135935060c08a0135925060e08a013567ffffffffffffffff81111561221457600080fd5b6122208c828d0161215d565b915080935050809150509295985092959850929598565b60005b8381101561225257818101518382015260200161223a565b50506000910152565b60008151808452612273816020860160208601612237565b601f01601f19169290920160200192915050565b6020815263ffffffff82511660208201526020820151604082015260408201516060820152606082015160808201526000608083015160c060a08401526122d160e084018261225b565b905060a0840151601f198483030160c08501526122ee828261225b565b95945050505050565b60008060008060008060008060e0898b03121561231357600080fd5b8835975061232360208a01612130565b96506040890135955061233860608a0161214c565b94506080890135935060a0890135925060c089013567ffffffffffffffff81111561236257600080fd5b61236e8b828c0161215d565b999c989b5096995094979396929594505050565b6000806000806080858703121561239857600080fd5b843567ffffffffffffffff8111156123af57600080fd5b6123bb878288016120e3565b94505060208501359250604085013591506123d86060860161214c565b905092959194509250565b6000806000806000806000806000806101208b8d03121561240357600080fd5b8a35995060208b0135985060408b0135975061242160608c01612130565b965060808b0135955061243660a08c0161214c565b945060c08b0135935060e08b013592506101008b013567ffffffffffffffff81111561246157600080fd5b61246d8d828e0161215d565b915080935050809150509295989b9194979a5092959850565b60006020828403121561249857600080fd5b5035919050565b6000806000806000608086880312156124b757600080fd5b853594506124c760208701612130565b935060408601359250606086013567ffffffffffffffff8111156124ea57600080fd5b6124f68882890161215d565b969995985093965092949392505050565b602081526000610e3a602083018461225b565b60008060006040848603121561252f57600080fd5b833567ffffffffffffffff8082111561254757600080fd5b612553878388016120e3565b9450602086013591508082111561256957600080fd5b506125768682870161215d565b9497909650939450505050565b6000806020838503121561259657600080fd5b823567ffffffffffffffff808211156125ae57600080fd5b818501915085601f8301126125c257600080fd5b8135818111156125d157600080fd5b8660208260051b85010111156125e657600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561266b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261265985835161225b565b9450928501929085019060010161261f565b5092979650505050505050565b60008060008060008060a0878903121561269157600080fd5b86359550602087013594506126a860408801612130565b935060608701359250608087013567ffffffffffffffff8111156126cb57600080fd5b6126d789828a0161215d565b979a9699509497509295939492505050565b600080600080600080600060c0888a03121561270457600080fd5b87359650602088013595506040880135945061272260608901612130565b93506080880135925060a088013567ffffffffffffffff81111561274557600080fd5b6127518a828b0161215d565b989b979a50959850939692959293505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156103f2576103f2612764565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126127ee57600080fd5b83018035915067ffffffffffffffff82111561280957600080fd5b602001915036819003821315611fa357600080fd5b6000600019820361283157612831612764565b5060010190565b60405160c0810167ffffffffffffffff8111828210171561285b5761285b61278d565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561288a5761288a61278d565b604052919050565b600067ffffffffffffffff8211156128ac576128ac61278d565b50601f01601f191660200190565b600082601f8301126128cb57600080fd5b81356128de6128d982612892565b612861565b8181528460208386010111156128f357600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561292257600080fd5b813567ffffffffffffffff8082111561293a57600080fd5b9083019060c0828603121561294e57600080fd5b612956612838565b61295f83612130565b8152602083013560208201526129776040840161214c565b6040820152606083013560608201526080830135608082015260a0830135828111156129a257600080fd5b6129ae878286016128ba565b60a08301525095945050505050565b6000602082840312156129cf57600080fd5b813567ffffffffffffffff808211156129e757600080fd5b90830190606082860312156129fb57600080fd5b604051606081018181108382111715612a1657612a1661278d565b604052612a2283612130565b815260208301356020820152604083013582811115612a4057600080fd5b612a4c878286016128ba565b60408301525095945050505050565b600060208284031215612a6d57600080fd5b5051919050565b602081526001600160a01b0382511660208201526020820151604082015260ff604083015116606082015260608201516080820152608082015160a0820152600060a083015160c080840152611f5d60e084018261225b565b602081526001600160a01b0382511660208201526020820151604082015260006040830151606080840152611f5d608084018261225b565b60008251612b17818460208701612237565b600560f91b920191825250600101919050565b600060208284031215612b3c57600080fd5b813563ffffffff81168114610e3a57600080fd5b600060208284031215612b6257600080fd5b815167ffffffffffffffff811115612b7957600080fd5b8201601f81018413612b8a57600080fd5b8051612b986128d982612892565b818152856020838501011115612bad57600080fd5b6122ee826020830160208601612237565b7f7461673a20000000000000000000000000000000000000000000000000000000815260008251612bf6816005850160208701612237565b600560f91b6005939091019283015250600601919050565b7f6e6f6e63653a2000000000000000000000000000000000000000000000000000815260008251612c46816007850160208701612237565b600560f91b6007939091019283015250600801919050565b7f76616c69642073696e63653a2000000000000000000000000000000000000000815260008251612c9681600d850160208701612237565b600560f91b600d939091019283015250600e01919050565b7f76616c696420756e74696c3a2000000000000000000000000000000000000000815260008251612c9681600d850160208701612237565b7f7061796c6f61643a200000000000000000000000000000000000000000000000815260008251612d1e816009850160208701612237565b600560f91b6009939091019283015250600a01919050565b7f6d657461646174613a2000000000000000000000000000000000000000000000815260008251612d6e81600a850160208701612237565b91909101600a0192915050565b600088516020612d8e8285838e01612237565b81840191507f2d2d2d0a00000000000000000000000000000000000000000000000000000000825260048a51612dc981838601858f01612237565b8a51930192612ddd81838601858e01612237565b8951930192612df181838601858d01612237565b8851930192612e0581838601858c01612237565b8751930192612e1981838601858b01612237565b8651930192612e2d81838601858a01612237565b929092019091019a9950505050505050505050565b600060208284031215612e5457600080fd5b81518015158114610e3a57600080fd5b60008251612e76818460208701612237565b9190910192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a000000000000815260008351612eb881601a850160208801612237565b835190830190612ecf81601a840160208801612237565b01601a01949350505050565b634e487b7160e01b600052602160045260246000fd5b828152604060208201526000610e37604083018461225b565b634e487b7160e01b600052601260045260246000fd5b600082612f2f57612f2f612f0a565b500490565b818103818111156103f2576103f2612764565b600082612f5657612f56612f0a565b500690565b634e487b7160e01b600052605160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220baef73bfb0744f7baed3bebd7058c3c9f7a66417a3e6a3997c174db206c54a5464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c80639ae3be29116100cd578063c616f21d11610081578063ce6b5b0411610066578063ce6b5b0414610350578063e2d8b9c714610363578063fc0c546a1461037657600080fd5b8063c616f21d1461032a578063c83909f61461033d57600080fd5b8063a3099cac116100b2578063a3099cac146102bd578063ac9650d8146102d0578063b269681d146102f057600080fd5b80639ae3be291461028a578063a2576e7e1461029d57600080fd5b80635c42187f1161012457806389a7f48e1161010957806389a7f48e146102355780638bb185441461025857806394739e871461026357600080fd5b80635c42187f1461020d5780635f9b7b471461022257600080fd5b80630f443671116101555780630f443671146101ba5780633203872d146101da578063370ab341146101fa57600080fd5b806301ffc9a7146101715780630aa8610614610199575b600080fd5b61018461017f3660046120a1565b61039c565b60405190151581526020015b60405180910390f35b6101ac6101a73660046120fb565b6103f8565b604051908152602001610190565b6101cd6101c836600461219f565b610403565b6040516101909190612287565b6101e563f7d7198281565b60405163ffffffff9091168152602001610190565b6101cd6102083660046122f7565b610462565b61022061021b366004612382565b6104cb565b005b6101cd6102303660046123e3565b61058c565b610184610243366004612486565b60026020526000908152604090205460ff1681565b6101e563a681b76381565b6101ac7f3c4eccc58df3b1fa05ba717589f6675a1af0cfee2fe59126957513d39f45d1ce81565b6101cd61029836600461249f565b6105ec565b6102b06102ab3660046120fb565b61064f565b6040516101909190612507565b6102206102cb36600461251a565b61065a565b6102e36102de366004612583565b6106fe565b60405161019091906125f8565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b039091168152602001610190565b6101cd610338366004612678565b6107f3565b61022061034b366004612382565b61084c565b61022061035e36600461251a565b6108ad565b6101cd6103713660046126e9565b6108f3565b7f0000000000000000000000000000000000000000000000000000000000000000610312565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f979d37f30000000000000000000000000000000000000000000000000000000014806103f257506103f282610e41565b92915050565b60006103f282610ed8565b6104426040518060c00160405280600063ffffffff16815260200160008152602001600081526020016000815260200160608152602001606081525090565b6104548a428b8b8b8b8b8b8b8b610eeb565b9a9950505050505050505050565b6104a16040518060c00160405280600063ffffffff16815260200160008152602001600081526020016000815260200160608152602001606081525090565b6104be89426104b281610e1061277a565b8b8b8b8b8b8b8b610eeb565b9998505050505050505050565b6002600054036105225760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260005560408051602081018590528082018490527fff0000000000000000000000000000000000000000000000000000000000000060f884901b166060820152815180820360410181526061909101909152610581908590611026565b505060016000555050565b6105cb6040518060c00160405280600063ffffffff16815260200160008152602001600081526020016000815260200160608152602001606081525090565b6105dd8b8b8b8b8b8b8b8b8b8b610eeb565b9b9a5050505050505050505050565b61062b6040518060c00160405280600063ffffffff16815260200160008152602001600081526020016000815260200160608152602001606081525090565b610645864261063c81610e1061277a565b888888886110b7565b9695505050505050565b60606103f2826111da565b6002600054036106ac5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610519565b60026000819055506106f48383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061102692505050565b5050600160005550565b60608167ffffffffffffffff8111156107195761071961278d565b60405190808252806020026020018201604052801561074c57816020015b60608152602001906001900390816107375790505b50905060005b828110156107ec576107bc30858584818110610770576107706127a3565b905060200281019061078291906127b9565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061170192505050565b8282815181106107ce576107ce6127a3565b602002602001018190525080806107e49061281e565b915050610752565b5092915050565b6108326040518060c00160405280600063ffffffff16815260200160008152602001600081526020016000815260200160608152602001606081525090565b610841874288888888886110b7565b979650505050505050565b60408051602081018590528082018490527fff0000000000000000000000000000000000000000000000000000000000000060f884901b1660608201528151808203604101815260619091019091526108a6908590611726565b5050505050565b6108ed8383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061172692505050565b50505050565b6109326040518060c00160405280600063ffffffff16815260200160008152602001600081526020016000815260200160608152602001606081525090565b610941888888888888886110b7565b98975050505050505050565b6060600061095e60808401846127b9565b81019061096b9190612910565b60a001519392505050565b60008061098660808401846127b9565b8101906109939190612910565b519392505050565b60006109aa60808301836127b9565b8101906109b79190612910565b8051604082015160608301516080840151939450610a2a936001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001693927f0000000000000000000000000000000000000000000000000000000000000000926000199283929190610b61565b602081015115610a915780516020820151610a91916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f000000000000000000000000000000000000000000000000000000000000000090610da0565b5050565b60606000610aa660808401846127b9565b810190610ab391906129bd565b604001519392505050565b600080610ace60808401846127b9565b81019061099391906129bd565b6000610aea60808301836127b9565b810190610af791906129bd565b602081015190915015610a915780516020820151610a91916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f000000000000000000000000000000000000000000000000000000000000000090610da0565b6040517f7ecebe000000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152600091908a1690637ecebe0090602401602060405180830381865afa158015610bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be89190612a5b565b6040517fd505accf0000000000000000000000000000000000000000000000000000000081526001600160a01b038a811660048301528981166024830152604482018990526064820188905260ff8716608483015260a4820186905260c48201859052919250908a169063d505accf9060e401600060405180830381600087803b158015610c7557600080fd5b505af1158015610c89573d6000803e3d6000fd5b50506040517f7ecebe000000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152600093508c169150637ecebe0090602401602060405180830381865afa158015610cef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d139190612a5b565b9050610d2082600161277a565b8114610d945760405162461bcd60e51b815260206004820152602160248201527f5361666545524332303a207065726d697420646964206e6f742073756363656560448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610519565b50505050505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526108ed90859061184e565b6060610e378484600085611938565b90505b9392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f4c32b3500000000000000000000000000000000000000000000000000000000014806103f257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146103f2565b60006103f2610ee6836111da565b611a75565b610f2a6040518060c00160405280600063ffffffff16815260200160008152602001600081526020016000815260200160608152602001606081525090565b6040518060c001604052807fa681b7637c5ed2feda69f41cc9a534ac17fcd118d80d10db879b348157ebd93460e01c63ffffffff1681526020018c81526020018b81526020018a81526020016040518060c001604052808b6001600160a01b031681526020018a81526020018960ff16815260200188815260200187815260200186868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050915250604051610ff39190602001612a74565b60408051601f1981840301815291815290825280516020818101909252600081529101529b9a5050505050505050505050565b60006110328383611726565b600081815260026020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055905061107483611ab0565b807fd193a54dd0b0b5884cffc665f0803faa8d7f44280881b0a277878158bebd4c5d336040516001600160a01b03909116815260200160405180910390a2505050565b6110f66040518060c00160405280600063ffffffff16815260200160008152602001600081526020016000815260200160608152602001606081525090565b6040518060c001604052807ff7d719823c8a23d19efc4eacc1963ff9c7d7bcf57ddbb5747243f182c5dc0b4e60e01c63ffffffff1681526020018981526020018881526020018781526020016040518060600160405280886001600160a01b0316815260200187815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152506040516111aa9190602001612acd565b60408051601f19818403018152918152908252805160208181019092526000815291015298975050505050505050565b60606111e582611aff565b6040516020016111f59190612b05565b60408051601f198184030181529190526112126020840184612b2a565b6040517f6900a3ae00000000000000000000000000000000000000000000000000000000815263ffffffff909116600482015273__$6c26b6356be7587ae5a263a1ef0d5ec208$__90636900a3ae90602401600060405180830381865af4158015611281573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112a99190810190612b50565b6040516020016112b99190612bbe565b60408051808303601f19018152908290527f6900a3ae000000000000000000000000000000000000000000000000000000008252602085013560048301529073__$6c26b6356be7587ae5a263a1ef0d5ec208$__90636900a3ae90602401600060405180830381865af4158015611334573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261135c9190810190612b50565b60405160200161136c9190612c0e565b60408051808303601f190181528282527f4b2dd5190000000000000000000000000000000000000000000000000000000083529086013564ffffffffff1660048301529073__$6c26b6356be7587ae5a263a1ef0d5ec208$__90634b2dd51990602401600060405180830381865af41580156113ec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114149190810190612b50565b6040516020016114249190612c5e565b60408051808303601f19018152908290527f4b2dd519000000000000000000000000000000000000000000000000000000008252606087013564ffffffffff1660048301529073__$6c26b6356be7587ae5a263a1ef0d5ec208$__90634b2dd51990602401600060405180830381865af41580156114a6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114ce9190810190612b50565b6040516020016114de9190612cae565b60408051601f198184030181529190526114fb60808801886127b9565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040517f71aad10d00000000000000000000000000000000000000000000000000000000815273__$6c26b6356be7587ae5a263a1ef0d5ec208$__936371aad10d935061157e925090600401612507565b600060405180830381865af415801561159b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115c39190810190612b50565b6040516020016115d39190612ce6565b60408051601f198184030181529190526115f060a08901896127b9565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040517f71aad10d00000000000000000000000000000000000000000000000000000000815273__$6c26b6356be7587ae5a263a1ef0d5ec208$__936371aad10d9350611673925090600401612507565b600060405180830381865af4158015611690573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116b89190810190612b50565b6040516020016116c89190612d36565b60408051601f19818403018152908290526116eb97969594939291602001612d7b565b6040516020818303038152906040529050919050565b6060610e3a8383604051806060016040528060278152602001612f7260279139611b39565b6000826040013542101561176c57604080517fb27ee6fc000000000000000000000000000000000000000000000000000000008152908401356004820152602401610519565b42836060013510156117b0576040517ff80dbaea00000000000000000000000000000000000000000000000000000000815260608401356004820152602401610519565b6117b983610ed8565b60008181526002602052604090205490915060ff1615611805576040517f86a77a9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61181861181184611c23565b8284611c68565b6103f2576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006118a3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e289092919063ffffffff16565b80519091501561193357808060200190518101906118c19190612e42565b6119335760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610519565b505050565b6060824710156119b05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610519565b6001600160a01b0385163b611a075760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610519565b600080866001600160a01b03168587604051611a239190612e64565b60006040518083038185875af1925050503d8060008114611a60576040519150601f19603f3d011682016040523d82523d6000602084013e611a65565b606091505b5091509150610841828286611def565b6000611a818251611e28565b82604051602001611a93929190612e80565b604051602081830303815290604052805190602001209050919050565b611afc8160016000611ac56020840184612b2a565b63ffffffff908116825260208201929092526040016000205470010000000000000000000000000000000090048015612097021716565b50565b60606103f28260016000611b166020840184612b2a565b63ffffffff90811682526020820192909252604001600020546120978115021716565b60606001600160a01b0384163b611bb85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610519565b600080856001600160a01b031685604051611bd39190612e64565b600060405180830381855af49150503d8060008114611c0e576040519150601f19603f3d011682016040523d82523d6000602084013e611c13565b606091505b5091509150610645828286611def565b60006103f282600183611c396020840184612b2a565b63ffffffff90811682526020820192909252604001600020546801000000000000000090048015612097021716565b6000806000611c778585611f65565b90925090506000816004811115611c9057611c90612edb565b148015611cae5750856001600160a01b0316826001600160a01b0316145b15611cbe57600192505050610e3a565b600080876001600160a01b0316631626ba7e60e01b8888604051602401611ce6929190612ef1565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051611d519190612e64565b600060405180830381855afa9150503d8060008114611d8c576040519150601f19603f3d011682016040523d82523d6000602084013e611d91565b606091505b5091509150818015611da4575080516020145b8015610941575080517f1626ba7e0000000000000000000000000000000000000000000000000000000090611de29083016020908101908401612a5b565b1498975050505050505050565b60608315611dfe575081610e3a565b825115611e0e5782518084602001fd5b8160405162461bcd60e51b81526004016105199190612507565b606081600003611e6b57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115611e955780611e7f8161281e565b9150611e8e9050600a83612f20565b9150611e6f565b60008167ffffffffffffffff811115611eb057611eb061278d565b6040519080825280601f01601f191660200182016040528015611eda576020820181803683370190505b5090505b8415611f5d57611eef600183612f34565b9150611efc600a86612f47565b611f0790603061277a565b60f81b818381518110611f1c57611f1c6127a3565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611f56600a86612f20565b9450611ede565b949350505050565b6000808251604103611f9b5760208301516040840151606085015160001a611f8f87828585611faa565b94509450505050611fa3565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611fe1575060009050600361208e565b8460ff16601b14158015611ff957508460ff16601c14155b1561200a575060009050600461208e565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561205e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166120875760006001925092505061208e565b9150600090505b94509492505050565b61209f612f5b565b565b6000602082840312156120b357600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610e3a57600080fd5b600060c082840312156120f557600080fd5b50919050565b60006020828403121561210d57600080fd5b813567ffffffffffffffff81111561212457600080fd5b611f5d848285016120e3565b80356001600160a01b038116811461214757600080fd5b919050565b803560ff8116811461214757600080fd5b60008083601f84011261216f57600080fd5b50813567ffffffffffffffff81111561218757600080fd5b602083019150836020828501011115611fa357600080fd5b60008060008060008060008060006101008a8c0312156121be57600080fd5b8935985060208a013597506121d560408b01612130565b965060608a013595506121ea60808b0161214c565b945060a08a0135935060c08a0135925060e08a013567ffffffffffffffff81111561221457600080fd5b6122208c828d0161215d565b915080935050809150509295985092959850929598565b60005b8381101561225257818101518382015260200161223a565b50506000910152565b60008151808452612273816020860160208601612237565b601f01601f19169290920160200192915050565b6020815263ffffffff82511660208201526020820151604082015260408201516060820152606082015160808201526000608083015160c060a08401526122d160e084018261225b565b905060a0840151601f198483030160c08501526122ee828261225b565b95945050505050565b60008060008060008060008060e0898b03121561231357600080fd5b8835975061232360208a01612130565b96506040890135955061233860608a0161214c565b94506080890135935060a0890135925060c089013567ffffffffffffffff81111561236257600080fd5b61236e8b828c0161215d565b999c989b5096995094979396929594505050565b6000806000806080858703121561239857600080fd5b843567ffffffffffffffff8111156123af57600080fd5b6123bb878288016120e3565b94505060208501359250604085013591506123d86060860161214c565b905092959194509250565b6000806000806000806000806000806101208b8d03121561240357600080fd5b8a35995060208b0135985060408b0135975061242160608c01612130565b965060808b0135955061243660a08c0161214c565b945060c08b0135935060e08b013592506101008b013567ffffffffffffffff81111561246157600080fd5b61246d8d828e0161215d565b915080935050809150509295989b9194979a5092959850565b60006020828403121561249857600080fd5b5035919050565b6000806000806000608086880312156124b757600080fd5b853594506124c760208701612130565b935060408601359250606086013567ffffffffffffffff8111156124ea57600080fd5b6124f68882890161215d565b969995985093965092949392505050565b602081526000610e3a602083018461225b565b60008060006040848603121561252f57600080fd5b833567ffffffffffffffff8082111561254757600080fd5b612553878388016120e3565b9450602086013591508082111561256957600080fd5b506125768682870161215d565b9497909650939450505050565b6000806020838503121561259657600080fd5b823567ffffffffffffffff808211156125ae57600080fd5b818501915085601f8301126125c257600080fd5b8135818111156125d157600080fd5b8660208260051b85010111156125e657600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561266b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261265985835161225b565b9450928501929085019060010161261f565b5092979650505050505050565b60008060008060008060a0878903121561269157600080fd5b86359550602087013594506126a860408801612130565b935060608701359250608087013567ffffffffffffffff8111156126cb57600080fd5b6126d789828a0161215d565b979a9699509497509295939492505050565b600080600080600080600060c0888a03121561270457600080fd5b87359650602088013595506040880135945061272260608901612130565b93506080880135925060a088013567ffffffffffffffff81111561274557600080fd5b6127518a828b0161215d565b989b979a50959850939692959293505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156103f2576103f2612764565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126127ee57600080fd5b83018035915067ffffffffffffffff82111561280957600080fd5b602001915036819003821315611fa357600080fd5b6000600019820361283157612831612764565b5060010190565b60405160c0810167ffffffffffffffff8111828210171561285b5761285b61278d565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561288a5761288a61278d565b604052919050565b600067ffffffffffffffff8211156128ac576128ac61278d565b50601f01601f191660200190565b600082601f8301126128cb57600080fd5b81356128de6128d982612892565b612861565b8181528460208386010111156128f357600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561292257600080fd5b813567ffffffffffffffff8082111561293a57600080fd5b9083019060c0828603121561294e57600080fd5b612956612838565b61295f83612130565b8152602083013560208201526129776040840161214c565b6040820152606083013560608201526080830135608082015260a0830135828111156129a257600080fd5b6129ae878286016128ba565b60a08301525095945050505050565b6000602082840312156129cf57600080fd5b813567ffffffffffffffff808211156129e757600080fd5b90830190606082860312156129fb57600080fd5b604051606081018181108382111715612a1657612a1661278d565b604052612a2283612130565b815260208301356020820152604083013582811115612a4057600080fd5b612a4c878286016128ba565b60408301525095945050505050565b600060208284031215612a6d57600080fd5b5051919050565b602081526001600160a01b0382511660208201526020820151604082015260ff604083015116606082015260608201516080820152608082015160a0820152600060a083015160c080840152611f5d60e084018261225b565b602081526001600160a01b0382511660208201526020820151604082015260006040830151606080840152611f5d608084018261225b565b60008251612b17818460208701612237565b600560f91b920191825250600101919050565b600060208284031215612b3c57600080fd5b813563ffffffff81168114610e3a57600080fd5b600060208284031215612b6257600080fd5b815167ffffffffffffffff811115612b7957600080fd5b8201601f81018413612b8a57600080fd5b8051612b986128d982612892565b818152856020838501011115612bad57600080fd5b6122ee826020830160208601612237565b7f7461673a20000000000000000000000000000000000000000000000000000000815260008251612bf6816005850160208701612237565b600560f91b6005939091019283015250600601919050565b7f6e6f6e63653a2000000000000000000000000000000000000000000000000000815260008251612c46816007850160208701612237565b600560f91b6007939091019283015250600801919050565b7f76616c69642073696e63653a2000000000000000000000000000000000000000815260008251612c9681600d850160208701612237565b600560f91b600d939091019283015250600e01919050565b7f76616c696420756e74696c3a2000000000000000000000000000000000000000815260008251612c9681600d850160208701612237565b7f7061796c6f61643a200000000000000000000000000000000000000000000000815260008251612d1e816009850160208701612237565b600560f91b6009939091019283015250600a01919050565b7f6d657461646174613a2000000000000000000000000000000000000000000000815260008251612d6e81600a850160208701612237565b91909101600a0192915050565b600088516020612d8e8285838e01612237565b81840191507f2d2d2d0a00000000000000000000000000000000000000000000000000000000825260048a51612dc981838601858f01612237565b8a51930192612ddd81838601858e01612237565b8951930192612df181838601858d01612237565b8851930192612e0581838601858c01612237565b8751930192612e1981838601858b01612237565b8651930192612e2d81838601858a01612237565b929092019091019a9950505050505050505050565b600060208284031215612e5457600080fd5b81518015158114610e3a57600080fd5b60008251612e76818460208701612237565b9190910192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a000000000000815260008351612eb881601a850160208801612237565b835190830190612ecf81601a840160208801612237565b01601a01949350505050565b634e487b7160e01b600052602160045260246000fd5b828152604060208201526000610e37604083018461225b565b634e487b7160e01b600052601260045260246000fd5b600082612f2f57612f2f612f0a565b500490565b818103818111156103f2576103f2612764565b600082612f5657612f56612f0a565b500690565b634e487b7160e01b600052605160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220baef73bfb0744f7baed3bebd7058c3c9f7a66417a3e6a3997c174db206c54a5464736f6c63430008110033",
  "libraries": {
    "ToString": "0x1b6286EBdFeba70A8579E987A46Ee00cC7370572"
  },
  "devdoc": {
    "errors": {
      "Expired(uint256)": [
        {
          "params": {
            "validUntil": "The maximum block timestamp this voucher was valid until"
          }
        }
      ],
      "NotYetActive(uint256)": [
        {
          "params": {
            "validSince": "The minimum block timestamp this voucher will be valid since"
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "buildPermitAndPurchaseVoucher(uint256,address,uint256,uint8,bytes32,bytes32,string)": {
        "params": {
          "amount": "Amount to use",
          "from": "Transfer origin to use",
          "message": "Message to use",
          "nonce": "Nonce to use",
          "r": "The permit's signature \"r\" value",
          "s": "The permit's signature \"s\" value",
          "v": "The permit's signature \"v\" value"
        },
        "returns": {
          "voucher": " The generated voucher"
        }
      },
      "buildPermitAndPurchaseVoucher(uint256,uint256,address,uint256,uint8,bytes32,bytes32,string)": {
        "params": {
          "amount": "Amount to use",
          "from": "Transfer origin to use",
          "message": "Message to use",
          "nonce": "Nonce to use",
          "r": "The permit's signature \"r\" value",
          "s": "The permit's signature \"s\" value",
          "v": "The permit's signature \"v\" value",
          "validUntil": "Voucher validUntil to use"
        },
        "returns": {
          "voucher": " The generated voucher"
        }
      },
      "buildPermitAndPurchaseVoucher(uint256,uint256,uint256,address,uint256,uint8,bytes32,bytes32,string)": {
        "params": {
          "amount": "Amount to use",
          "from": "Transfer origin to use",
          "message": "Message to use",
          "nonce": "Nonce to use",
          "r": "The permit's signature \"r\" value",
          "s": "The permit's signature \"s\" value",
          "v": "The permit's signature \"v\" value",
          "validSince": "Voucher validSince to use",
          "validUntil": "Voucher validUntil to use"
        },
        "returns": {
          "voucher": " The generated voucher"
        }
      },
      "buildPurchaseVoucher(uint256,address,uint256,string)": {
        "params": {
          "amount": "Amount to use",
          "from": "Transfer origin to use",
          "message": "Message to use",
          "nonce": "Nonce to use"
        },
        "returns": {
          "voucher": " The generated voucher"
        }
      },
      "buildPurchaseVoucher(uint256,uint256,address,uint256,string)": {
        "params": {
          "amount": "Amount to use",
          "from": "Transfer origin to use",
          "message": "Message to use",
          "nonce": "Nonce to use",
          "validUntil": "Voucher validUntil to use"
        },
        "returns": {
          "voucher": " The generated voucher"
        }
      },
      "buildPurchaseVoucher(uint256,uint256,uint256,address,uint256,string)": {
        "params": {
          "amount": "Amount to use",
          "from": "Transfer origin to use",
          "message": "Message to use",
          "nonce": "Nonce to use",
          "validSince": "Voucher validSince to use",
          "validUntil": "Voucher validUntil to use"
        },
        "returns": {
          "voucher": " The generated voucher"
        }
      },
      "constructor": {
        "params": {
          "theDestination": "Configured destination for transfers",
          "theToken": "Underlying ERC20 token"
        }
      },
      "destination()": {
        "returns": {
          "theDestination": " The address of the configured destination"
        }
      },
      "hashVoucher((uint32,uint256,uint256,uint256,bytes,bytes))": {
        "params": {
          "voucher": "The voucher to retrieve the hash for"
        },
        "returns": {
          "voucherHash": " The voucher hash associated to the given voucher"
        }
      },
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "serveVoucher((uint32,uint256,uint256,uint256,bytes,bytes),bytes)": {
        "custom:emit": "VoucherServed",
        "params": {
          "signature": "The associated voucher signature",
          "voucher": "The voucher to serve"
        }
      },
      "serveVoucher((uint32,uint256,uint256,uint256,bytes,bytes),bytes32,bytes32,uint8)": {
        "custom:emit": "VoucherServed",
        "params": {
          "r": "The \"r\" component of the associated voucher signature",
          "s": "The \"s\" component of the associated voucher signature",
          "v": "The \"v\" component of the associated voucher signature",
          "voucher": "The voucher to serve"
        }
      },
      "stringifyVoucher((uint32,uint256,uint256,uint256,bytes,bytes))": {
        "params": {
          "voucher": "The voucher to stringify"
        },
        "returns": {
          "voucherString": " The string representation to be signed of the given voucher"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "Interface ID to check against"
        },
        "returns": {
          "_0": "Whether the provided interface ID is supported"
        }
      },
      "token()": {
        "returns": {
          "theToken": " The address of the underlying ERC20 token"
        }
      },
      "validateVoucher((uint32,uint256,uint256,uint256,bytes,bytes),bytes)": {
        "params": {
          "signature": "The associated voucher signature",
          "voucher": "The voucher to validate"
        }
      },
      "validateVoucher((uint32,uint256,uint256,uint256,bytes,bytes),bytes32,bytes32,uint8)": {
        "params": {
          "r": "The \"r\" component of the associated voucher signature",
          "s": "The \"s\" component of the associated voucher signature",
          "v": "The \"v\" component of the associated voucher signature",
          "voucher": "The voucher to validate"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AlreadyServed()": [
        {
          "notice": "Raised upon encountering an already served voucher"
        }
      ],
      "Expired(uint256)": [
        {
          "notice": "Raised upon encountering a voucher that has already expired"
        }
      ],
      "InvalidSignature()": [
        {
          "notice": "Raised upon encountering a voucher with an invalid signature"
        }
      ],
      "NotYetActive(uint256)": [
        {
          "notice": "Raised upon encountering a voucher that is not yet active"
        }
      ]
    },
    "events": {
      "VoucherServed(bytes32,address)": {
        "notice": "Emitted upon a voucher being served"
      }
    },
    "kind": "user",
    "methods": {
      "VOUCHER_TYPEHASH()": {
        "notice": "Return the typehash associated to the Gateway Voucher itself"
      },
      "buildPermitAndPurchaseVoucher(uint256,address,uint256,uint8,bytes32,bytes32,string)": {
        "notice": "Build a PermitAndPurchaseVoucher from the given parameters"
      },
      "buildPermitAndPurchaseVoucher(uint256,uint256,address,uint256,uint8,bytes32,bytes32,string)": {
        "notice": "Build a PermitAndPurchaseVoucher from the given parameters"
      },
      "buildPermitAndPurchaseVoucher(uint256,uint256,uint256,address,uint256,uint8,bytes32,bytes32,string)": {
        "notice": "Build a PermitAndPurchaseVoucher from the given parameters"
      },
      "buildPurchaseVoucher(uint256,address,uint256,string)": {
        "notice": "Build a PurchaseVoucher from the given parameters"
      },
      "buildPurchaseVoucher(uint256,uint256,address,uint256,string)": {
        "notice": "Build a PurchaseVoucher from the given parameters"
      },
      "buildPurchaseVoucher(uint256,uint256,uint256,address,uint256,string)": {
        "notice": "Build a PurchaseVoucher from the given parameters"
      },
      "constructor": {
        "notice": "Build a new ERC20Gateway from the given token address"
      },
      "destination()": {
        "notice": "Retrieve the address of the configured destination"
      },
      "hashVoucher((uint32,uint256,uint256,uint256,bytes,bytes))": {
        "notice": "Return the voucher hash associated to the given voucher"
      },
      "serveVoucher((uint32,uint256,uint256,uint256,bytes,bytes),bytes)": {
        "notice": "Serve the given voucher, by forwarding to the appropriate handler for the voucher's tag"
      },
      "serveVoucher((uint32,uint256,uint256,uint256,bytes,bytes),bytes32,bytes32,uint8)": {
        "notice": "Serve the given voucher, by forwarding to the appropriate handler for the voucher's tag"
      },
      "stringifyVoucher((uint32,uint256,uint256,uint256,bytes,bytes))": {
        "notice": "Return the string representation to be signed for a given Voucher"
      },
      "supportsInterface(bytes4)": {
        "notice": "Implementation of the IERC165 interface"
      },
      "token()": {
        "notice": "Retrieve the address of the underlying ERC20 token"
      },
      "validateVoucher((uint32,uint256,uint256,uint256,bytes,bytes),bytes)": {
        "notice": "Validate the given voucher against the given signature"
      },
      "validateVoucher((uint32,uint256,uint256,uint256,bytes,bytes),bytes32,bytes32,uint8)": {
        "notice": "Validate the given voucher against the given signature, by the given signer"
      },
      "voucherServed(bytes32)": {
        "notice": "Determine whether the given voucher hash has been already served"
      }
    },
    "notice": "Bar gateway implementation",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3251,
        "contract": "contracts/BarGateway.sol:BarGateway",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 441,
        "contract": "contracts/BarGateway.sol:BarGateway",
        "label": "voucherHandler",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_struct(HandlerEntry)436_storage)"
      },
      {
        "astId": 452,
        "contract": "contracts/BarGateway.sol:BarGateway",
        "label": "voucherServed",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_function_internal_nonpayable(t_struct(Voucher)959_calldata_ptr)returns()": {
        "encoding": "inplace",
        "label": "function (struct IGateway.Voucher)",
        "numberOfBytes": "8"
      },
      "t_function_internal_view(t_struct(Voucher)959_calldata_ptr)returns(t_address)": {
        "encoding": "inplace",
        "label": "function (struct IGateway.Voucher) view returns (address)",
        "numberOfBytes": "8"
      },
      "t_function_internal_view(t_struct(Voucher)959_calldata_ptr)returns(t_string_memory_ptr)": {
        "encoding": "inplace",
        "label": "function (struct IGateway.Voucher) view returns (string)",
        "numberOfBytes": "8"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint32,t_struct(HandlerEntry)436_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct Gateway.HandlerEntry)",
        "numberOfBytes": "32",
        "value": "t_struct(HandlerEntry)436_storage"
      },
      "t_struct(HandlerEntry)436_storage": {
        "encoding": "inplace",
        "label": "struct Gateway.HandlerEntry",
        "members": [
          {
            "astId": 419,
            "contract": "contracts/BarGateway.sol:BarGateway",
            "label": "message",
            "offset": 0,
            "slot": "0",
            "type": "t_function_internal_view(t_struct(Voucher)959_calldata_ptr)returns(t_string_memory_ptr)"
          },
          {
            "astId": 428,
            "contract": "contracts/BarGateway.sol:BarGateway",
            "label": "signer",
            "offset": 8,
            "slot": "0",
            "type": "t_function_internal_view(t_struct(Voucher)959_calldata_ptr)returns(t_address)"
          },
          {
            "astId": 435,
            "contract": "contracts/BarGateway.sol:BarGateway",
            "label": "execute",
            "offset": 16,
            "slot": "0",
            "type": "t_function_internal_nonpayable(t_struct(Voucher)959_calldata_ptr)returns()"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
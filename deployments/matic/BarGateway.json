{
  "address": "0xe3E8cd619bA9CD37B6bAD1740d7afAcF58b570ad",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_peronio",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "voucherHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "VoucherServed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERMIT_VOUCHER_TAG",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSFER_FROM_VOUCHER_TAG",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOUCHER_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "permitDeadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        }
      ],
      "name": "buildPermitVoucher",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "permitDeadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        }
      ],
      "name": "buildPermitVoucher",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "permitDeadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "buildPermitVoucher",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "permitDeadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "buildPermitVoucher",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buildTransferFromVoucher",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buildTransferFromVoucher",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        }
      ],
      "name": "buildTransferFromVoucher",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        }
      ],
      "name": "buildTransferFromVoucher",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        }
      ],
      "name": "hashVoucher",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "voucherHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "serveVoucher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "serveVoucher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        }
      ],
      "name": "stringifyVoucher",
      "outputs": [
        {
          "internalType": "string",
          "name": "voucherString",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "validateVoucher",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tag",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct IGateway.Voucher",
          "name": "voucher",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "validateVoucher",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "voucherServed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e149a654eb742ec9fb483cb3f9a5ec30f572c81f43fff1c8f548891e87057c0",
  "receipt": {
    "to": null,
    "from": "0x4BADCf0DCeaAD060f86D9b34c9E118c8319945AE",
    "contractAddress": "0xe3E8cd619bA9CD37B6bAD1740d7afAcF58b570ad",
    "transactionIndex": 48,
    "gasUsed": "3381465",
    "logsBloom": "0x
    "blockHash": "0xf0dd8c081364815eb564b3030d713170774d5b838fec14aef94c4b0b79cd8420",
    "transactionHash": "0x1e149a654eb742ec9fb483cb3f9a5ec30f572c81f43fff1c8f548891e87057c0",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 34301796,
        "transactionHash": "0x1e149a654eb742ec9fb483cb3f9a5ec30f572c81f43fff1c8f548891e87057c0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004badcf0dceaad060f86d9b34c9e118c8319945ae",
          "0x00000000000000000000000026c80cc193b27d73d2c40943acec77f4da2c5bd8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001751206e2c56257000000000000000000000000000000000000000000000000db3eea06d9dae65b000000000000000000000000000000000000000000005e2aa16f8f9a0674e76f000000000000000000000000000000000000000000000000d9c9d7fff7158404000000000000000000000000000000000000000000005e2aa2e4a1a0e93a49c6",
        "logIndex": 187,
        "blockHash": "0xf0dd8c081364815eb564b3030d713170774d5b838fec14aef94c4b0b79cd8420"
      }
    ],
    "blockNumber": 34301796,
    "cumulativeGasUsed": "10282161",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x78a486306D15E7111cca541F2f1307a1cFCaF5C4"
  ],
  "numDeployments": 1,
  "solcInputHash": "1182a3d2c1bbee992e9c52287ae9d73e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_peronio\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"voucherHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"VoucherServed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERMIT_VOUCHER_TAG\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_FROM_VOUCHER_TAG\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOUCHER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permitDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"buildPermitVoucher\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permitDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"buildPermitVoucher\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permitDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"buildPermitVoucher\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permitDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"buildPermitVoucher\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buildTransferFromVoucher\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buildTransferFromVoucher\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"buildTransferFromVoucher\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"buildTransferFromVoucher\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"}],\"name\":\"hashVoucher\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"voucherHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"serveVoucher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"serveVoucher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"}],\"name\":\"stringifyVoucher\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"voucherString\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"validateVoucher\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IGateway.Voucher\",\"name\":\"voucher\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"validateVoucher\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"voucherServed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buildPermitVoucher(uint256,address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"nonce\":\"Nonce to use\",\"owner\":\"Permit owner address to use\",\"permitDeadline\":\"Permit deadline to use\",\"r\":\"Permit's signature \\\"r\\\" component to use\",\"s\":\"Permit's signature \\\"s\\\" component to use\",\"spender\":\"Permit spender address to use\",\"v\":\"Permit's signature \\\"v\\\" component to use\",\"value\":\"Permit amount to use\"},\"returns\":{\"voucher\":\" The generated voucher\"}},\"buildPermitVoucher(uint256,address,address,uint256,uint256,uint8,bytes32,bytes32,bytes)\":{\"params\":{\"metadata\":\"Voucher metadata to use\",\"nonce\":\"Nonce to use\",\"owner\":\"Permit owner address to use\",\"permitDeadline\":\"Permit deadline to use\",\"r\":\"Permit's signature \\\"r\\\" component to use\",\"s\":\"Permit's signature \\\"s\\\" component to use\",\"spender\":\"Permit spender address to use\",\"v\":\"Permit's signature \\\"v\\\" component to use\",\"value\":\"Permit amount to use\"},\"returns\":{\"voucher\":\" The generated voucher\"}},\"buildPermitVoucher(uint256,uint256,address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"Voucher deadline to use\",\"nonce\":\"Nonce to use\",\"owner\":\"Permit owner address to use\",\"permitDeadline\":\"Permit deadline to use\",\"r\":\"Permit's signature \\\"r\\\" component to use\",\"s\":\"Permit's signature \\\"s\\\" component to use\",\"spender\":\"Permit spender address to use\",\"v\":\"Permit's signature \\\"v\\\" component to use\",\"value\":\"Permit amount to use\"},\"returns\":{\"voucher\":\" The generated voucher\"}},\"buildPermitVoucher(uint256,uint256,address,address,uint256,uint256,uint8,bytes32,bytes32,bytes)\":{\"params\":{\"deadline\":\"Voucher deadline to use\",\"metadata\":\"Voucher metadata to use\",\"nonce\":\"Nonce to use\",\"owner\":\"Permit owner address to use\",\"permitDeadline\":\"Permit deadline to use\",\"r\":\"Permit's signature \\\"r\\\" component to use\",\"s\":\"Permit's signature \\\"s\\\" component to use\",\"spender\":\"Permit spender address to use\",\"v\":\"Permit's signature \\\"v\\\" component to use\",\"value\":\"Permit amount to use\"},\"returns\":{\"voucher\":\" The generated voucher\"}},\"buildTransferFromVoucher(uint256,address,address,uint256)\":{\"params\":{\"amount\":\"Transfer amount to use\",\"from\":\"Transfer origin to use\",\"nonce\":\"Nonce to use\",\"to\":\"Transfer destination to use\"},\"returns\":{\"voucher\":\" The generated voucher\"}},\"buildTransferFromVoucher(uint256,address,address,uint256,bytes)\":{\"params\":{\"amount\":\"Transfer amount to use\",\"from\":\"Transfer origin to use\",\"metadata\":\"Voucher metadata to use\",\"nonce\":\"Nonce to use\",\"to\":\"Transfer destination to use\"},\"returns\":{\"voucher\":\" The generated voucher\"}},\"buildTransferFromVoucher(uint256,uint256,address,address,uint256)\":{\"params\":{\"amount\":\"Transfer amount to use\",\"deadline\":\"Voucher deadline to use\",\"from\":\"Transfer origin to use\",\"nonce\":\"Nonce to use\",\"to\":\"Transfer destination to use\"},\"returns\":{\"voucher\":\" The generated voucher\"}},\"buildTransferFromVoucher(uint256,uint256,address,address,uint256,bytes)\":{\"params\":{\"amount\":\"Transfer amount to use\",\"deadline\":\"Voucher deadline to use\",\"from\":\"Transfer origin to use\",\"metadata\":\"Voucher metadata to use\",\"nonce\":\"Nonce to use\",\"to\":\"Transfer destination to use\"},\"returns\":{\"voucher\":\" The generated voucher\"}},\"hashVoucher((uint32,uint256,uint256,bytes,bytes))\":{\"params\":{\"voucher\":\"The voucher to retrieve the hash for\"},\"returns\":{\"voucherHash\":\" The voucher hash associated to the given voucher\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"serveVoucher((uint32,uint256,uint256,bytes,bytes),bytes)\":{\"custom:emit\":\"VoucherServed\",\"params\":{\"signature\":\"The associated voucher signature\",\"voucher\":\"The voucher to serve\"}},\"serveVoucher((uint32,uint256,uint256,bytes,bytes),bytes32,bytes32,uint8)\":{\"custom:emit\":\"VoucherServed\",\"params\":{\"r\":\"The \\\"r\\\" component of the associated voucher signature\",\"s\":\"The \\\"s\\\" component of the associated voucher signature\",\"v\":\"The \\\"v\\\" component of the associated voucher signature\",\"voucher\":\"The voucher to serve\"}},\"stringifyVoucher((uint32,uint256,uint256,bytes,bytes))\":{\"params\":{\"voucher\":\"The voucher to stringify\"},\"returns\":{\"voucherString\":\" The string representation to be signed of the given voucher\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"Interface ID to check against\"},\"returns\":{\"_0\":\"Whether the provided interface ID is supported\"}},\"validateVoucher((uint32,uint256,uint256,bytes,bytes),bytes)\":{\"params\":{\"signature\":\"The associated voucher signature\",\"voucher\":\"The voucher to validate\"}},\"validateVoucher((uint32,uint256,uint256,bytes,bytes),bytes32,bytes32,uint8)\":{\"params\":{\"r\":\"The \\\"r\\\" component of the associated voucher signature\",\"s\":\"The \\\"s\\\" component of the associated voucher signature\",\"v\":\"The \\\"v\\\" component of the associated voucher signature\",\"voucher\":\"The voucher to validate\"}}},\"version\":1},\"userdoc\":{\"events\":{\"VoucherServed(bytes32,address)\":{\"notice\":\"Emitted upon a voucher being served\"}},\"kind\":\"user\",\"methods\":{\"PERMIT_VOUCHER_TAG()\":{\"notice\":\"Return the tag associated to the PermitVoucher voucher itself\"},\"TRANSFER_FROM_VOUCHER_TAG()\":{\"notice\":\"Return the tag associated to the TransferFromVoucher voucher itself\"},\"VOUCHER_TYPEHASH()\":{\"notice\":\"Return the typehash associated to the Gateway Voucher itself\"},\"buildPermitVoucher(uint256,address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Build a PermitVoucher from the given parameters\"},\"buildPermitVoucher(uint256,address,address,uint256,uint256,uint8,bytes32,bytes32,bytes)\":{\"notice\":\"Build a PermitVoucher from the given parameters\"},\"buildPermitVoucher(uint256,uint256,address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Build a PermitVoucher from the given parameters\"},\"buildPermitVoucher(uint256,uint256,address,address,uint256,uint256,uint8,bytes32,bytes32,bytes)\":{\"notice\":\"Build a PermitVoucher from the given parameters\"},\"buildTransferFromVoucher(uint256,address,address,uint256)\":{\"notice\":\"Build a TransferFromVoucher from the given parameters\"},\"buildTransferFromVoucher(uint256,address,address,uint256,bytes)\":{\"notice\":\"Build a TransferFromVoucher from the given parameters\"},\"buildTransferFromVoucher(uint256,uint256,address,address,uint256)\":{\"notice\":\"Build a TransferFromVoucher from the given parameters\"},\"buildTransferFromVoucher(uint256,uint256,address,address,uint256,bytes)\":{\"notice\":\"Build a TransferFromVoucher from the given parameters\"},\"hashVoucher((uint32,uint256,uint256,bytes,bytes))\":{\"notice\":\"Return the voucher hash associated to the given voucher\"},\"serveVoucher((uint32,uint256,uint256,bytes,bytes),bytes)\":{\"notice\":\"Serve the given voucher, by forwarding to the appropriate handler for the voucher's tag\"},\"serveVoucher((uint32,uint256,uint256,bytes,bytes),bytes32,bytes32,uint8)\":{\"notice\":\"Serve the given voucher, by forwarding to the appropriate handler for the voucher's tag\"},\"stringifyVoucher((uint32,uint256,uint256,bytes,bytes))\":{\"notice\":\"Return the string representation to be signed for a given Voucher\"},\"supportsInterface(bytes4)\":{\"notice\":\"Implementation of the IERC165 interface\"},\"token()\":{\"notice\":\"Retrieve the address of the underlying ERC20 token\"},\"validateVoucher((uint32,uint256,uint256,bytes,bytes),bytes)\":{\"notice\":\"Validate the given voucher against the given signature\"},\"validateVoucher((uint32,uint256,uint256,bytes,bytes),bytes32,bytes32,uint8)\":{\"notice\":\"Validate the given voucher against the given signature, by the given signer\"},\"voucherServed(bytes32)\":{\"notice\":\"Determine whether the given voucher hash has been already served\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BarGateway.sol\":\"BarGateway\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@lacrypta/gateway/contracts/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\n// Type used for UNIX epoch quantities\\ntype Epoch is uint40;\\n\\n// Type used to represent \\\"quarters-of-an-hour\\\" (used for timezone offset specification)\\ntype Quarters is int8;\\n\\n/**\\n * Set of parts of a date/time value encoded by a given epoch\\n *\\n * @custom:member year  The year the given epoch encodes\\n * @custom:member month  The month the given epoch encodes\\n * @custom:member day  The day the given epoch encodes\\n * @custom:member hour  The hour the given epoch encodes\\n * @custom:member minute  The minute the given epoch encodes\\n * @custom:member second  The second the given epoch encodes\\n * @custom:member tzHours  The timezone offset hours\\n * @custom:member tzMinutes  The timezone offset minutes (always multiple of 15)\\n */\\nstruct DateTimeParts {\\n    uint256 year;\\n    uint256 month;\\n    uint256 day;\\n    uint256 hour;\\n    uint256 minute;\\n    uint256 second;\\n    int8 tzHours;\\n    uint256 tzMinutes;\\n}\\n\\n/**\\n * Extract the date/time components from the given epoch value\\n *\\n * @param value  The value to extract components from\\n * @return dateTimeParts  The DateTimeParts the given epoch encodes\\n */\\nfunction dateTimeParts(Epoch value) pure returns (DateTimeParts memory) {\\n    return dateTimeParts(value, Quarters.wrap(0));\\n}\\n\\n/**\\n * Extract the date/time components from the given epoch value and timezone offset\\n *\\n * Mostly taken from: https://howardhinnant.github.io/date_algorithms.html#civil_from_days\\n *\\n * @param value  The value to extract components from\\n * @param tzOffset  The number of quarters-of-an-hour to offset\\n * @return dateTimeParts  The DateTimeParts the given epoch encodes\\n */\\nfunction dateTimeParts(Epoch value, Quarters tzOffset) pure returns (DateTimeParts memory) {\\n    unchecked {\\n        require(-48 <= Quarters.unwrap(tzOffset), \\\"Strings: timezone offset too small\\\");\\n        require(Quarters.unwrap(tzOffset) <= 56, \\\"Strings: timezone offset too big\\\");\\n\\n        DateTimeParts memory result;\\n\\n        int256 tzOffsetInSeconds = int256(Quarters.unwrap(tzOffset)) * 900;\\n        uint256 nValue;\\n        if (tzOffsetInSeconds < 0) {\\n            require(uint256(-tzOffsetInSeconds) <= Epoch.unwrap(value), \\\"Strings: epoch time too small for timezone offset\\\");\\n            nValue = Epoch.unwrap(value) - uint256(-tzOffsetInSeconds);\\n        } else {\\n            nValue = Epoch.unwrap(value) + uint256(tzOffsetInSeconds);\\n        }\\n\\n        require(nValue <= 253402311599, \\\"Strings: epoch time too big\\\");\\n\\n        {\\n            uint256 z = nValue / 86400 + 719468;\\n            uint256 era = z / 146097;\\n            uint256 doe = z - era * 146097;\\n            uint256 yoe = (doe - doe / 1460 + doe / 36524 - doe / 146096) / 365;\\n            uint256 doy = doe - (365 * yoe + yoe / 4 - yoe / 100);\\n            uint256 mp = (5 * doy + 2) / 153;\\n            //\\n            result.year = yoe + era * 400 + (mp == 10 || mp == 11 ? 1 : 0);\\n            result.month = mp < 10 ? mp + 3 : mp - 9;\\n            result.day = doy - (153 * mp + 2) / 5 + 1;\\n        }\\n\\n        {\\n            uint256 w = nValue % 86400;\\n            //\\n            result.hour = w / 3600;\\n            result.minute = (w % 3600) / 60;\\n            result.second = w % 60;\\n        }\\n\\n        result.tzHours = int8(tzOffsetInSeconds / 3600);\\n        result.tzMinutes = uint8((uint256(tzOffsetInSeconds < 0 ? -tzOffsetInSeconds : tzOffsetInSeconds) % 3600) / 60);\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x95f6efa54acae419b70bf706968b5f28dc2cfe5400731d9c043ae415b69492b2\",\"license\":\"AGPL-3.0-or-later\"},\"@lacrypta/gateway/contracts/ERC20Gateway.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {Gateway} from \\\"./Gateway.sol\\\";\\nimport {IERC20Gateway} from \\\"./IERC20Gateway.sol\\\";\\n\\nimport {ToString} from \\\"./ToString.sol\\\";\\n\\nabstract contract ERC20Gateway is Gateway, IERC20Gateway {\\n    using SafeERC20 for IERC20;\\n    using ToString for address;\\n    using ToString for uint256;\\n\\n    // address of the underlying ERC20 token\\n    address public immutable override token;\\n\\n    // Tag associated to the TransferFromVoucher\\n    //\\n    // This is computed using the \\\"encodeType\\\" convention laid out in <https://eips.ethereum.org/EIPS/eip-712#definition-of-encodetype>.\\n    // Note that it is not REQUIRED to be so computed, but we do so anyways to minimize encoding conventions.\\n    uint32 public constant TRANSFER_FROM_VOUCHER_TAG =\\n        uint32(bytes4(keccak256(\\\"TransferFromVoucher(address from,address to,uint256 amount)\\\")));\\n\\n    /**\\n     * Build a new ERC20Gateway from the given token address\\n     *\\n     * @param _token  Underlying ERC20 token\\n     */\\n    constructor(address _token) {\\n        token = _token;\\n        _addHandler(TRANSFER_FROM_VOUCHER_TAG, HandlerEntry({\\n            message: _generateTransferFromVoucherMessage,\\n            signer: _extractTransferFromVoucherSigner,\\n            execute: _executeTransferFromVoucher\\n        }));\\n    }\\n\\n    /**\\n     * Implementation of the IERC165 interface\\n     *\\n     * @param interfaceId  Interface ID to check against\\n     * @return  Whether the provided interface ID is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC20Gateway).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * Build a TransferFromVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param deadline  Voucher deadline to use\\n     * @param from  Transfer origin to use\\n     * @param to  Transfer destination to use\\n     * @param amount  Transfer amount to use\\n     * @param metadata  Voucher metadata to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildTransferFromVoucher(uint256 nonce, uint256 deadline, address from, address to, uint256 amount, bytes calldata metadata) external pure override returns (Voucher memory voucher) {\\n        voucher = _buildTransferFromVoucher(nonce, deadline, from, to, amount, metadata);\\n    }\\n\\n    /**\\n     * Build a TransferFromVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param from  Transfer origin to use\\n     * @param to  Transfer destination to use\\n     * @param amount  Transfer amount to use\\n     * @param metadata  Voucher metadata to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildTransferFromVoucher(uint256 nonce, address from, address to, uint256 amount, bytes calldata metadata) external view override returns (Voucher memory voucher) {\\n        voucher = _buildTransferFromVoucher(nonce, block.timestamp + 1 hours, from, to, amount, metadata);\\n    }\\n\\n    /**\\n     * Build a TransferFromVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param deadline  Voucher deadline to use\\n     * @param from  Transfer origin to use\\n     * @param to  Transfer destination to use\\n     * @param amount  Transfer amount to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildTransferFromVoucher(uint256 nonce, uint256 deadline, address from, address to, uint256 amount) external pure override returns (Voucher memory voucher) {\\n        voucher = _buildTransferFromVoucher(nonce, deadline, from, to, amount, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * Build a TransferFromVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param from  Transfer origin to use\\n     * @param to  Transfer destination to use\\n     * @param amount  Transfer amount to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildTransferFromVoucher(uint256 nonce, address from, address to, uint256 amount) external view override returns (Voucher memory voucher) {\\n        voucher = _buildTransferFromVoucher(nonce, block.timestamp + 1 hours, from, to, amount, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * Build a Voucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param deadline  Voucher deadline to use\\n     * @param from  Transfer origin to use\\n     * @param to  Transfer destination to use\\n     * @param amount  Transfer amount to use\\n     * @param metadata  Voucher metadata to use\\n     * @return voucher  The generated voucher\\n     */\\n    function _buildTransferFromVoucher(uint256 nonce, uint256 deadline, address from, address to, uint256 amount, bytes memory metadata) internal pure returns (Voucher memory voucher) {\\n        voucher = Voucher(\\n            TRANSFER_FROM_VOUCHER_TAG,\\n            nonce,\\n            deadline,\\n            abi.encode(TransferFromVoucher(from, to, amount)),\\n            metadata\\n        );\\n    }\\n\\n    /**\\n     * Generate the user-readable message from the given voucher\\n     *\\n     * @param voucher  Voucher to generate the user-readable message of\\n     * @return message  The voucher's generated user-readable message\\n     */\\n    function _generateTransferFromVoucherMessage(Voucher calldata voucher) internal view returns (string memory message) {\\n        TransferFromVoucher memory decodedVoucher = abi.decode(voucher.payload, (TransferFromVoucher));\\n        message = string.concat(\\n            \\\"TransferFrom\\\\n\\\",\\n            string.concat(\\\"from: \\\", decodedVoucher.from.toString(), \\\"\\\\n\\\"),\\n            string.concat(\\\"to: \\\", decodedVoucher.to.toString(), \\\"\\\\n\\\"),\\n            string.concat(\\\"amount: \\\", IERC20Metadata(token).symbol(), ' ', decodedVoucher.amount.toString(IERC20Metadata(token).decimals()))\\n        );\\n    }\\n\\n    /**\\n     * Extract the signer from the given voucher\\n     *\\n     * @param voucher  Voucher to extract the signer of\\n     * @return signer  The voucher's signer\\n     */\\n    function _extractTransferFromVoucherSigner(Voucher calldata voucher) internal pure returns (address signer) {\\n        TransferFromVoucher memory decodedVoucher = abi.decode(voucher.payload, (TransferFromVoucher));\\n        signer = decodedVoucher.from;\\n    }\\n\\n    /**\\n     * Execute the given (already validated) voucher\\n     *\\n     * @param voucher  The voucher to execute\\n     */\\n    function _executeTransferFromVoucher(Voucher calldata voucher) internal {\\n        _beforeTransferFromWithVoucher(voucher);\\n\\n        TransferFromVoucher memory decodedVoucher = abi.decode(voucher.payload, (TransferFromVoucher));\\n        IERC20(token).safeTransferFrom(decodedVoucher.from, decodedVoucher.to, decodedVoucher.amount);\\n\\n        _afterTransferFromWithVoucher(voucher);\\n    }\\n\\n    /**\\n     * Hook called before the actual transferFrom() call is executed\\n     *\\n     * @param voucher  The voucher being executed\\n     */\\n    function _beforeTransferFromWithVoucher(Voucher calldata voucher) internal virtual {}\\n\\n    /**\\n     * Hook called after the actual transferFrom() call is executed\\n     *\\n     * @param voucher  The voucher being executed\\n     */\\n    function _afterTransferFromWithVoucher(Voucher calldata voucher) internal virtual {}\\n}\\n\",\"keccak256\":\"0xf221bd50779325c4b530c641c911c5c2fc0429da80b7110e4ec98fd504456bb9\",\"license\":\"AGPL-3.0-or-later\"},\"@lacrypta/gateway/contracts/ERC20PermitGateway.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {ERC20Gateway} from \\\"./ERC20Gateway.sol\\\";\\nimport {IERC20PermitGateway} from \\\"./IERC20PermitGateway.sol\\\";\\n\\nimport {ToString} from \\\"./ToString.sol\\\";\\nimport {Epoch} from \\\"./DateTime.sol\\\";\\n\\nabstract contract ERC20PermitGateway is ERC20Gateway, IERC20PermitGateway {\\n    using SafeERC20 for IERC20Permit;\\n    using ToString for Epoch;\\n    using ToString for address;\\n    using ToString for bytes32;\\n    using ToString for uint256;\\n    using ToString for uint8;\\n\\n    // Tag associated to the PermitVoucher\\n    //\\n    // This is computed using the \\\"encodeType\\\" convention laid out in <https://eips.ethereum.org/EIPS/eip-712#definition-of-encodetype>.\\n    // Note that it is not REQUIRED to be so computed, but we do so anyways to minimize encoding conventions.\\n    uint32 public constant override PERMIT_VOUCHER_TAG =\\n        uint32(bytes4(keccak256(\\\"PermitVoucher(address owner,address spender,uint256 value,uint256 deadline,uint8 v,bytes32 r,bytes32 s)\\\")));\\n\\n    /**\\n     * Build a new ERC20PermitGateway from the given token address\\n     *\\n     * @param _token  Underlying ERC20 token\\n     */\\n    constructor(address _token) ERC20Gateway(_token) {\\n        _addHandler(PERMIT_VOUCHER_TAG, HandlerEntry({\\n            message: _generatePermitVoucherMessage,\\n            signer: _extractPermitVoucherSigner,\\n            execute: _executePermitVoucher\\n        }));\\n    }\\n\\n    /**\\n     * Implementation of the IERC165 interface\\n     *\\n     * @param interfaceId  Interface ID to check against\\n     * @return  Whether the provided interface ID is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC20PermitGateway).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * Build a PermitVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param deadline  Voucher deadline to use\\n     * @param owner  Permit owner address to use\\n     * @param spender  Permit spender address to use\\n     * @param value  Permit amount to use\\n     * @param permitDeadline  Permit deadline to use\\n     * @param v  Permit's signature \\\"v\\\" component to use\\n     * @param r  Permit's signature \\\"r\\\" component to use\\n     * @param s  Permit's signature \\\"s\\\" component to use\\n     * @param metadata  Voucher metadata to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildPermitVoucher(uint256 nonce, uint256 deadline, address owner, address spender, uint256 value, uint256 permitDeadline, uint8 v, bytes32 r, bytes32 s, bytes calldata metadata) external pure override returns (Voucher memory voucher) {\\n        voucher = _buildPermitVoucher(nonce, deadline, owner, spender, value, permitDeadline, v, r, s, metadata);\\n    }\\n\\n    /**\\n     * Build a PermitVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param owner  Permit owner address to use\\n     * @param spender  Permit spender address to use\\n     * @param value  Permit amount to use\\n     * @param permitDeadline  Permit deadline to use\\n     * @param v  Permit's signature \\\"v\\\" component to use\\n     * @param r  Permit's signature \\\"r\\\" component to use\\n     * @param s  Permit's signature \\\"s\\\" component to use\\n     * @param metadata  Voucher metadata to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildPermitVoucher(uint256 nonce, address owner, address spender, uint256 value, uint256 permitDeadline, uint8 v, bytes32 r, bytes32 s, bytes calldata metadata) external view override returns (Voucher memory voucher) {\\n        voucher = _buildPermitVoucher(nonce, block.timestamp + 1 hours, owner, spender, value, permitDeadline, v, r, s, metadata);\\n    }\\n\\n    /**\\n     * Build a PermitVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param deadline  Voucher deadline to use\\n     * @param owner  Permit owner address to use\\n     * @param spender  Permit spender address to use\\n     * @param value  Permit amount to use\\n     * @param permitDeadline  Permit deadline to use\\n     * @param v  Permit's signature \\\"v\\\" component to use\\n     * @param r  Permit's signature \\\"r\\\" component to use\\n     * @param s  Permit's signature \\\"s\\\" component to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildPermitVoucher(uint256 nonce, uint256 deadline, address owner, address spender, uint256 value, uint256 permitDeadline, uint8 v, bytes32 r, bytes32 s) external pure override returns (Voucher memory voucher) {\\n        voucher = _buildPermitVoucher(nonce, deadline, owner, spender, value, permitDeadline, v, r, s, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * Build a PermitVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param owner  Permit owner address to use\\n     * @param spender  Permit spender address to use\\n     * @param value  Permit amount to use\\n     * @param permitDeadline  Permit deadline to use\\n     * @param v  Permit's signature \\\"v\\\" component to use\\n     * @param r  Permit's signature \\\"r\\\" component to use\\n     * @param s  Permit's signature \\\"s\\\" component to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildPermitVoucher(uint256 nonce, address owner, address spender, uint256 value, uint256 permitDeadline, uint8 v, bytes32 r, bytes32 s) external view override returns (Voucher memory voucher) {\\n        voucher = _buildPermitVoucher(nonce, block.timestamp + 1 hours, owner, spender, value, permitDeadline, v, r, s, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * Build a PermitVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param deadline  Voucher deadline to use\\n     * @param owner  Permit owner address to use\\n     * @param spender  Permit spender address to use\\n     * @param value  Permit amount to use\\n     * @param permitDeadline  Permit deadline to use\\n     * @param v  Permit's signature \\\"v\\\" component to use\\n     * @param r  Permit's signature \\\"r\\\" component to use\\n     * @param s  Permit's signature \\\"s\\\" component to use\\n     * @param metadata  Voucher metadata to use\\n     * @return voucher  The generated voucher\\n     */\\n    function _buildPermitVoucher(uint256 nonce, uint256 deadline, address owner, address spender, uint256 value, uint256 permitDeadline, uint8 v, bytes32 r, bytes32 s, bytes memory metadata) internal pure returns (Voucher memory voucher) {\\n        voucher = Voucher(\\n            PERMIT_VOUCHER_TAG,\\n            nonce,\\n            deadline,\\n            abi.encode(PermitVoucher(owner, spender, value, permitDeadline, v, r, s)),\\n            metadata\\n        );\\n    }\\n\\n    /**\\n     * Generate the user-readable message from the given voucher\\n     *\\n     * @param voucher  Voucher to generate the user-readable message of\\n     * @return message  The voucher's generated user-readable message\\n     */\\n    function _generatePermitVoucherMessage(Voucher calldata voucher) internal view returns (string memory message) {\\n        PermitVoucher memory decodedVoucher = abi.decode(voucher.payload, (PermitVoucher));\\n        message = string.concat(\\n            \\\"Permit\\\\n\\\",\\n            string.concat(\\\"owner: \\\", decodedVoucher.owner.toString(), \\\"\\\\n\\\"),\\n            string.concat(\\\"spender: \\\", decodedVoucher.spender.toString(), \\\"\\\\n\\\"),\\n            string.concat(\\\"value: \\\", IERC20Metadata(token).symbol(), ' ', decodedVoucher.value.toString(IERC20Metadata(token).decimals()), \\\"\\\\n\\\"),\\n            string.concat(\\\"deadline: \\\", Epoch.wrap(uint40(decodedVoucher.deadline)).toString(), \\\"\\\\n\\\"),\\n            string.concat(\\\"v: \\\", decodedVoucher.v.toString(), \\\"\\\\n\\\"),\\n            string.concat(\\\"r: \\\", decodedVoucher.r.toString(), \\\"\\\\n\\\"),\\n            string.concat(\\\"s: \\\", decodedVoucher.s.toString())\\n        );\\n    }\\n\\n    /**\\n     * Extract the signer from the given voucher\\n     *\\n     * @param voucher  Voucher to extract the signer of\\n     * @return signer  The voucher's signer\\n     */\\n    function _extractPermitVoucherSigner(Voucher calldata voucher) internal pure returns (address signer) {\\n        PermitVoucher memory decodedVoucher = abi.decode(voucher.payload, (PermitVoucher));\\n        signer = decodedVoucher.owner;\\n    }\\n\\n    /**\\n     * Execute the given (already validated) voucher\\n     *\\n     * @param voucher  The voucher to execute\\n     */\\n    function _executePermitVoucher(Voucher calldata voucher) internal {\\n        _beforePermitWithVoucher(voucher);\\n\\n        PermitVoucher memory decodedVoucher = abi.decode(voucher.payload, (PermitVoucher));\\n        IERC20Permit(token).safePermit(\\n            decodedVoucher.owner,\\n            decodedVoucher.spender,\\n            decodedVoucher.value,\\n            decodedVoucher.deadline,\\n            decodedVoucher.v,\\n            decodedVoucher.r,\\n            decodedVoucher.s\\n        );\\n\\n        _afterPermitWithVoucher(voucher);\\n    }\\n\\n    /**\\n     * Hook called before the actual permit() call is executed\\n     *\\n     * @param voucher  The voucher being executed\\n     */\\n    function _beforePermitWithVoucher(Voucher calldata voucher) internal virtual {}\\n\\n    /**\\n     * Hook called after the actual permit() call is executed\\n     *\\n     * @param voucher  The voucher being executed\\n     */\\n    function _afterPermitWithVoucher(Voucher calldata voucher) internal virtual {}\\n}\\n\",\"keccak256\":\"0xc90c593ed5219f7eb2920b6c33340bc1f003ff58252e54aac3fd7f631b3cbbc3\",\"license\":\"AGPL-3.0-or-later\"},\"@lacrypta/gateway/contracts/Gateway.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {SignatureChecker} from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\n\\nimport {Multicall} from \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport {ToString} from \\\"./ToString.sol\\\";\\nimport {Epoch} from \\\"./DateTime.sol\\\";\\n\\nimport \\\"./IGateway.sol\\\";\\n\\nabstract contract Gateway is Context, ERC165, IGateway, Multicall, ReentrancyGuard {\\n    using ToString for Epoch;\\n    using ToString for bytes;\\n    using ToString for uint32;\\n    using ToString for uint256;\\n\\n    /**\\n     * Structure used to keep track of handling functions\\n     *\\n     * @custom:member message  The user-readable message-generating function\\n     * @custom:member signer  The signer-extractor function\\n     * @custom:member execute  The execution function\\n     */\\n    struct HandlerEntry {\\n        function(Voucher calldata) view returns (string memory) message;\\n        function(Voucher calldata) view returns (address) signer;\\n        function(Voucher calldata) execute;\\n    }\\n\\n    // Mapping from voucher tag to handling entry\\n    mapping(uint32 => HandlerEntry) private voucherHandler;\\n\\n    // typehash associated to the gateway Voucher itself\\n    //\\n    // This is computed using the \\\"encodeType\\\" convention laid out in <https://eips.ethereum.org/EIPS/eip-712#definition-of-encodetype>.\\n    bytes32 public constant override VOUCHER_TYPEHASH =\\n        keccak256(\\\"Voucher(uint32 tag,uint256 nonce,uint256 deadline,bytes payload,bytes metadata)\\\");\\n\\n    // Set of voucher hashes served\\n    mapping(bytes32 => bool) public override voucherServed;\\n\\n    /**\\n     * Implementation of the IERC165 interface\\n     *\\n     * @param interfaceId  Interface ID to check against\\n     * @return  Whether the provided interface ID is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IGateway).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * Return the voucher hash associated to the given voucher\\n     *\\n     * @param voucher  The voucher to retrieve the hash for\\n     * @return voucherHash  The voucher hash associated to the given voucher\\n     */\\n    function hashVoucher(Voucher calldata voucher) external view override returns (bytes32 voucherHash) {\\n        voucherHash = _hashVoucher(voucher);\\n    }\\n\\n    /**\\n     * Return the string representation to be signed for a given Voucher\\n     *\\n     * @param voucher  The voucher to stringify\\n     * @return voucherString  The string representation to be signed of the given voucher\\n     */\\n    function stringifyVoucher(Voucher calldata voucher) external view override returns (string memory voucherString) {\\n        voucherString = _stringifyVoucher(voucher);\\n    }\\n\\n    /**\\n     * Validate the given voucher against the given signature\\n     *\\n     * @param voucher  The voucher to validate\\n     * @param signature  The associated voucher signature\\n     */\\n    function validateVoucher(Voucher calldata voucher, bytes calldata signature) external view override {\\n        _validateVoucher(voucher, signature);\\n    }\\n\\n    /**\\n     * Validate the given voucher against the given signature, by the given signer\\n     *\\n     * @param voucher  The voucher to validate\\n     * @param r  The \\\"r\\\" component of the associated voucher signature\\n     * @param s  The \\\"s\\\" component of the associated voucher signature\\n     * @param v  The \\\"v\\\" component of the associated voucher signature\\n     */\\n    function validateVoucher(Voucher calldata voucher, bytes32 r, bytes32 s, uint8 v) external view override {\\n        _validateVoucher(voucher, _joinSignatureParts(r, s, v));\\n    }\\n\\n    /**\\n     * Serve the given voucher, by forwarding to the appropriate handler for the voucher's tag\\n     *\\n     * @param voucher  The voucher to serve\\n     * @param signature  The associated voucher signature\\n     * @custom:emit  VoucherServed\\n     */\\n    function serveVoucher(Voucher calldata voucher, bytes calldata signature) external override nonReentrant {\\n        _serveVoucher(voucher, signature);\\n    }\\n\\n    /**\\n     * Serve the given voucher, by forwarding to the appropriate handler for the voucher's tag\\n     *\\n     * @param voucher  The voucher to serve\\n     * @param r  The \\\"r\\\" component of the associated voucher signature\\n     * @param s  The \\\"s\\\" component of the associated voucher signature\\n     * @param v  The \\\"v\\\" component of the associated voucher signature\\n     * @custom:emit  VoucherServed\\n     */\\n    function serveVoucher(Voucher calldata voucher, bytes32 r, bytes32 s, uint8 v) external override nonReentrant {\\n        _serveVoucher(voucher, _joinSignatureParts(r, s, v));\\n    }\\n\\n    // --- Protected handling ---------------------------------------------------------------------------------------------------------------------------------\\n\\n    /**\\n     * Add the given pair of signer and serving functions to the tag map\\n     *\\n     * @param tag  The tag to add the mapping for\\n     * @param entry  The handling entry instance\\n     */\\n    function _addHandler(uint32 tag, HandlerEntry memory entry) internal {\\n        voucherHandler[tag] = entry;\\n    }\\n\\n    /**\\n     * Add the given pair of signer and serving functions to the tag map\\n     *\\n     * @param tag  The tag to remove the mapping for\\n     * @return entry  The previous entry\\n     */\\n    function _removeHandler(uint32 tag) internal returns (HandlerEntry memory entry) {\\n        entry = voucherHandler[tag];\\n        delete voucherHandler[tag];\\n    }\\n\\n    // --- Protected utilities --------------------------------------------------------------------------------------------------------------------------------\\n\\n    /**\\n     * Return the user-readable message for the given voucher\\n     *\\n     * @param voucher  Voucher to obtain the user-readable message for\\n     * @return message  The voucher's user-readable message\\n     */\\n    function _message(Voucher calldata voucher) internal view returns (string memory message) {\\n        message = voucherHandler[voucher.tag].message(voucher);\\n    }\\n\\n    /**\\n     * Retrieve the signer of the given Voucher\\n     *\\n     * @param voucher  Voucher to retrieve the signer of\\n     * @return signer  The voucher's signer\\n     */\\n    function _signer(Voucher calldata voucher) internal view returns (address signer) {\\n        signer = voucherHandler[voucher.tag].signer(voucher);\\n    }\\n\\n    /**\\n     * Execute the given Voucher\\n     *\\n     * @param voucher  Voucher to execute\\n     */\\n    function _execute(Voucher calldata voucher) internal {\\n        voucherHandler[voucher.tag].execute(voucher);\\n    }\\n\\n    /**\\n     * Actually return the string representation to be signed for a given Voucher\\n     *\\n     * @param voucher  The voucher to stringify\\n     * @return voucherString  The string representation to be signed of the given voucher\\n     */\\n    function _stringifyVoucher(Voucher calldata voucher) internal view returns (string memory voucherString) {\\n        voucherString = string.concat(\\n            string.concat(_message(voucher), \\\"\\\\n\\\"),\\n            \\\"---\\\\n\\\",\\n            string.concat(\\\"tag: \\\", voucher.tag.toString(), \\\"\\\\n\\\"),\\n            string.concat(\\\"nonce: \\\", voucher.nonce.toString(), \\\"\\\\n\\\"),\\n            string.concat(\\\"deadline: \\\", Epoch.wrap(uint40(voucher.deadline)).toString(), \\\"\\\\n\\\"),\\n            string.concat(\\\"payload: \\\", voucher.payload.toString(), \\\"\\\\n\\\"),\\n            string.concat(\\\"metadata: \\\", voucher.metadata.toString())\\n        );\\n    }\\n\\n    /**\\n     * Actually return the voucher hash associated to the given voucher\\n     *\\n     * @param voucher  The voucher to retrieve the hash for\\n     * @return voucherHash  The voucher hash associated to the given voucher\\n     */\\n    function _hashVoucher(Voucher calldata voucher) internal view returns (bytes32 voucherHash) {\\n        voucherHash = keccak256(bytes(_stringifyVoucher(voucher)));\\n    }\\n\\n    /**\\n     * Validate the given voucher against the given signature, by the given signer\\n     *\\n     * @param voucher  The voucher to validate\\n     * @param signature  The associated voucher signature\\n     */\\n    function _validateVoucher(Voucher calldata voucher, bytes memory signature) internal view {\\n        require(SignatureChecker.isValidSignatureNow(_signer(voucher), _hashVoucher(voucher), signature), \\\"Gateway: invalid voucher signature\\\");\\n        require(block.timestamp <= voucher.deadline, \\\"Gateway: expired deadline\\\");\\n    }\\n\\n    /**\\n     * Mark the given voucher hash as served, and emit the corresponding event\\n     *\\n     * @param voucher  The voucher hash to serve\\n     * @param signature  The associated voucher signature\\n     * @custom:emit  VoucherServed\\n     */\\n    function _serveVoucher(Voucher calldata voucher, bytes memory signature) internal {\\n        _validateVoucher(voucher, signature);\\n\\n        bytes32 voucherHash = _hashVoucher(voucher);\\n        require(voucherServed[voucherHash] == false, \\\"Gateway: voucher already served\\\");\\n        voucherServed[voucherHash] = true;\\n\\n        _execute(voucher);\\n\\n        emit VoucherServed(voucherHash, _msgSender());\\n    }\\n\\n    // --- Private Utilities ----------------------------------------------------------------------------------------------------------------------------------\\n\\n    /**\\n     * Join the \\\"r\\\", \\\"s\\\", and \\\"v\\\" components of a signature into a single bytes structure\\n     *\\n     * @param r  The \\\"r\\\" component of the signature\\n     * @param s  The \\\"s\\\" component of the signature\\n     * @param v  The \\\"v\\\" component of the signature\\n     * @return signature  The joint signature\\n     */\\n    function _joinSignatureParts(bytes32 r, bytes32 s, uint8 v) private pure returns (bytes memory signature) {\\n        signature = bytes.concat(r, s, bytes1(v));\\n    }\\n}\\n\",\"keccak256\":\"0x73ce664439b60da44f663268255f5add16ff299f44fbc57741217a47ef61a6f2\",\"license\":\"AGPL-3.0-or-later\"},\"@lacrypta/gateway/contracts/IERC20Gateway.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport {IGateway} from \\\"./IGateway.sol\\\";\\n\\ninterface IERC20Gateway is IGateway {\\n    /**\\n     * Retrieve the address of the underlying ERC20 token\\n     *\\n     * @return  The address of the underlying ERC20 token\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * transferFrom() voucher\\n     *\\n     * @custom:member from  The address from which to transfer funds\\n     * @custom:member to  The address to which to transfer funds\\n     * @custom:member amount  The number of tokens to transfer\\n     */\\n    struct TransferFromVoucher {\\n        address from;\\n        address to;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * Return the tag associated to the TransferFromVoucher voucher itself\\n     *\\n     * @return  The tag associated to the TransferFromVoucher voucher itself\\n     */\\n    function TRANSFER_FROM_VOUCHER_TAG() external view returns (uint32);\\n\\n    /**\\n     * Build a TransferFromVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param deadline  Voucher deadline to use\\n     * @param from  Transfer origin to use\\n     * @param to  Transfer destination to use\\n     * @param amount  Transfer amount to use\\n     * @param metadata  Voucher metadata to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildTransferFromVoucher(uint256 nonce, uint256 deadline, address from, address to, uint256 amount, bytes calldata metadata) external view returns (Voucher memory voucher);\\n\\n    /**\\n     * Build a TransferFromVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param from  Transfer origin to use\\n     * @param to  Transfer destination to use\\n     * @param amount  Transfer amount to use\\n     * @param metadata  Voucher metadata to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildTransferFromVoucher(uint256 nonce, address from, address to, uint256 amount, bytes calldata metadata) external view returns (Voucher memory voucher);\\n\\n    /**\\n     * Build a TransferFromVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param deadline  Voucher deadline to use\\n     * @param from  Transfer origin to use\\n     * @param to  Transfer destination to use\\n     * @param amount  Transfer amount to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildTransferFromVoucher(uint256 nonce, uint256 deadline, address from, address to, uint256 amount) external view returns (Voucher memory voucher);\\n\\n    /**\\n     * Build a TransferFromVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param from  Transfer origin to use\\n     * @param to  Transfer destination to use\\n     * @param amount  Transfer amount to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildTransferFromVoucher(uint256 nonce, address from, address to, uint256 amount) external view returns (Voucher memory voucher);\\n}\\n\",\"keccak256\":\"0x79cce25b5f875e0aaced743155fac7b9f25ec30956e1dc3b69a9f9ef3fa94515\",\"license\":\"AGPL-3.0-or-later\"},\"@lacrypta/gateway/contracts/IERC20PermitGateway.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\nimport {IERC20Gateway} from \\\"./IERC20Gateway.sol\\\";\\n\\ninterface IERC20PermitGateway is IERC20Gateway {\\n    /**\\n     * permit() voucher\\n     *\\n     * @custom:member owner  The address of the owner of the funds\\n     * @custom:member spender  The address of the spender being permitted to move the funds\\n     * @custom:member value  The number of tokens to allow transfer of\\n     * @custom:member v  The permit's signature \\\"v\\\" value\\n     * @custom:member r  The permit's signature \\\"r\\\" value\\n     * @custom:member s  The permit's signature \\\"s\\\" value\\n     */\\n    struct PermitVoucher {\\n        address owner;\\n        address spender;\\n        uint256 value;\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /**\\n     * Return the tag associated to the PermitVoucher voucher itself\\n     *\\n     * @return  The tag associated to the PermitVoucher voucher itself\\n     */\\n    function PERMIT_VOUCHER_TAG() external view returns (uint32);\\n\\n    /**\\n     * Build a PermitVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param deadline  Voucher deadline to use\\n     * @param owner  Permit owner address to use\\n     * @param spender  Permit spender address to use\\n     * @param value  Permit amount to use\\n     * @param permitDeadline  Permit deadline to use\\n     * @param v  Permit's signature \\\"v\\\" component to use\\n     * @param r  Permit's signature \\\"r\\\" component to use\\n     * @param s  Permit's signature \\\"s\\\" component to use\\n     * @param metadata  Voucher metadata to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildPermitVoucher(uint256 nonce, uint256 deadline, address owner, address spender, uint256 value, uint256 permitDeadline, uint8 v, bytes32 r, bytes32 s, bytes calldata metadata) external view returns (Voucher memory voucher);\\n\\n    /**\\n     * Build a PermitVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param owner  Permit owner address to use\\n     * @param spender  Permit spender address to use\\n     * @param value  Permit amount to use\\n     * @param permitDeadline  Permit deadline to use\\n     * @param v  Permit's signature \\\"v\\\" component to use\\n     * @param r  Permit's signature \\\"r\\\" component to use\\n     * @param s  Permit's signature \\\"s\\\" component to use\\n     * @param metadata  Voucher metadata to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildPermitVoucher(uint256 nonce, address owner, address spender, uint256 value, uint256 permitDeadline, uint8 v, bytes32 r, bytes32 s, bytes calldata metadata) external view returns (Voucher memory voucher);\\n\\n    /**\\n     * Build a PermitVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param deadline  Voucher deadline to use\\n     * @param owner  Permit owner address to use\\n     * @param spender  Permit spender address to use\\n     * @param value  Permit amount to use\\n     * @param permitDeadline  Permit deadline to use\\n     * @param v  Permit's signature \\\"v\\\" component to use\\n     * @param r  Permit's signature \\\"r\\\" component to use\\n     * @param s  Permit's signature \\\"s\\\" component to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildPermitVoucher(uint256 nonce, uint256 deadline, address owner, address spender, uint256 value, uint256 permitDeadline, uint8 v, bytes32 r, bytes32 s) external view returns (Voucher memory voucher);\\n\\n    /**\\n     * Build a PermitVoucher from the given parameters\\n     *\\n     * @param nonce  Nonce to use\\n     * @param owner  Permit owner address to use\\n     * @param spender  Permit spender address to use\\n     * @param value  Permit amount to use\\n     * @param permitDeadline  Permit deadline to use\\n     * @param v  Permit's signature \\\"v\\\" component to use\\n     * @param r  Permit's signature \\\"r\\\" component to use\\n     * @param s  Permit's signature \\\"s\\\" component to use\\n     * @return voucher  The generated voucher\\n     */\\n    function buildPermitVoucher(uint256 nonce, address owner, address spender, uint256 value, uint256 permitDeadline, uint8 v, bytes32 r, bytes32 s) external view returns (Voucher memory voucher);\\n}\\n\",\"keccak256\":\"0x58a3d28fa879d239e5a9cc14f8188c0fefe00db3b27562b61d1da6d606b368d9\",\"license\":\"AGPL-3.0-or-later\"},\"@lacrypta/gateway/contracts/IGateway.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\ninterface IGateway {\\n    /**\\n     * Voucher --- tagged union used for specific vouchers' implementation\\n     *\\n     * @custom:member tag  An integer representing the type of voucher this particular voucher is\\n     * @custom:member nonce  The voucher nonce to use\\n     * @custom:member deadline  The maximum block timestamp this voucher is valid until\\n     * @custom:member payload  Actual abi.encode()-ed payload (used for serving the call proper)\\n     * @custom:member metadata  Additional abi.encode()-ed metadata (used for administrative tasks)\\n     */\\n    struct Voucher {\\n        uint32 tag;\\n        //\\n        uint256 nonce;\\n        uint256 deadline;\\n        //\\n        bytes payload;\\n        bytes metadata;\\n    }\\n\\n    /**\\n     * Emitted upon a voucher being served\\n     *\\n     * @param voucherHash  The voucher hash served\\n     * @param delegate  The delegate serving the voucher\\n     */\\n    event VoucherServed(bytes32 indexed voucherHash, address delegate);\\n\\n    /**\\n     * Return the typehash associated to the Gateway Voucher itself\\n     *\\n     * @return  The typehash associated to the gateway Voucher itself\\n     */\\n    function VOUCHER_TYPEHASH() external view returns (bytes32);\\n\\n    /**\\n     * Determine whether the given voucher hash has been already served\\n     *\\n     * @param voucherHash  The voucher hash to check\\n     * @return served  True whenever the given voucher hash has already been served\\n     */\\n    function voucherServed(bytes32 voucherHash) external view returns (bool served);\\n\\n    /**\\n     * Return the voucher hash associated to the given voucher\\n     *\\n     * @param voucher  The voucher to retrieve the hash for\\n     * @return voucherHash  The voucher hash associated to the given voucher\\n     */\\n    function hashVoucher(Voucher calldata voucher) external view returns (bytes32 voucherHash);\\n\\n    /**\\n     * Return the string representation to be signed for a given Voucher\\n     *\\n     * @param voucher  The voucher to stringify\\n     * @return voucherString  The string representation to be signed of the given voucher\\n     */\\n    function stringifyVoucher(Voucher calldata voucher) external view returns (string memory voucherString);\\n\\n    /**\\n     * Validate the given voucher against the given signature, by the given signer\\n     *\\n     * @param voucher  The voucher to validate\\n     * @param signature  The associated voucher signature\\n     */\\n    function validateVoucher(Voucher calldata voucher, bytes memory signature) external view;\\n\\n    /**\\n     * Validate the given voucher against the given signature, by the given signer\\n     *\\n     * @param voucher  The voucher to validate\\n     * @param r  The \\\"r\\\" component of the associated voucher signature\\n     * @param s  The \\\"s\\\" component of the associated voucher signature\\n     * @param v  The \\\"v\\\" component of the associated voucher signature\\n     */\\n    function validateVoucher(Voucher calldata voucher, bytes32 r, bytes32 s, uint8 v) external view;\\n\\n    /**\\n     * Serve the given voucher, by forwarding to the appropriate handler for the voucher's tag\\n     *\\n     * @param voucher  The voucher to serve\\n     * @param signature  The associated voucher signature\\n     * @custom:emit  VoucherServed\\n     */\\n    function serveVoucher(Voucher calldata voucher, bytes calldata signature) external;\\n\\n    /**\\n     * Serve the given voucher, by forwarding to the appropriate handler for the voucher's tag\\n     *\\n     * @param voucher  The voucher to serve\\n     * @param r  The \\\"r\\\" component of the associated voucher signature\\n     * @param s  The \\\"s\\\" component of the associated voucher signature\\n     * @param v  The \\\"v\\\" component of the associated voucher signature\\n     * @custom:emit  VoucherServed\\n     */\\n    function serveVoucher(Voucher calldata voucher, bytes32 r, bytes32 s, uint8 v) external;\\n}\\n\",\"keccak256\":\"0xcda8dd9f8ae003b374eaf09401fd4b4ec4deefdaf183d370a852b32f85c279ec\",\"license\":\"AGPL-3.0-or-later\"},\"@lacrypta/gateway/contracts/ToString.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport {DateTimeParts, Epoch, Quarters, dateTimeParts} from \\\"./DateTime.sol\\\";\\n\\nlibrary ToString {\\n    /**\\n     * Convert the given boolean value to string (ie. \\\"true\\\" / \\\"false\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bool value) public pure returns (string memory) {\\n        return value ? \\\"true\\\" : \\\"false\\\";\\n    }\\n\\n    /**\\n     * Convert the given uint value to string\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(uint256 value) public pure returns (string memory) {\\n        return toString(value, 0);\\n    }\\n\\n    /**\\n     * Convert the given uint value to string, where as many decimal digits are used as given\\n     *\\n     * @param value  The value to convert to string\\n     * @param decimals  The number of decimal places to use\\n     * @return  The resulting string\\n     */\\n    function toString(uint256 value, uint8 decimals) public pure returns (string memory) {\\n        unchecked {\\n            bytes10 DEC_DIGITS = \\\"0123456789\\\";\\n\\n            bytes memory buffer = \\\"00000000000000000000000000000000000000000000000000000000000000000000000000000.\\\";  // buffer.length = 78\\n            uint8 i = 78;\\n\\n            // remove trailing 0s\\n            while ((0 < decimals) && (value % 10 == 0)) {\\n                value /= 10;\\n                decimals--;\\n            }\\n            // if there are remaining decimals to write, do so\\n            if (0 < decimals) {\\n                while (0 < decimals) {\\n                    buffer[--i] = DEC_DIGITS[value % 10];\\n                    value /= 10;\\n                    decimals--;\\n                }\\n                buffer[--i] = '.';\\n            }\\n            // output a 0 in case nothing left\\n            if (value == 0) {\\n                buffer[--i] = DEC_DIGITS[0];\\n            } else {\\n                while (value != 0) {\\n                    buffer[--i] = DEC_DIGITS[value % 10];\\n                    value /= 10;\\n                }\\n            }\\n            // transfer result from buffer\\n            bytes memory result = new bytes(78 - i);\\n            uint8 j = 0;\\n            while (i < 78) {\\n                result[j++] = buffer[i++];\\n            }\\n            return string(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given int value to string\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(int256 value) public pure returns (string memory) {\\n        return toString(value, 0);\\n    }\\n\\n    /**\\n     * Convert the given int value to string, where as many decimal digits are used as given\\n     *\\n     * @param value  The value to convert to string\\n     * @param decimals  The number of decimal places to use\\n     * @return  The resulting string\\n     */\\n    function toString(int256 value, uint8 decimals) public pure returns (string memory) {\\n        unchecked {\\n            if (value < 0) {\\n                return string.concat('-', toString(value == type(int256).min ? 1 + type(uint256).max >> 1 : uint256(-value), decimals));\\n            } else {\\n                return toString(uint256(value), decimals);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert the given bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes memory value) public pure returns (string memory) {\\n        unchecked {\\n            bytes16 HEX_DIGITS = \\\"0123456789abcdef\\\";\\n\\n            uint256 len = value.length;\\n            bytes memory buffer = new bytes(len * 2 + 2);\\n\\n            buffer[0] = '[';\\n            for ((uint256 i, uint256 j, uint256 k) = (0, 1, 2); i < len; (i, j, k) = (i + 1, j + 2, k + 2)) {\\n                uint8 val = uint8(value[i]);\\n                (buffer[j], buffer[k]) = (HEX_DIGITS[val >> 4], HEX_DIGITS[val & 0x0f]);\\n            }\\n            buffer[len * 2 + 1] = ']';\\n\\n            return string(buffer);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes1 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes2 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes3 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes4 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes5 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes6 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes7 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes8 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes9 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes10 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes11 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes12 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes13 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes14 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes15 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes16 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes17 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes18 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes19 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes20 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes21 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes22 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes23 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes24 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes25 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes26 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes27 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes28 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes29 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes30 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes31 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given fixed-size bytes value to string (ie. \\\"[...]\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(bytes32 value) public pure returns (string memory) {\\n        unchecked {\\n            bytes memory temp = new bytes(value.length);\\n            for (uint8 i = 0; i < value.length; i++) temp[i] = value[i];\\n            return toString(temp);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given address value to string (ie. \\\"<...>\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(address value) public pure returns (string memory) {\\n        unchecked {\\n            bytes16 HEX_DIGITS = \\\"0123456789abcdef\\\";\\n\\n            bytes20 nValue = bytes20(value);\\n            bytes memory buffer = new bytes(42);\\n            buffer[0] = '<';\\n            for ((uint256 i, uint256 j, uint256 k) = (0, 1, 2); i < 20; (i, j, k) = (i + 1, j + 2, k + 2)) {\\n                uint8 val = uint8(nValue[i]);\\n                (buffer[j], buffer[k]) = (HEX_DIGITS[val >> 4], HEX_DIGITS[val & 0x0f]);\\n            }\\n            buffer[41] = '>';\\n            return string(buffer);\\n        }\\n    }\\n\\n    /**\\n     * Convert the given epoch value to ISO8601 format (ie. \\\"0000-00-00T00:00:00Z\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @return  The resulting string\\n     */\\n    function toString(Epoch value) public pure returns (string memory) {\\n        return toString(value, Quarters.wrap(0));\\n    }\\n\\n    /**\\n     * Convert the given epoch value to ISO8601 format (ie. \\\"0000-00-00T00:00:00+00:00\\\")\\n     *\\n     * @param value  The value to convert to string\\n     * @param tzOffset  The number of quarters-of-an-hour to offset\\n     * @return  The resulting string\\n     */\\n    function toString(Epoch value, Quarters tzOffset) public pure returns (string memory) {\\n        unchecked {\\n            bytes10 DEC_DIGITS = \\\"0123456789\\\";\\n\\n            DateTimeParts memory parts = dateTimeParts(value, tzOffset);\\n\\n            bytes memory buffer = \\\"0000-00-00T00:00:00\\\";\\n\\n            buffer[0] = DEC_DIGITS[(parts.year / 1000) % 10];\\n            buffer[1] = DEC_DIGITS[(parts.year / 100) % 10];\\n            buffer[2] = DEC_DIGITS[(parts.year / 10) % 10];\\n            buffer[3] = DEC_DIGITS[parts.year % 10];\\n            //\\n            buffer[5] = DEC_DIGITS[(parts.month / 10) % 10];\\n            buffer[6] = DEC_DIGITS[parts.month % 10];\\n            //\\n            buffer[8] = DEC_DIGITS[(parts.day / 10) % 10];\\n            buffer[9] = DEC_DIGITS[parts.day % 10];\\n            //\\n            buffer[11] = DEC_DIGITS[(parts.hour / 10) % 10];\\n            buffer[12] = DEC_DIGITS[parts.hour % 10];\\n            //\\n            buffer[14] = DEC_DIGITS[(parts.minute / 10) % 10];\\n            buffer[15] = DEC_DIGITS[parts.minute % 10];\\n            //\\n            buffer[17] = DEC_DIGITS[(parts.second / 10) % 10];\\n            buffer[18] = DEC_DIGITS[parts.second % 10];\\n\\n            if (Quarters.unwrap(tzOffset) == 0) {\\n                return string.concat(string(buffer), \\\"Z\\\");\\n            } else {\\n                bytes memory tzBuffer = \\\" 00:00\\\";\\n                uint8 tzh;\\n                if (Quarters.unwrap(tzOffset) < 0) {\\n                    tzBuffer[0] = \\\"-\\\";\\n                    tzh = uint8(-parts.tzHours);\\n                } else {\\n                    tzBuffer[0] = \\\"+\\\";\\n                    tzh = uint8(parts.tzHours);\\n                }\\n\\n                tzBuffer[1] = DEC_DIGITS[(tzh / 10) % 10];\\n                tzBuffer[2] = DEC_DIGITS[tzh % 10];\\n                //\\n                tzBuffer[4] = DEC_DIGITS[(parts.tzMinutes / 10) % 10];\\n                tzBuffer[5] = DEC_DIGITS[parts.tzMinutes % 10];\\n\\n                return string.concat(string(buffer), string(tzBuffer));\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd1c16aa61d6d3867b395c2dbac709c76554af080677f9d9cef549d5205c46ba5\",\"license\":\"AGPL-3.0-or-later\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x35e30a35e23f856cbcee3558b7efdd83f6017a8f1b419710645143d98e892463\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.1) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length == 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BarGateway.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\nimport {ERC20PermitGateway} from \\\"@lacrypta/gateway/contracts/ERC20PermitGateway.sol\\\";\\n\\ncontract BarGateway is ERC20PermitGateway {\\n    constructor(address _peronio) ERC20PermitGateway(_peronio) {}\\n\\n    // To obtain message to be signed from voucher: stringifyVoucher(voucher)\\n    //   The signing procedure _should_ sign the _hash_ of this message\\n    //\\n    // To serve a voucher (1): serveVoucher(voucher, r, s, v)\\n    // To serve a voucher (2): serveVoucher(voucher, sig)\\n    //\\n    //\\n    // Vouchers:\\n    //   PermitVoucher:\\n    //\\n    //     Voucher permitVoucher = Voucher(\\n    //       0x77ed603f,       // tag --- constant (see: ERC20PermitGateway.PERMIT_VOUCHER_TAG)\\n    //       nonce,            // nonce --- random\\n    //       deadline,         // voucher deadline\\n    //       abi.encode(       // payload\\n    //         PermitVoucher(\\n    //             owner,      // funds owner\\n    //             spender,    // funds spender\\n    //             value,      // funds being permitted\\n    //             deadline,   // permit deadline\\n    //             v,          // signature \\\"v\\\"\\n    //             r,          // signature \\\"r\\\"\\n    //             s           // signature \\\"s\\\"\\n    //         )\\n    //       ),\\n    //       bytes()           // metadata --- empty\\n    //     );\\n    //\\n    //   TransferFromVoucher:\\n    //\\n    //     Voucher transferFromVoucher = Voucher(\\n    //       0xf7d48c1c,             // tag -- constant (see: ERC20Gateway.TRANSFER_FROM_VOUCHER_TAG)\\n    //       nonce,                  // nonce --- random\\n    //       deadline,               // voucher deadline\\n    //       abi.encode(             // payload\\n    //         TransferFromVoucher(\\n    //           from,               // transfer source\\n    //           to,                 // transfer destination\\n    //           amount              // transfer amount\\n    //         )\\n    //       ),\\n    //       bytes()                 // metadata --- empty\\n    //     );\\n    //\\n}\\n\",\"keccak256\":\"0xd4defcb9978baa7adae450b8ea6512dfd2a3d92986c9968544ea66684f95e312\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162005173380380620051738339810160408190526200003491620010a8565b600160008181556001600160a01b038316608052604080516060810182526200019b602090811b62000aed176001600160401b039081168352620004bb821b62000e2e178116828401908152620004e4831b62000e5317821694840194855263f7d48c1c909552949052517f49a79b7d5db675c9435a3559442313c2851e81b9c22766069ab5f7a93c9574368054935192518516600160801b02600160801b600160c01b031993861668010000000000000000026001600160801b03199095169290951691909117929092171691909117905580620001937f77ed603f8652441f01366c10fab285b166be94dd5c89e1dcd972a451dda1827d60e01c6040518060600160405280620005ad60201b62000eb8176001600160401b0316815260200162000b4060201b620014a3176001600160401b0316815260200162000b6160201b620014c0176001600160401b03168152506200053a60201b60201c565b505062001793565b60606000620001ad83830184620010c8565b810190620001bc91906200112e565b8051604051632b65311f60e11b81526001600160a01b039091166004820152909150731E232D4c772C2A9849aDf2D979201DAbd2c19763906356ca623e90602401600060405180830381865af41580156200021b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002459190810190620011c6565b60405160200162000257919062001273565b60408051808303601f19018152908290526020830151632b65311f60e11b83526001600160a01b0316600483015290731E232D4c772C2A9849aDf2D979201DAbd2c19763906356ca623e90602401600060405180830381865af4158015620002c3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002ed9190810190620011c6565b604051602001620002ff9190620012ae565b6040516020818303038152906040526080516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200034f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620003799190810190620011c6565b8360400151731E232D4c772C2A9849aDf2D979201DAbd2c1976363338dc7fd90916080516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003db573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004019190620012f7565b6040516001600160e01b031960e085901b168152600481019290925260ff166024820152604401600060405180830381865af415801562000446573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620004709190810190620011c6565b6040516020016200048392919062001317565b60408051601f1981840301815290829052620004a49392916020016200136b565b604051602081830303815290604052915050919050565b600080620004cd6060840184620010c8565b810190620004dc91906200112e565b519392505050565b6000620004f56060830183620010c8565b8101906200050491906200112e565b8051602080830151604084015160805194955062000536946001600160a01b031693926200153962000bce821b17901c565b5050565b63ffffffff909116600090815260016020908152604091829020835181549285015193909401516001600160401b03908116600160801b02600160801b600160c01b031994821668010000000000000000026001600160801b031990941691909516179190911791909116919091179055565b60606000620005bf83830184620010c8565b810190620005ce9190620013d4565b8051604051632b65311f60e11b81526001600160a01b039091166004820152909150731E232D4c772C2A9849aDf2D979201DAbd2c19763906356ca623e90602401600060405180830381865af41580156200062d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620006579190810190620011c6565b6040516020016200066991906200147b565b60408051808303601f19018152908290526020830151632b65311f60e11b83526001600160a01b0316600483015290731E232D4c772C2A9849aDf2D979201DAbd2c19763906356ca623e90602401600060405180830381865af4158015620006d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620006ff9190810190620011c6565b604051602001620007119190620014b7565b6040516020818303038152906040526080516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000761573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200078b9190810190620011c6565b8360400151731E232D4c772C2A9849aDf2D979201DAbd2c1976363338dc7fd90916080516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620007ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008139190620012f7565b6040516001600160e01b031960e085901b168152600481019290925260ff166024820152604401600060405180830381865af415801562000858573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620008829190810190620011c6565b60405160200162000895929190620014f5565b60408051808303601f19018152908290526060850151634b2dd51960e01b835264ffffffffff16600483015290731E232D4c772C2A9849aDf2D979201DAbd2c1976390634b2dd51990602401600060405180830381865af4158015620008ff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620009299190810190620011c6565b6040516020016200093b919062001556565b60408051808303601f1901815290829052608086015163348051d760e11b835260ff16600483015290731E232D4c772C2A9849aDf2D979201DAbd2c1976390636900a3ae90602401600060405180830381865af4158015620009a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620009cb9190810190620011c6565b604051602001620009dd919062001595565b60408051808303601f190181529082905260a0870151631623433d60e31b8352600483015290731E232D4c772C2A9849aDf2D979201DAbd2c197639063b11a19e890602401600060405180830381865af415801562000a40573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000a6a9190810190620011c6565b60405160200162000a7c9190620015cd565b60408051808303601f190181529082905260c0880151631623433d60e31b8352600483015290731E232D4c772C2A9849aDf2D979201DAbd2c197639063b11a19e890602401600060405180830381865af415801562000adf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000b099190810190620011c6565b60405160200162000b1b9190620015ed565b60408051601f1981840301815290829052620004a4979695949392916020016200161a565b60008062000b526060840184620010c8565b810190620004dc9190620013d4565b600062000b726060830183620010c8565b81019062000b819190620013d4565b80516020808301516040840151606085015160808087015160a088015160c0890151925198995062000536986001600160a01b0316979691929091620015c162000c34821b17901c565b50565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b039081166323b872dd60e01b1790915262000c2e91869162000e1a16565b50505050565b604051623f675f60e91b81526001600160a01b038881166004830152600091908a1690637ecebe0090602401602060405180830381865afa15801562000c7e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ca49190620016da565b60405163d505accf60e01b81526001600160a01b038a811660048301528981166024830152604482018990526064820188905260ff8716608483015260a4820186905260c48201859052919250908a169063d505accf9060e401600060405180830381600087803b15801562000d1957600080fd5b505af115801562000d2e573d6000803e3d6000fd5b5050604051623f675f60e91b81526001600160a01b038b81166004830152600093508c169150637ecebe0090602401602060405180830381865afa15801562000d7b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000da19190620016da565b905062000db0826001620016f4565b811462000e0e5760405162461bcd60e51b815260206004820152602160248201527f5361666545524332303a207065726d697420646964206e6f74207375636365656044820152601960fa1b60648201526084015b60405180910390fd5b50505050505050505050565b600062000e76826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031662000efd60201b62001800179092919060201c565b80519091501562000ef8578080602001905181019062000e9791906200171c565b62000ef85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840162000e05565b505050565b606062000f0e848460008562000f18565b90505b9392505050565b60608247101562000f7b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840162000e05565b6001600160a01b0385163b62000fd45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640162000e05565b600080866001600160a01b0316858760405162000ff2919062001740565b60006040518083038185875af1925050503d806000811462001031576040519150601f19603f3d011682016040523d82523d6000602084013e62001036565b606091505b5090925090506200104982828662001054565b979650505050505050565b606083156200106557508162000f11565b825115620010765782518084602001fd5b8160405162461bcd60e51b815260040162000e0591906200175e565b6001600160a01b038116811462000bcb57600080fd5b600060208284031215620010bb57600080fd5b815162000f118162001092565b6000808335601e19843603018112620010e057600080fd5b8301803591506001600160401b03821115620010fb57600080fd5b6020019150368190038213156200111157600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b6000606082840312156200114157600080fd5b604051606081016001600160401b038111828210171562001166576200116662001118565b6040528235620011768162001092565b81526020830135620011888162001092565b60208201526040928301359281019290925250919050565b60005b83811015620011bd578181015183820152602001620011a3565b50506000910152565b600060208284031215620011d957600080fd5b81516001600160401b0380821115620011f157600080fd5b818401915084601f8301126200120657600080fd5b8151818111156200121b576200121b62001118565b604051601f8201601f19908116603f0116810190838211818310171562001246576200124662001118565b816040528281528760208487010111156200126057600080fd5b62001049836020830160208801620011a0565b650333937b69d160d51b81526000825162001296816006850160208701620011a0565b600560f91b6006939091019283015250600701919050565b6303a379d160e51b815260008251620012cf816004850160208701620011a0565b600560f91b6004939091019283015250600501919050565b60ff8116811462000bcb57600080fd5b6000602082840312156200130a57600080fd5b815162000f1181620012e7565b67030b6b7bab73a1d160c51b8152600083516200133c816008850160208801620011a0565b600160fd1b60089184019182015283516200135f816009840160208801620011a0565b01600901949350505050565b6c2a3930b739b332b9233937b68560991b815283516000906200139681600d850160208901620011a0565b845190830190620013af81600d840160208901620011a0565b8451910190620013c781600d840160208801620011a0565b01600d0195945050505050565b600060e08284031215620013e757600080fd5b60405160e081016001600160401b03811182821017156200140c576200140c62001118565b60405282356200141c8162001092565b815260208301356200142e8162001092565b80602083015250604083013560408201526060830135606082015260808301356200145981620012e7565b608082015260a0838101359082015260c0928301359281019290925250919050565b66037bbb732b91d160cd1b8152600082516200149f816007850160208701620011a0565b600560f91b6007939091019283015250600801919050565b68039b832b73232b91d160bd1b815260008251620014dd816009850160208701620011a0565b600560f91b6009939091019283015250600a01919050565b6603b30b63ab29d160cd1b81526000835162001519816007850160208801620011a0565b600160fd1b60079184019182015283516200153c816008840160208801620011a0565b600560f91b60089290910191820152600901949350505050565b6903232b0b23634b7329d160b51b8152600082516200157d81600a850160208701620011a0565b600560f91b600a939091019283015250600b01919050565b6203b1d160ed1b815260008251620015b5816003850160208701620011a0565b600560f91b6003939091019283015250600401919050565b620391d160ed1b815260008251620015b5816003850160208701620011a0565b620399d160ed1b8152600082516200160d816003850160208701620011a0565b9190910160030192915050565b662832b936b4ba0560c91b815260006007895160206200164082848701838f01620011a0565b8a51918501916200165781858501848f01620011a0565b8a519201916200166d81858501848e01620011a0565b89519201916200168381858501848d01620011a0565b88519201916200169981858501848c01620011a0565b8751920191620016af81858501848b01620011a0565b8651920191620016c581858501848a01620011a0565b919091019091019a9950505050505050505050565b600060208284031215620016ed57600080fd5b5051919050565b808201808211156200171657634e487b7160e01b600052601160045260246000fd5b92915050565b6000602082840312156200172f57600080fd5b8151801515811462000f1157600080fd5b6000825162001754818460208701620011a0565b9190910192915050565b60208152600082518060208401526200177f816040850160208701620011a0565b601f01601f19169190910160400192915050565b60805161399a620017d96000396000818161037601528181610c5401528181610cfb01528181610e8c0152818161101f015281816110c6015261150d015261399a6000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c806385715b67116100d8578063a85aa6641161008c578063d85116bb11610066578063d85116bb1461034b578063f5075a761461035e578063fc0c546a1461037157600080fd5b8063a85aa664146102f8578063ac9650d814610318578063cafac7501461033857600080fd5b806394739e87116100bd57806394739e87146102b35780639c38853e146102da578063a1a02940146102ed57600080fd5b806385715b671461027d57806389a7f48e1461029057600080fd5b80635d6ffc931161012f578063651c51e111610114578063651c51e11461023457806379ea45ac146102495780637d561b101461026a57600080fd5b80635d6ffc931461020157806360734bd81461021457600080fd5b80630a66a442116101605780630a66a442146101c85780630b5e6d28146101db5780632acbad69146101ee57600080fd5b80630182aebc1461017c57806301ffc9a7146101a5575b600080fd5b61018f61018a3660046127f6565b6103b0565b60405161019c9190612894565b60405180910390f35b6101b86101b33660046128f1565b61040f565b604051901515815260200161019c565b61018f6101d636600461296c565b610453565b61018f6101e9366004612a18565b6104ed565b61018f6101fc366004612acf565b61057d565b61018f61020f366004612b13565b6105e6565b61021f63f7d48c1c81565b60405163ffffffff909116815260200161019c565b610247610242366004612bad565b61066e565b005b61025c610257366004612c16565b6106b3565b60405190815260200161019c565b61018f610278366004612c53565b6106be565b61024761028b366004612bad565b61072f565b6101b861029e366004612cc9565b60026020526000908152604090205460ff1681565b61025c7f3c4eccc58df3b1fa05ba717589f6675a1af0cfee2fe59126957513d39f45d1ce81565b6102476102e8366004612ce2565b6107d8565b61021f6377ed603f81565b61030b610306366004612c16565b610894565b60405161019c9190612d45565b61032b610326366004612d58565b61089f565b60405161019c9190612dcd565b61018f610346366004612e4d565b610994565b610247610359366004612ce2565b6109fb565b61018f61036c366004612ecf565b610a5b565b6103987f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161019c565b6103e86040518060a00160405280600063ffffffff168152602001600081526020016000815260200160608152602001606081525090565b610405868686868660405180602001604052806000815250611819565b9695505050505050565b60006001600160e01b031982167f17343c6a00000000000000000000000000000000000000000000000000000000148061044d575061044d826118d2565b92915050565b61048b6040518060a00160405280600063ffffffff168152602001600081526020016000815260200160608152602001606081525090565b6104de8b61049b42610e10612f5d565b8c8c8c8c8c8c8c8c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061191092505050565b9b9a5050505050505050505050565b6105256040518060a00160405280600063ffffffff168152602001600081526020016000815260200160608152602001606081525090565b61056d8c8c8c8c8c8c8c8c8c8c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061191092505050565b9c9b505050505050505050505050565b6105b56040518060a00160405280600063ffffffff168152602001600081526020016000815260200160608152602001606081525090565b6105dd856105c542610e10612f5d565b86868660405180602001604052806000815250611819565b95945050505050565b61061e6040518060a00160405280600063ffffffff168152602001600081526020016000815260200160608152602001606081525090565b610662888888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061181992505050565b98975050505050505050565b6106ae8383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a6692505050565b505050565b600061044d82611b47565b6106f66040518060a00160405280600063ffffffff168152602001600081526020016000815260200160608152602001606081525090565b6107228961070642610e10612f5d565b8a8a8a8a8a8a8a60405180602001604052806000815250611910565b9998505050505050505050565b6002600054036107865760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000819055506107ce8383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b6092505050565b5050600160005550565b60026000540361082a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161077d565b600260005560408051602081018590528082018490527fff0000000000000000000000000000000000000000000000000000000000000060f884901b166060820152815180820360410181526061909101909152610889908590611b60565b505060016000555050565b606061044d82611c5a565b60608167ffffffffffffffff8111156108ba576108ba612f70565b6040519080825280602002602001820160405280156108ed57816020015b60608152602001906001900390816108d85790505b50905060005b8281101561098d5761095d3085858481811061091157610911612f86565b90506020028101906109239190612f9c565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061209492505050565b82828151811061096f5761096f612f86565b6020026020010181905250808061098590613001565b9150506108f3565b5092915050565b6109cc6040518060a00160405280600063ffffffff168152602001600081526020016000815260200160608152602001606081525090565b6109ed8a8a8a8a8a8a8a8a8a60405180602001604052806000815250611910565b9a9950505050505050505050565b60408051602081018590528082018490527fff0000000000000000000000000000000000000000000000000000000000000060f884901b166060820152815180820360410181526061909101909152610a55908590611a66565b50505050565b610a936040518060a00160405280600063ffffffff168152602001600081526020016000815260200160608152602001606081525090565b610ae287610aa342610e10612f5d565b88888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061181992505050565b979650505050505050565b60606000610afd83830184612f9c565b810190610b0a9190613039565b8051604051632b65311f60e11b81526001600160a01b039091166004820152909150731E232D4c772C2A9849aDf2D979201DAbd2c19763906356ca623e90602401600060405180830381865af4158015610b68573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b9091908101906130a1565b604051602001610ba09190613143565b60408051808303601f19018152908290526020830151632b65311f60e11b83526001600160a01b0316600483015290731E232D4c772C2A9849aDf2D979201DAbd2c19763906356ca623e90602401600060405180830381865af4158015610c0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c3391908101906130a1565b604051602001610c439190613193565b6040516020818303038152906040527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610cb0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cd891908101906130a1565b8360400151731E232D4c772C2A9849aDf2D979201DAbd2c1976363338dc7fd90917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7b91906131e3565b6040516001600160e01b031960e085901b168152600481019290925260ff166024820152604401600060405180830381865af4158015610dbf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610de791908101906130a1565b604051602001610df8929190613200565b60408051601f1981840301815290829052610e17939291602001613281565b604051602081830303815290604052915050919050565b600080610e3e6060840184612f9c565b810190610e4b9190613039565b519392505050565b6000610e626060830183612f9c565b810190610e6f9190613039565b805160208201516040830151929350610eb4926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611539565b5050565b60606000610ec883830184612f9c565b810190610ed591906132f3565b8051604051632b65311f60e11b81526001600160a01b039091166004820152909150731E232D4c772C2A9849aDf2D979201DAbd2c19763906356ca623e90602401600060405180830381865af4158015610f33573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f5b91908101906130a1565b604051602001610f6b919061338b565b60408051808303601f19018152908290526020830151632b65311f60e11b83526001600160a01b0316600483015290731E232D4c772C2A9849aDf2D979201DAbd2c19763906356ca623e90602401600060405180830381865af4158015610fd6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ffe91908101906130a1565b60405160200161100e91906133db565b6040516020818303038152906040527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561107b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110a391908101906130a1565b8360400151731E232D4c772C2A9849aDf2D979201DAbd2c1976363338dc7fd90917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611122573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114691906131e3565b6040516001600160e01b031960e085901b168152600481019290925260ff166024820152604401600060405180830381865af415801561118a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111b291908101906130a1565b6040516020016111c392919061342b565b60408051808303601f190181529082905260608501517f4b2dd51900000000000000000000000000000000000000000000000000000000835264ffffffffff16600483015290731E232D4c772C2A9849aDf2D979201DAbd2c1976390634b2dd51990602401600060405180830381865af4158015611245573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261126d91908101906130a1565b60405160200161127d91906134ba565b60408051808303601f1901815290829052608086015163348051d760e11b835260ff16600483015290731E232D4c772C2A9849aDf2D979201DAbd2c1976390636900a3ae90602401600060405180830381865af41580156112e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261130a91908101906130a1565b60405160200161131a919061350a565b60408051808303601f190181529082905260a08701517fb11a19e8000000000000000000000000000000000000000000000000000000008352600483015290731E232D4c772C2A9849aDf2D979201DAbd2c197639063b11a19e890602401600060405180830381865af4158015611395573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113bd91908101906130a1565b6040516020016113cd919061355a565b60408051808303601f190181529082905260c08801517fb11a19e8000000000000000000000000000000000000000000000000000000008352600483015290731E232D4c772C2A9849aDf2D979201DAbd2c197639063b11a19e890602401600060405180830381865af4158015611448573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261147091908101906130a1565b6040516020016114809190613592565b60408051601f1981840301815290829052610e17979695949392916020016135d7565b6000806114b36060840184612f9c565b810190610e4b91906132f3565b60006114cf6060830183612f9c565b8101906114dc91906132f3565b8051602082015160408301516060840151608085015160a086015160c0870151969750610eb4966001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016969594939291906115c1565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610a559085906120bc565b6040517f7ecebe000000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152600091908a1690637ecebe0090602401602060405180830381865afa158015611624573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611648919061369f565b6040517fd505accf0000000000000000000000000000000000000000000000000000000081526001600160a01b038a811660048301528981166024830152604482018990526064820188905260ff8716608483015260a4820186905260c48201859052919250908a169063d505accf9060e401600060405180830381600087803b1580156116d557600080fd5b505af11580156116e9573d6000803e3d6000fd5b50506040517f7ecebe000000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152600093508c169150637ecebe0090602401602060405180830381865afa15801561174f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611773919061369f565b9050611780826001612f5d565b81146117f45760405162461bcd60e51b815260206004820152602160248201527f5361666545524332303a207065726d697420646964206e6f742073756363656560448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161077d565b50505050505050505050565b606061180f84846000856121a1565b90505b9392505050565b6118516040518060a00160405280600063ffffffff168152602001600081526020016000815260200160608152602001606081525090565b506040805160a08101825263f7d48c1c8152602080820198909852808201969096528051606080820183526001600160a01b03968716808352958716828a0190815291830194855282519889019590955251909416868501529051858301528251808603830181526080958601909352908301919091529181019190915290565b60006001600160e01b031982167f1f5eba8200000000000000000000000000000000000000000000000000000000148061044d575061044d826122de565b6119486040518060a00160405280600063ffffffff168152602001600081526020016000815260200160608152602001606081525090565b6040518060a001604052807f77ed603f8652441f01366c10fab285b166be94dd5c89e1dcd972a451dda1827d60e01c63ffffffff1681526020018c81526020018b81526020016040518060e001604052808c6001600160a01b031681526020018b6001600160a01b031681526020018a81526020018981526020018860ff16815260200187815260200186815250604051602001611a3f9190600060e0820190506001600160a01b0380845116835280602085015116602084015250604083015160408301526060830151606083015260ff608084015116608083015260a083015160a083015260c083015160c083015292915050565b60408051601f19818403018152919052815260200192909252509998505050505050505050565b611a81611a7283612345565b611a7b84611b47565b8361238a565b611af35760405162461bcd60e51b815260206004820152602260248201527f476174657761793a20696e76616c696420766f7563686572207369676e61747560448201527f7265000000000000000000000000000000000000000000000000000000000000606482015260840161077d565b8160400135421115610eb45760405162461bcd60e51b815260206004820152601960248201527f476174657761793a206578706972656420646561646c696e6500000000000000604482015260640161077d565b6000611b5282611c5a565b805190602001209050919050565b611b6a8282611a66565b6000611b7583611b47565b60008181526002602052604090205490915060ff1615611bd75760405162461bcd60e51b815260206004820152601f60248201527f476174657761793a20766f756368657220616c72656164792073657276656400604482015260640161077d565b600081815260026020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055611c17836124f9565b807fd193a54dd0b0b5884cffc665f0803faa8d7f44280881b0a277878158bebd4c5d336040516001600160a01b03909116815260200160405180910390a2505050565b6060611c6582612545565b604051602001611c7591906136b8565b60408051601f19818403018152919052611c9260208401846136dd565b60405163348051d760e11b815263ffffffff9091166004820152731E232D4c772C2A9849aDf2D979201DAbd2c1976390636900a3ae90602401600060405180830381865af4158015611ce8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d1091908101906130a1565b604051602001611d209190613703565b60408051808303601f190181529082905263348051d760e11b82526020850135600483015290731E232D4c772C2A9849aDf2D979201DAbd2c1976390636900a3ae90602401600060405180830381865af4158015611d82573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611daa91908101906130a1565b604051602001611dba9190613753565b60408051808303601f190181528282527f4b2dd5190000000000000000000000000000000000000000000000000000000083529086013564ffffffffff16600483015290731E232D4c772C2A9849aDf2D979201DAbd2c1976390634b2dd51990602401600060405180830381865af4158015611e3a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e6291908101906130a1565b604051602001611e7291906134ba565b60408051601f19818403018152919052611e8f6060870187612f9c565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040517f71aad10d000000000000000000000000000000000000000000000000000000008152731E232D4c772C2A9849aDf2D979201DAbd2c19763936371aad10d9350611f12925090600401612d45565b600060405180830381865af4158015611f2f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f5791908101906130a1565b604051602001611f67919061378b565b60408051601f19818403018152919052611f846080880188612f9c565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040517f71aad10d000000000000000000000000000000000000000000000000000000008152731E232D4c772C2A9849aDf2D979201DAbd2c19763936371aad10d9350612007925090600401612d45565b600060405180830381865af4158015612024573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261204c91908101906130a1565b60405160200161205c91906137c3565b60408051601f198184030181529082905261207e969594939291602001613808565b6040516020818303038152906040529050919050565b6060611812838360405180606001604052806027815260200161393e6027913961257f565b50565b6000612111826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118009092919063ffffffff16565b8051909150156106ae578080602001905181019061212f91906138ba565b6106ae5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161077d565b6060824710156122195760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161077d565b6001600160a01b0385163b6122705760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161077d565b600080866001600160a01b0316858760405161228c91906138dc565b60006040518083038185875af1925050503d80600081146122c9576040519150601f19603f3d011682016040523d82523d6000602084013e6122ce565b606091505b5091509150610ae2828286612665565b60006001600160e01b031982167f686010c200000000000000000000000000000000000000000000000000000000148061044d57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161461044d565b600061044d8260018361235b60208401846136dd565b63ffffffff908116825260208201929092526040016000205468010000000000000000900480156127d0021716565b6000806000612399858561269e565b909250905060008160048111156123b2576123b26138f8565b1480156123d05750856001600160a01b0316826001600160a01b0316145b156123e057600192505050611812565b600080876001600160a01b0316631626ba7e60e01b888860405160240161240892919061390e565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990941693909317909252905161245b91906138dc565b600060405180830381855afa9150503d8060008114612496576040519150601f19603f3d011682016040523d82523d6000602084013e61249b565b606091505b50915091508180156124ae575080516020145b8015610662575080517f1626ba7e00000000000000000000000000000000000000000000000000000000906124ec908301602090810190840161369f565b1498975050505050505050565b6120b9816001600061250e60208401846136dd565b63ffffffff9081168252602082019290925260400160002054700100000000000000000000000000000000900480156127d0021716565b606061044d826001600061255c60208401846136dd565b63ffffffff90811682526020820192909252604001600020546127d08115021716565b60606001600160a01b0384163b6125fe5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161077d565b600080856001600160a01b03168560405161261991906138dc565b600060405180830381855af49150503d8060008114612654576040519150601f19603f3d011682016040523d82523d6000602084013e612659565b606091505b50915091506104058282865b60608315612674575081611812565b8251156126845782518084602001fd5b8160405162461bcd60e51b815260040161077d9190612d45565b60008082516041036126d45760208301516040840151606085015160001a6126c8878285856126e3565b945094505050506126dc565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561271a57506000905060036127c7565b8460ff16601b1415801561273257508460ff16601c14155b1561274357506000905060046127c7565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612797573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166127c0576000600192509250506127c7565b9150600090505b94509492505050565b6127d8613927565b565b80356001600160a01b03811681146127f157600080fd5b919050565b600080600080600060a0868803121561280e57600080fd5b8535945060208601359350612825604087016127da565b9250612833606087016127da565b949793965091946080013592915050565b60005b8381101561285f578181015183820152602001612847565b50506000910152565b60008151808452612880816020860160208601612844565b601f01601f19169290920160200192915050565b6020815263ffffffff825116602082015260208201516040820152604082015160608201526000606083015160a060808401526128d460c0840182612868565b90506080840151601f198483030160a08501526105dd8282612868565b60006020828403121561290357600080fd5b81356001600160e01b03198116811461181257600080fd5b60ff811681146120b957600080fd5b60008083601f84011261293c57600080fd5b50813567ffffffffffffffff81111561295457600080fd5b6020830191508360208285010111156126dc57600080fd5b6000806000806000806000806000806101208b8d03121561298c57600080fd5b8a35995061299c60208c016127da565b98506129aa60408c016127da565b975060608b0135965060808b0135955060a08b01356129c88161291b565b945060c08b0135935060e08b013592506101008b013567ffffffffffffffff8111156129f357600080fd5b6129ff8d828e0161292a565b915080935050809150509295989b9194979a5092959850565b60008060008060008060008060008060006101408c8e031215612a3a57600080fd5b8b359a5060208c01359950612a5160408d016127da565b9850612a5f60608d016127da565b975060808c0135965060a08c0135955060c08c0135612a7d8161291b565b945060e08c013593506101008c013592506101208c013567ffffffffffffffff811115612aa957600080fd5b612ab58e828f0161292a565b915080935050809150509295989b509295989b9093969950565b60008060008060808587031215612ae557600080fd5b84359350612af5602086016127da565b9250612b03604086016127da565b9396929550929360600135925050565b600080600080600080600060c0888a031215612b2e57600080fd5b8735965060208801359550612b45604089016127da565b9450612b53606089016127da565b93506080880135925060a088013567ffffffffffffffff811115612b7657600080fd5b612b828a828b0161292a565b989b979a50959850939692959293505050565b600060a08284031215612ba757600080fd5b50919050565b600080600060408486031215612bc257600080fd5b833567ffffffffffffffff80821115612bda57600080fd5b612be687838801612b95565b94506020860135915080821115612bfc57600080fd5b50612c098682870161292a565b9497909650939450505050565b600060208284031215612c2857600080fd5b813567ffffffffffffffff811115612c3f57600080fd5b612c4b84828501612b95565b949350505050565b600080600080600080600080610100898b031215612c7057600080fd5b88359750612c8060208a016127da565b9650612c8e60408a016127da565b9550606089013594506080890135935060a0890135612cac8161291b565b979a969950949793969295929450505060c08201359160e0013590565b600060208284031215612cdb57600080fd5b5035919050565b60008060008060808587031215612cf857600080fd5b843567ffffffffffffffff811115612d0f57600080fd5b612d1b87828801612b95565b94505060208501359250604085013591506060850135612d3a8161291b565b939692955090935050565b6020815260006118126020830184612868565b60008060208385031215612d6b57600080fd5b823567ffffffffffffffff80821115612d8357600080fd5b818501915085601f830112612d9757600080fd5b813581811115612da657600080fd5b8660208260051b8501011115612dbb57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612e40577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452612e2e858351612868565b94509285019290850190600101612df4565b5092979650505050505050565b60008060008060008060008060006101208a8c031215612e6c57600080fd5b8935985060208a01359750612e8360408b016127da565b9650612e9160608b016127da565b955060808a0135945060a08a0135935060c08a0135612eaf8161291b565b8093505060e08a013591506101008a013590509295985092959850929598565b60008060008060008060a08789031215612ee857600080fd5b86359550612ef8602088016127da565b9450612f06604088016127da565b935060608701359250608087013567ffffffffffffffff811115612f2957600080fd5b612f3589828a0161292a565b979a9699509497509295939492505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561044d5761044d612f47565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612fd157600080fd5b83018035915067ffffffffffffffff821115612fec57600080fd5b6020019150368190038213156126dc57600080fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361303257613032612f47565b5060010190565b60006060828403121561304b57600080fd5b6040516060810181811067ffffffffffffffff8211171561306e5761306e612f70565b60405261307a836127da565b8152613088602084016127da565b6020820152604083013560408201528091505092915050565b6000602082840312156130b357600080fd5b815167ffffffffffffffff808211156130cb57600080fd5b818401915084601f8301126130df57600080fd5b8151818111156130f1576130f1612f70565b604051601f8201601f19908116603f0116810190838211818310171561311957613119612f70565b8160405282815287602084870101111561313257600080fd5b610ae2836020830160208801612844565b7f66726f6d3a20000000000000000000000000000000000000000000000000000081526000825161317b816006850160208701612844565b600560f91b6006939091019283015250600701919050565b7f746f3a20000000000000000000000000000000000000000000000000000000008152600082516131cb816004850160208701612844565b600560f91b6004939091019283015250600501919050565b6000602082840312156131f557600080fd5b81516118128161291b565b7f616d6f756e743a20000000000000000000000000000000000000000000000000815260008351613238816008850160208801612844565b7f20000000000000000000000000000000000000000000000000000000000000006008918401918201528351613275816009840160208801612844565b01600901949350505050565b7f5472616e7366657246726f6d0a000000000000000000000000000000000000008152600084516132b981600d850160208901612844565b8451908301906132d081600d840160208901612844565b84519101906132e681600d840160208801612844565b01600d0195945050505050565b600060e0828403121561330557600080fd5b60405160e0810181811067ffffffffffffffff8211171561332857613328612f70565b604052613334836127da565b8152613342602084016127da565b6020820152604083013560408201526060830135606082015260808301356133698161291b565b608082015260a0838101359082015260c0928301359281019290925250919050565b7f6f776e65723a20000000000000000000000000000000000000000000000000008152600082516133c3816007850160208701612844565b600560f91b6007939091019283015250600801919050565b7f7370656e6465723a200000000000000000000000000000000000000000000000815260008251613413816009850160208701612844565b600560f91b6009939091019283015250600a01919050565b7f76616c75653a2000000000000000000000000000000000000000000000000000815260008351613463816007850160208801612844565b7f200000000000000000000000000000000000000000000000000000000000000060079184019182015283516134a0816008840160208801612844565b600560f91b60089290910191820152600901949350505050565b7f646561646c696e653a20000000000000000000000000000000000000000000008152600082516134f281600a850160208701612844565b600560f91b600a939091019283015250600b01919050565b7f763a200000000000000000000000000000000000000000000000000000000000815260008251613542816003850160208701612844565b600560f91b6003939091019283015250600401919050565b7f723a200000000000000000000000000000000000000000000000000000000000815260008251613542816003850160208701612844565b7f733a2000000000000000000000000000000000000000000000000000000000008152600082516135ca816003850160208701612844565b9190910160030192915050565b7f5065726d69740a000000000000000000000000000000000000000000000000008152600060078951602061361182848701838f01612844565b8a519185019161362681858501848f01612844565b8a5192019161363a81858501848e01612844565b895192019161364e81858501848d01612844565b885192019161366281858501848c01612844565b875192019161367681858501848b01612844565b865192019161368a81858501848a01612844565b919091019091019a9950505050505050505050565b6000602082840312156136b157600080fd5b5051919050565b600082516136ca818460208701612844565b600560f91b920191825250600101919050565b6000602082840312156136ef57600080fd5b813563ffffffff8116811461181257600080fd5b7f7461673a2000000000000000000000000000000000000000000000000000000081526000825161373b816005850160208701612844565b600560f91b6005939091019283015250600601919050565b7f6e6f6e63653a20000000000000000000000000000000000000000000000000008152600082516133c3816007850160208701612844565b7f7061796c6f61643a200000000000000000000000000000000000000000000000815260008251613413816009850160208701612844565b7f6d657461646174613a20000000000000000000000000000000000000000000008152600082516137fb81600a850160208701612844565b91909101600a0192915050565b60008751602061381b8285838d01612844565b81840191507f2d2d2d0a0000000000000000000000000000000000000000000000000000000082526004895161385681838601858e01612844565b895193019261386a81838601858d01612844565b885193019261387e81838601858c01612844565b875193019261389281838601858b01612844565b86519301926138a681838601858a01612844565b929092019091019998505050505050505050565b6000602082840312156138cc57600080fd5b8151801515811461181257600080fd5b600082516138ee818460208701612844565b9190910192915050565b634e487b7160e01b600052602160045260246000fd5b82815260406020820152600061180f6040830184612868565b634e487b7160e01b600052605160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220c6c6b50510250ebacc3ab0860a0b870c09479f6413349908d7ff365c8de9372f64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c806385715b67116100d8578063a85aa6641161008c578063d85116bb11610066578063d85116bb1461034b578063f5075a761461035e578063fc0c546a1461037157600080fd5b8063a85aa664146102f8578063ac9650d814610318578063cafac7501461033857600080fd5b806394739e87116100bd57806394739e87146102b35780639c38853e146102da578063a1a02940146102ed57600080fd5b806385715b671461027d57806389a7f48e1461029057600080fd5b80635d6ffc931161012f578063651c51e111610114578063651c51e11461023457806379ea45ac146102495780637d561b101461026a57600080fd5b80635d6ffc931461020157806360734bd81461021457600080fd5b80630a66a442116101605780630a66a442146101c85780630b5e6d28146101db5780632acbad69146101ee57600080fd5b80630182aebc1461017c57806301ffc9a7146101a5575b600080fd5b61018f61018a3660046127f6565b6103b0565b60405161019c9190612894565b60405180910390f35b6101b86101b33660046128f1565b61040f565b604051901515815260200161019c565b61018f6101d636600461296c565b610453565b61018f6101e9366004612a18565b6104ed565b61018f6101fc366004612acf565b61057d565b61018f61020f366004612b13565b6105e6565b61021f63f7d48c1c81565b60405163ffffffff909116815260200161019c565b610247610242366004612bad565b61066e565b005b61025c610257366004612c16565b6106b3565b60405190815260200161019c565b61018f610278366004612c53565b6106be565b61024761028b366004612bad565b61072f565b6101b861029e366004612cc9565b60026020526000908152604090205460ff1681565b61025c7f3c4eccc58df3b1fa05ba717589f6675a1af0cfee2fe59126957513d39f45d1ce81565b6102476102e8366004612ce2565b6107d8565b61021f6377ed603f81565b61030b610306366004612c16565b610894565b60405161019c9190612d45565b61032b610326366004612d58565b61089f565b60405161019c9190612dcd565b61018f610346366004612e4d565b610994565b610247610359366004612ce2565b6109fb565b61018f61036c366004612ecf565b610a5b565b6103987f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161019c565b6103e86040518060a00160405280600063ffffffff168152602001600081526020016000815260200160608152602001606081525090565b610405868686868660405180602001604052806000815250611819565b9695505050505050565b60006001600160e01b031982167f17343c6a00000000000000000000000000000000000000000000000000000000148061044d575061044d826118d2565b92915050565b61048b6040518060a00160405280600063ffffffff168152602001600081526020016000815260200160608152602001606081525090565b6104de8b61049b42610e10612f5d565b8c8c8c8c8c8c8c8c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061191092505050565b9b9a5050505050505050505050565b6105256040518060a00160405280600063ffffffff168152602001600081526020016000815260200160608152602001606081525090565b61056d8c8c8c8c8c8c8c8c8c8c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061191092505050565b9c9b505050505050505050505050565b6105b56040518060a00160405280600063ffffffff168152602001600081526020016000815260200160608152602001606081525090565b6105dd856105c542610e10612f5d565b86868660405180602001604052806000815250611819565b95945050505050565b61061e6040518060a00160405280600063ffffffff168152602001600081526020016000815260200160608152602001606081525090565b610662888888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061181992505050565b98975050505050505050565b6106ae8383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a6692505050565b505050565b600061044d82611b47565b6106f66040518060a00160405280600063ffffffff168152602001600081526020016000815260200160608152602001606081525090565b6107228961070642610e10612f5d565b8a8a8a8a8a8a8a60405180602001604052806000815250611910565b9998505050505050505050565b6002600054036107865760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000819055506107ce8383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b6092505050565b5050600160005550565b60026000540361082a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161077d565b600260005560408051602081018590528082018490527fff0000000000000000000000000000000000000000000000000000000000000060f884901b166060820152815180820360410181526061909101909152610889908590611b60565b505060016000555050565b606061044d82611c5a565b60608167ffffffffffffffff8111156108ba576108ba612f70565b6040519080825280602002602001820160405280156108ed57816020015b60608152602001906001900390816108d85790505b50905060005b8281101561098d5761095d3085858481811061091157610911612f86565b90506020028101906109239190612f9c565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061209492505050565b82828151811061096f5761096f612f86565b6020026020010181905250808061098590613001565b9150506108f3565b5092915050565b6109cc6040518060a00160405280600063ffffffff168152602001600081526020016000815260200160608152602001606081525090565b6109ed8a8a8a8a8a8a8a8a8a60405180602001604052806000815250611910565b9a9950505050505050505050565b60408051602081018590528082018490527fff0000000000000000000000000000000000000000000000000000000000000060f884901b166060820152815180820360410181526061909101909152610a55908590611a66565b50505050565b610a936040518060a00160405280600063ffffffff168152602001600081526020016000815260200160608152602001606081525090565b610ae287610aa342610e10612f5d565b88888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061181992505050565b979650505050505050565b60606000610afd83830184612f9c565b810190610b0a9190613039565b8051604051632b65311f60e11b81526001600160a01b03909116600482015290915073__$6c26b6356be7587ae5a263a1ef0d5ec208$__906356ca623e90602401600060405180830381865af4158015610b68573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b9091908101906130a1565b604051602001610ba09190613143565b60408051808303601f19018152908290526020830151632b65311f60e11b83526001600160a01b031660048301529073__$6c26b6356be7587ae5a263a1ef0d5ec208$__906356ca623e90602401600060405180830381865af4158015610c0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c3391908101906130a1565b604051602001610c439190613193565b6040516020818303038152906040527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610cb0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cd891908101906130a1565b836040015173__$6c26b6356be7587ae5a263a1ef0d5ec208$__63338dc7fd90917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7b91906131e3565b6040516001600160e01b031960e085901b168152600481019290925260ff166024820152604401600060405180830381865af4158015610dbf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610de791908101906130a1565b604051602001610df8929190613200565b60408051601f1981840301815290829052610e17939291602001613281565b604051602081830303815290604052915050919050565b600080610e3e6060840184612f9c565b810190610e4b9190613039565b519392505050565b6000610e626060830183612f9c565b810190610e6f9190613039565b805160208201516040830151929350610eb4926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190611539565b5050565b60606000610ec883830184612f9c565b810190610ed591906132f3565b8051604051632b65311f60e11b81526001600160a01b03909116600482015290915073__$6c26b6356be7587ae5a263a1ef0d5ec208$__906356ca623e90602401600060405180830381865af4158015610f33573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f5b91908101906130a1565b604051602001610f6b919061338b565b60408051808303601f19018152908290526020830151632b65311f60e11b83526001600160a01b031660048301529073__$6c26b6356be7587ae5a263a1ef0d5ec208$__906356ca623e90602401600060405180830381865af4158015610fd6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ffe91908101906130a1565b60405160200161100e91906133db565b6040516020818303038152906040527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561107b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110a391908101906130a1565b836040015173__$6c26b6356be7587ae5a263a1ef0d5ec208$__63338dc7fd90917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611122573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114691906131e3565b6040516001600160e01b031960e085901b168152600481019290925260ff166024820152604401600060405180830381865af415801561118a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111b291908101906130a1565b6040516020016111c392919061342b565b60408051808303601f190181529082905260608501517f4b2dd51900000000000000000000000000000000000000000000000000000000835264ffffffffff1660048301529073__$6c26b6356be7587ae5a263a1ef0d5ec208$__90634b2dd51990602401600060405180830381865af4158015611245573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261126d91908101906130a1565b60405160200161127d91906134ba565b60408051808303601f1901815290829052608086015163348051d760e11b835260ff1660048301529073__$6c26b6356be7587ae5a263a1ef0d5ec208$__90636900a3ae90602401600060405180830381865af41580156112e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261130a91908101906130a1565b60405160200161131a919061350a565b60408051808303601f190181529082905260a08701517fb11a19e800000000000000000000000000000000000000000000000000000000835260048301529073__$6c26b6356be7587ae5a263a1ef0d5ec208$__9063b11a19e890602401600060405180830381865af4158015611395573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113bd91908101906130a1565b6040516020016113cd919061355a565b60408051808303601f190181529082905260c08801517fb11a19e800000000000000000000000000000000000000000000000000000000835260048301529073__$6c26b6356be7587ae5a263a1ef0d5ec208$__9063b11a19e890602401600060405180830381865af4158015611448573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261147091908101906130a1565b6040516020016114809190613592565b60408051601f1981840301815290829052610e17979695949392916020016135d7565b6000806114b36060840184612f9c565b810190610e4b91906132f3565b60006114cf6060830183612f9c565b8101906114dc91906132f3565b8051602082015160408301516060840151608085015160a086015160c0870151969750610eb4966001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016969594939291906115c1565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610a559085906120bc565b6040517f7ecebe000000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152600091908a1690637ecebe0090602401602060405180830381865afa158015611624573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611648919061369f565b6040517fd505accf0000000000000000000000000000000000000000000000000000000081526001600160a01b038a811660048301528981166024830152604482018990526064820188905260ff8716608483015260a4820186905260c48201859052919250908a169063d505accf9060e401600060405180830381600087803b1580156116d557600080fd5b505af11580156116e9573d6000803e3d6000fd5b50506040517f7ecebe000000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152600093508c169150637ecebe0090602401602060405180830381865afa15801561174f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611773919061369f565b9050611780826001612f5d565b81146117f45760405162461bcd60e51b815260206004820152602160248201527f5361666545524332303a207065726d697420646964206e6f742073756363656560448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161077d565b50505050505050505050565b606061180f84846000856121a1565b90505b9392505050565b6118516040518060a00160405280600063ffffffff168152602001600081526020016000815260200160608152602001606081525090565b506040805160a08101825263f7d48c1c8152602080820198909852808201969096528051606080820183526001600160a01b03968716808352958716828a0190815291830194855282519889019590955251909416868501529051858301528251808603830181526080958601909352908301919091529181019190915290565b60006001600160e01b031982167f1f5eba8200000000000000000000000000000000000000000000000000000000148061044d575061044d826122de565b6119486040518060a00160405280600063ffffffff168152602001600081526020016000815260200160608152602001606081525090565b6040518060a001604052807f77ed603f8652441f01366c10fab285b166be94dd5c89e1dcd972a451dda1827d60e01c63ffffffff1681526020018c81526020018b81526020016040518060e001604052808c6001600160a01b031681526020018b6001600160a01b031681526020018a81526020018981526020018860ff16815260200187815260200186815250604051602001611a3f9190600060e0820190506001600160a01b0380845116835280602085015116602084015250604083015160408301526060830151606083015260ff608084015116608083015260a083015160a083015260c083015160c083015292915050565b60408051601f19818403018152919052815260200192909252509998505050505050505050565b611a81611a7283612345565b611a7b84611b47565b8361238a565b611af35760405162461bcd60e51b815260206004820152602260248201527f476174657761793a20696e76616c696420766f7563686572207369676e61747560448201527f7265000000000000000000000000000000000000000000000000000000000000606482015260840161077d565b8160400135421115610eb45760405162461bcd60e51b815260206004820152601960248201527f476174657761793a206578706972656420646561646c696e6500000000000000604482015260640161077d565b6000611b5282611c5a565b805190602001209050919050565b611b6a8282611a66565b6000611b7583611b47565b60008181526002602052604090205490915060ff1615611bd75760405162461bcd60e51b815260206004820152601f60248201527f476174657761793a20766f756368657220616c72656164792073657276656400604482015260640161077d565b600081815260026020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055611c17836124f9565b807fd193a54dd0b0b5884cffc665f0803faa8d7f44280881b0a277878158bebd4c5d336040516001600160a01b03909116815260200160405180910390a2505050565b6060611c6582612545565b604051602001611c7591906136b8565b60408051601f19818403018152919052611c9260208401846136dd565b60405163348051d760e11b815263ffffffff909116600482015273__$6c26b6356be7587ae5a263a1ef0d5ec208$__90636900a3ae90602401600060405180830381865af4158015611ce8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d1091908101906130a1565b604051602001611d209190613703565b60408051808303601f190181529082905263348051d760e11b8252602085013560048301529073__$6c26b6356be7587ae5a263a1ef0d5ec208$__90636900a3ae90602401600060405180830381865af4158015611d82573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611daa91908101906130a1565b604051602001611dba9190613753565b60408051808303601f190181528282527f4b2dd5190000000000000000000000000000000000000000000000000000000083529086013564ffffffffff1660048301529073__$6c26b6356be7587ae5a263a1ef0d5ec208$__90634b2dd51990602401600060405180830381865af4158015611e3a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e6291908101906130a1565b604051602001611e7291906134ba565b60408051601f19818403018152919052611e8f6060870187612f9c565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040517f71aad10d00000000000000000000000000000000000000000000000000000000815273__$6c26b6356be7587ae5a263a1ef0d5ec208$__936371aad10d9350611f12925090600401612d45565b600060405180830381865af4158015611f2f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f5791908101906130a1565b604051602001611f67919061378b565b60408051601f19818403018152919052611f846080880188612f9c565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040517f71aad10d00000000000000000000000000000000000000000000000000000000815273__$6c26b6356be7587ae5a263a1ef0d5ec208$__936371aad10d9350612007925090600401612d45565b600060405180830381865af4158015612024573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261204c91908101906130a1565b60405160200161205c91906137c3565b60408051601f198184030181529082905261207e969594939291602001613808565b6040516020818303038152906040529050919050565b6060611812838360405180606001604052806027815260200161393e6027913961257f565b50565b6000612111826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118009092919063ffffffff16565b8051909150156106ae578080602001905181019061212f91906138ba565b6106ae5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161077d565b6060824710156122195760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161077d565b6001600160a01b0385163b6122705760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161077d565b600080866001600160a01b0316858760405161228c91906138dc565b60006040518083038185875af1925050503d80600081146122c9576040519150601f19603f3d011682016040523d82523d6000602084013e6122ce565b606091505b5091509150610ae2828286612665565b60006001600160e01b031982167f686010c200000000000000000000000000000000000000000000000000000000148061044d57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161461044d565b600061044d8260018361235b60208401846136dd565b63ffffffff908116825260208201929092526040016000205468010000000000000000900480156127d0021716565b6000806000612399858561269e565b909250905060008160048111156123b2576123b26138f8565b1480156123d05750856001600160a01b0316826001600160a01b0316145b156123e057600192505050611812565b600080876001600160a01b0316631626ba7e60e01b888860405160240161240892919061390e565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990941693909317909252905161245b91906138dc565b600060405180830381855afa9150503d8060008114612496576040519150601f19603f3d011682016040523d82523d6000602084013e61249b565b606091505b50915091508180156124ae575080516020145b8015610662575080517f1626ba7e00000000000000000000000000000000000000000000000000000000906124ec908301602090810190840161369f565b1498975050505050505050565b6120b9816001600061250e60208401846136dd565b63ffffffff9081168252602082019290925260400160002054700100000000000000000000000000000000900480156127d0021716565b606061044d826001600061255c60208401846136dd565b63ffffffff90811682526020820192909252604001600020546127d08115021716565b60606001600160a01b0384163b6125fe5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161077d565b600080856001600160a01b03168560405161261991906138dc565b600060405180830381855af49150503d8060008114612654576040519150601f19603f3d011682016040523d82523d6000602084013e612659565b606091505b50915091506104058282865b60608315612674575081611812565b8251156126845782518084602001fd5b8160405162461bcd60e51b815260040161077d9190612d45565b60008082516041036126d45760208301516040840151606085015160001a6126c8878285856126e3565b945094505050506126dc565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561271a57506000905060036127c7565b8460ff16601b1415801561273257508460ff16601c14155b1561274357506000905060046127c7565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612797573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166127c0576000600192509250506127c7565b9150600090505b94509492505050565b6127d8613927565b565b80356001600160a01b03811681146127f157600080fd5b919050565b600080600080600060a0868803121561280e57600080fd5b8535945060208601359350612825604087016127da565b9250612833606087016127da565b949793965091946080013592915050565b60005b8381101561285f578181015183820152602001612847565b50506000910152565b60008151808452612880816020860160208601612844565b601f01601f19169290920160200192915050565b6020815263ffffffff825116602082015260208201516040820152604082015160608201526000606083015160a060808401526128d460c0840182612868565b90506080840151601f198483030160a08501526105dd8282612868565b60006020828403121561290357600080fd5b81356001600160e01b03198116811461181257600080fd5b60ff811681146120b957600080fd5b60008083601f84011261293c57600080fd5b50813567ffffffffffffffff81111561295457600080fd5b6020830191508360208285010111156126dc57600080fd5b6000806000806000806000806000806101208b8d03121561298c57600080fd5b8a35995061299c60208c016127da565b98506129aa60408c016127da565b975060608b0135965060808b0135955060a08b01356129c88161291b565b945060c08b0135935060e08b013592506101008b013567ffffffffffffffff8111156129f357600080fd5b6129ff8d828e0161292a565b915080935050809150509295989b9194979a5092959850565b60008060008060008060008060008060006101408c8e031215612a3a57600080fd5b8b359a5060208c01359950612a5160408d016127da565b9850612a5f60608d016127da565b975060808c0135965060a08c0135955060c08c0135612a7d8161291b565b945060e08c013593506101008c013592506101208c013567ffffffffffffffff811115612aa957600080fd5b612ab58e828f0161292a565b915080935050809150509295989b509295989b9093969950565b60008060008060808587031215612ae557600080fd5b84359350612af5602086016127da565b9250612b03604086016127da565b9396929550929360600135925050565b600080600080600080600060c0888a031215612b2e57600080fd5b8735965060208801359550612b45604089016127da565b9450612b53606089016127da565b93506080880135925060a088013567ffffffffffffffff811115612b7657600080fd5b612b828a828b0161292a565b989b979a50959850939692959293505050565b600060a08284031215612ba757600080fd5b50919050565b600080600060408486031215612bc257600080fd5b833567ffffffffffffffff80821115612bda57600080fd5b612be687838801612b95565b94506020860135915080821115612bfc57600080fd5b50612c098682870161292a565b9497909650939450505050565b600060208284031215612c2857600080fd5b813567ffffffffffffffff811115612c3f57600080fd5b612c4b84828501612b95565b949350505050565b600080600080600080600080610100898b031215612c7057600080fd5b88359750612c8060208a016127da565b9650612c8e60408a016127da565b9550606089013594506080890135935060a0890135612cac8161291b565b979a969950949793969295929450505060c08201359160e0013590565b600060208284031215612cdb57600080fd5b5035919050565b60008060008060808587031215612cf857600080fd5b843567ffffffffffffffff811115612d0f57600080fd5b612d1b87828801612b95565b94505060208501359250604085013591506060850135612d3a8161291b565b939692955090935050565b6020815260006118126020830184612868565b60008060208385031215612d6b57600080fd5b823567ffffffffffffffff80821115612d8357600080fd5b818501915085601f830112612d9757600080fd5b813581811115612da657600080fd5b8660208260051b8501011115612dbb57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612e40577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452612e2e858351612868565b94509285019290850190600101612df4565b5092979650505050505050565b60008060008060008060008060006101208a8c031215612e6c57600080fd5b8935985060208a01359750612e8360408b016127da565b9650612e9160608b016127da565b955060808a0135945060a08a0135935060c08a0135612eaf8161291b565b8093505060e08a013591506101008a013590509295985092959850929598565b60008060008060008060a08789031215612ee857600080fd5b86359550612ef8602088016127da565b9450612f06604088016127da565b935060608701359250608087013567ffffffffffffffff811115612f2957600080fd5b612f3589828a0161292a565b979a9699509497509295939492505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561044d5761044d612f47565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612fd157600080fd5b83018035915067ffffffffffffffff821115612fec57600080fd5b6020019150368190038213156126dc57600080fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361303257613032612f47565b5060010190565b60006060828403121561304b57600080fd5b6040516060810181811067ffffffffffffffff8211171561306e5761306e612f70565b60405261307a836127da565b8152613088602084016127da565b6020820152604083013560408201528091505092915050565b6000602082840312156130b357600080fd5b815167ffffffffffffffff808211156130cb57600080fd5b818401915084601f8301126130df57600080fd5b8151818111156130f1576130f1612f70565b604051601f8201601f19908116603f0116810190838211818310171561311957613119612f70565b8160405282815287602084870101111561313257600080fd5b610ae2836020830160208801612844565b7f66726f6d3a20000000000000000000000000000000000000000000000000000081526000825161317b816006850160208701612844565b600560f91b6006939091019283015250600701919050565b7f746f3a20000000000000000000000000000000000000000000000000000000008152600082516131cb816004850160208701612844565b600560f91b6004939091019283015250600501919050565b6000602082840312156131f557600080fd5b81516118128161291b565b7f616d6f756e743a20000000000000000000000000000000000000000000000000815260008351613238816008850160208801612844565b7f20000000000000000000000000000000000000000000000000000000000000006008918401918201528351613275816009840160208801612844565b01600901949350505050565b7f5472616e7366657246726f6d0a000000000000000000000000000000000000008152600084516132b981600d850160208901612844565b8451908301906132d081600d840160208901612844565b84519101906132e681600d840160208801612844565b01600d0195945050505050565b600060e0828403121561330557600080fd5b60405160e0810181811067ffffffffffffffff8211171561332857613328612f70565b604052613334836127da565b8152613342602084016127da565b6020820152604083013560408201526060830135606082015260808301356133698161291b565b608082015260a0838101359082015260c0928301359281019290925250919050565b7f6f776e65723a20000000000000000000000000000000000000000000000000008152600082516133c3816007850160208701612844565b600560f91b6007939091019283015250600801919050565b7f7370656e6465723a200000000000000000000000000000000000000000000000815260008251613413816009850160208701612844565b600560f91b6009939091019283015250600a01919050565b7f76616c75653a2000000000000000000000000000000000000000000000000000815260008351613463816007850160208801612844565b7f200000000000000000000000000000000000000000000000000000000000000060079184019182015283516134a0816008840160208801612844565b600560f91b60089290910191820152600901949350505050565b7f646561646c696e653a20000000000000000000000000000000000000000000008152600082516134f281600a850160208701612844565b600560f91b600a939091019283015250600b01919050565b7f763a200000000000000000000000000000000000000000000000000000000000815260008251613542816003850160208701612844565b600560f91b6003939091019283015250600401919050565b7f723a200000000000000000000000000000000000000000000000000000000000815260008251613542816003850160208701612844565b7f733a2000000000000000000000000000000000000000000000000000000000008152600082516135ca816003850160208701612844565b9190910160030192915050565b7f5065726d69740a000000000000000000000000000000000000000000000000008152600060078951602061361182848701838f01612844565b8a519185019161362681858501848f01612844565b8a5192019161363a81858501848e01612844565b895192019161364e81858501848d01612844565b885192019161366281858501848c01612844565b875192019161367681858501848b01612844565b865192019161368a81858501848a01612844565b919091019091019a9950505050505050505050565b6000602082840312156136b157600080fd5b5051919050565b600082516136ca818460208701612844565b600560f91b920191825250600101919050565b6000602082840312156136ef57600080fd5b813563ffffffff8116811461181257600080fd5b7f7461673a2000000000000000000000000000000000000000000000000000000081526000825161373b816005850160208701612844565b600560f91b6005939091019283015250600601919050565b7f6e6f6e63653a20000000000000000000000000000000000000000000000000008152600082516133c3816007850160208701612844565b7f7061796c6f61643a200000000000000000000000000000000000000000000000815260008251613413816009850160208701612844565b7f6d657461646174613a20000000000000000000000000000000000000000000008152600082516137fb81600a850160208701612844565b91909101600a0192915050565b60008751602061381b8285838d01612844565b81840191507f2d2d2d0a0000000000000000000000000000000000000000000000000000000082526004895161385681838601858e01612844565b895193019261386a81838601858d01612844565b885193019261387e81838601858c01612844565b875193019261389281838601858b01612844565b86519301926138a681838601858a01612844565b929092019091019998505050505050505050565b6000602082840312156138cc57600080fd5b8151801515811461181257600080fd5b600082516138ee818460208701612844565b9190910192915050565b634e487b7160e01b600052602160045260246000fd5b82815260406020820152600061180f6040830184612868565b634e487b7160e01b600052605160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220c6c6b50510250ebacc3ab0860a0b870c09479f6413349908d7ff365c8de9372f64736f6c63430008110033",
  "libraries": {
    "ToString": "0x1E232D4c772C2A9849aDf2D979201DAbd2c19763"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buildPermitVoucher(uint256,address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "nonce": "Nonce to use",
          "owner": "Permit owner address to use",
          "permitDeadline": "Permit deadline to use",
          "r": "Permit's signature \"r\" component to use",
          "s": "Permit's signature \"s\" component to use",
          "spender": "Permit spender address to use",
          "v": "Permit's signature \"v\" component to use",
          "value": "Permit amount to use"
        },
        "returns": {
          "voucher": " The generated voucher"
        }
      },
      "buildPermitVoucher(uint256,address,address,uint256,uint256,uint8,bytes32,bytes32,bytes)": {
        "params": {
          "metadata": "Voucher metadata to use",
          "nonce": "Nonce to use",
          "owner": "Permit owner address to use",
          "permitDeadline": "Permit deadline to use",
          "r": "Permit's signature \"r\" component to use",
          "s": "Permit's signature \"s\" component to use",
          "spender": "Permit spender address to use",
          "v": "Permit's signature \"v\" component to use",
          "value": "Permit amount to use"
        },
        "returns": {
          "voucher": " The generated voucher"
        }
      },
      "buildPermitVoucher(uint256,uint256,address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "Voucher deadline to use",
          "nonce": "Nonce to use",
          "owner": "Permit owner address to use",
          "permitDeadline": "Permit deadline to use",
          "r": "Permit's signature \"r\" component to use",
          "s": "Permit's signature \"s\" component to use",
          "spender": "Permit spender address to use",
          "v": "Permit's signature \"v\" component to use",
          "value": "Permit amount to use"
        },
        "returns": {
          "voucher": " The generated voucher"
        }
      },
      "buildPermitVoucher(uint256,uint256,address,address,uint256,uint256,uint8,bytes32,bytes32,bytes)": {
        "params": {
          "deadline": "Voucher deadline to use",
          "metadata": "Voucher metadata to use",
          "nonce": "Nonce to use",
          "owner": "Permit owner address to use",
          "permitDeadline": "Permit deadline to use",
          "r": "Permit's signature \"r\" component to use",
          "s": "Permit's signature \"s\" component to use",
          "spender": "Permit spender address to use",
          "v": "Permit's signature \"v\" component to use",
          "value": "Permit amount to use"
        },
        "returns": {
          "voucher": " The generated voucher"
        }
      },
      "buildTransferFromVoucher(uint256,address,address,uint256)": {
        "params": {
          "amount": "Transfer amount to use",
          "from": "Transfer origin to use",
          "nonce": "Nonce to use",
          "to": "Transfer destination to use"
        },
        "returns": {
          "voucher": " The generated voucher"
        }
      },
      "buildTransferFromVoucher(uint256,address,address,uint256,bytes)": {
        "params": {
          "amount": "Transfer amount to use",
          "from": "Transfer origin to use",
          "metadata": "Voucher metadata to use",
          "nonce": "Nonce to use",
          "to": "Transfer destination to use"
        },
        "returns": {
          "voucher": " The generated voucher"
        }
      },
      "buildTransferFromVoucher(uint256,uint256,address,address,uint256)": {
        "params": {
          "amount": "Transfer amount to use",
          "deadline": "Voucher deadline to use",
          "from": "Transfer origin to use",
          "nonce": "Nonce to use",
          "to": "Transfer destination to use"
        },
        "returns": {
          "voucher": " The generated voucher"
        }
      },
      "buildTransferFromVoucher(uint256,uint256,address,address,uint256,bytes)": {
        "params": {
          "amount": "Transfer amount to use",
          "deadline": "Voucher deadline to use",
          "from": "Transfer origin to use",
          "metadata": "Voucher metadata to use",
          "nonce": "Nonce to use",
          "to": "Transfer destination to use"
        },
        "returns": {
          "voucher": " The generated voucher"
        }
      },
      "hashVoucher((uint32,uint256,uint256,bytes,bytes))": {
        "params": {
          "voucher": "The voucher to retrieve the hash for"
        },
        "returns": {
          "voucherHash": " The voucher hash associated to the given voucher"
        }
      },
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "serveVoucher((uint32,uint256,uint256,bytes,bytes),bytes)": {
        "custom:emit": "VoucherServed",
        "params": {
          "signature": "The associated voucher signature",
          "voucher": "The voucher to serve"
        }
      },
      "serveVoucher((uint32,uint256,uint256,bytes,bytes),bytes32,bytes32,uint8)": {
        "custom:emit": "VoucherServed",
        "params": {
          "r": "The \"r\" component of the associated voucher signature",
          "s": "The \"s\" component of the associated voucher signature",
          "v": "The \"v\" component of the associated voucher signature",
          "voucher": "The voucher to serve"
        }
      },
      "stringifyVoucher((uint32,uint256,uint256,bytes,bytes))": {
        "params": {
          "voucher": "The voucher to stringify"
        },
        "returns": {
          "voucherString": " The string representation to be signed of the given voucher"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "Interface ID to check against"
        },
        "returns": {
          "_0": "Whether the provided interface ID is supported"
        }
      },
      "validateVoucher((uint32,uint256,uint256,bytes,bytes),bytes)": {
        "params": {
          "signature": "The associated voucher signature",
          "voucher": "The voucher to validate"
        }
      },
      "validateVoucher((uint32,uint256,uint256,bytes,bytes),bytes32,bytes32,uint8)": {
        "params": {
          "r": "The \"r\" component of the associated voucher signature",
          "s": "The \"s\" component of the associated voucher signature",
          "v": "The \"v\" component of the associated voucher signature",
          "voucher": "The voucher to validate"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "VoucherServed(bytes32,address)": {
        "notice": "Emitted upon a voucher being served"
      }
    },
    "kind": "user",
    "methods": {
      "PERMIT_VOUCHER_TAG()": {
        "notice": "Return the tag associated to the PermitVoucher voucher itself"
      },
      "TRANSFER_FROM_VOUCHER_TAG()": {
        "notice": "Return the tag associated to the TransferFromVoucher voucher itself"
      },
      "VOUCHER_TYPEHASH()": {
        "notice": "Return the typehash associated to the Gateway Voucher itself"
      },
      "buildPermitVoucher(uint256,address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Build a PermitVoucher from the given parameters"
      },
      "buildPermitVoucher(uint256,address,address,uint256,uint256,uint8,bytes32,bytes32,bytes)": {
        "notice": "Build a PermitVoucher from the given parameters"
      },
      "buildPermitVoucher(uint256,uint256,address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Build a PermitVoucher from the given parameters"
      },
      "buildPermitVoucher(uint256,uint256,address,address,uint256,uint256,uint8,bytes32,bytes32,bytes)": {
        "notice": "Build a PermitVoucher from the given parameters"
      },
      "buildTransferFromVoucher(uint256,address,address,uint256)": {
        "notice": "Build a TransferFromVoucher from the given parameters"
      },
      "buildTransferFromVoucher(uint256,address,address,uint256,bytes)": {
        "notice": "Build a TransferFromVoucher from the given parameters"
      },
      "buildTransferFromVoucher(uint256,uint256,address,address,uint256)": {
        "notice": "Build a TransferFromVoucher from the given parameters"
      },
      "buildTransferFromVoucher(uint256,uint256,address,address,uint256,bytes)": {
        "notice": "Build a TransferFromVoucher from the given parameters"
      },
      "hashVoucher((uint32,uint256,uint256,bytes,bytes))": {
        "notice": "Return the voucher hash associated to the given voucher"
      },
      "serveVoucher((uint32,uint256,uint256,bytes,bytes),bytes)": {
        "notice": "Serve the given voucher, by forwarding to the appropriate handler for the voucher's tag"
      },
      "serveVoucher((uint32,uint256,uint256,bytes,bytes),bytes32,bytes32,uint8)": {
        "notice": "Serve the given voucher, by forwarding to the appropriate handler for the voucher's tag"
      },
      "stringifyVoucher((uint32,uint256,uint256,bytes,bytes))": {
        "notice": "Return the string representation to be signed for a given Voucher"
      },
      "supportsInterface(bytes4)": {
        "notice": "Implementation of the IERC165 interface"
      },
      "token()": {
        "notice": "Retrieve the address of the underlying ERC20 token"
      },
      "validateVoucher((uint32,uint256,uint256,bytes,bytes),bytes)": {
        "notice": "Validate the given voucher against the given signature"
      },
      "validateVoucher((uint32,uint256,uint256,bytes,bytes),bytes32,bytes32,uint8)": {
        "notice": "Validate the given voucher against the given signature, by the given signer"
      },
      "voucherServed(bytes32)": {
        "notice": "Determine whether the given voucher hash has been already served"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4309,
        "contract": "contracts/BarGateway.sol:BarGateway",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1344,
        "contract": "contracts/BarGateway.sol:BarGateway",
        "label": "voucherHandler",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_struct(HandlerEntry)1339_storage)"
      },
      {
        "astId": 1355,
        "contract": "contracts/BarGateway.sol:BarGateway",
        "label": "voucherServed",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_function_internal_nonpayable(t_struct(Voucher)2033_calldata_ptr)returns()": {
        "encoding": "inplace",
        "label": "function (struct IGateway.Voucher)",
        "numberOfBytes": "8"
      },
      "t_function_internal_view(t_struct(Voucher)2033_calldata_ptr)returns(t_address)": {
        "encoding": "inplace",
        "label": "function (struct IGateway.Voucher) view returns (address)",
        "numberOfBytes": "8"
      },
      "t_function_internal_view(t_struct(Voucher)2033_calldata_ptr)returns(t_string_memory_ptr)": {
        "encoding": "inplace",
        "label": "function (struct IGateway.Voucher) view returns (string)",
        "numberOfBytes": "8"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint32,t_struct(HandlerEntry)1339_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct Gateway.HandlerEntry)",
        "numberOfBytes": "32",
        "value": "t_struct(HandlerEntry)1339_storage"
      },
      "t_struct(HandlerEntry)1339_storage": {
        "encoding": "inplace",
        "label": "struct Gateway.HandlerEntry",
        "members": [
          {
            "astId": 1322,
            "contract": "contracts/BarGateway.sol:BarGateway",
            "label": "message",
            "offset": 0,
            "slot": "0",
            "type": "t_function_internal_view(t_struct(Voucher)2033_calldata_ptr)returns(t_string_memory_ptr)"
          },
          {
            "astId": 1331,
            "contract": "contracts/BarGateway.sol:BarGateway",
            "label": "signer",
            "offset": 8,
            "slot": "0",
            "type": "t_function_internal_view(t_struct(Voucher)2033_calldata_ptr)returns(t_address)"
          },
          {
            "astId": 1338,
            "contract": "contracts/BarGateway.sol:BarGateway",
            "label": "execute",
            "offset": 16,
            "slot": "0",
            "type": "t_function_internal_nonpayable(t_struct(Voucher)2033_calldata_ptr)returns()"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}